C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE CORE_PS2
OBJECT MODULE PLACED IN SOURCE\CORE_PS2.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe SOURCE\CORE_PS2.C LA WL(1) CD OT(8,SIZE) OR

stmt level    source

   1          /*-----------------------------------------------------------------------------
   2           * Filename: CORE_PS2.C - PS/2 devices handler
   3           *
   4           * Copyright (c) 2006-2009, ITE Tech. Inc. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of ITE Tech. Inc.
  10           *---------------------------------------------------------------------------*/
  11          #include "CORE_INCLUDE.H"
  12          #include "OEM_INCLUDE.H"
  13          
  14          const sPS2Struct code asPS2Struct[] = 
  15          {
  16                  { &PSCTL1, &PSINT1, &PSSTS1,    &PSDAT1,        &IER2,  &ISR2,  4       },
  17                  { &PSCTL2, &PSINT2, &PSSTS2,    &PSDAT2,        &IER2,  &ISR2,  3       },
  18                  { &PSCTL3, &PSINT3, &PSSTS3,    &PSDAT3,        &IER2,  &ISR2,  2       }
  19          };
  20          
  21          //-----------------------------------------------------------------
  22          // Send data from aux mouse 
  23          //-----------------------------------------------------------------
  24          void SendFromAux(BYTE auxdata)
  25          {
  26   1          KBHISR &= 0x0F;
  27   1      
  28   1              if(MULPX_Multiplex)
  29   1              {
  30   2                      if(AUXPortNum==0x00)
  31   2                      {
  32   3                              KBHISR = 0x40;                          // source bits is 01
  33   3                      }
  34   2                      else if(AUXPortNum==0x01)
  35   2                      {
  36   3                              KBHISR = 0x80;                          // source bits is 10
  37   3                      }
  38   2              else if(AUXPortNum==0x02)
  39   2              {
  40   3                              KBHISR = 0xC0;                          // source bits is 11
  41   3                      }
  42   2                      CLEAR_BIT(KBHISR,2);                    // clear error bit 
  43   2              }
  44   1      
  45   1              SET_BIT(KBHISR,5);                                      // set AUX bit
  46   1          if ( Ccb42_INTR_AUX )
  47   1          {
  48   2              SET_BIT(KBHICR,1);
  49   2          }
  50   1              else
  51   1              {
  52   2                      CLEAR_BIT(KBHICR,1);
  53   2              }
  54   1      
  55   1              if(PS2_MSCMD)
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 2   

  56   1              {   
  57   2              #ifdef UART_Debug
                          printf("Mouse Port %bX ACK : 0X%bX\n",AUXPortNum, auxdata);
                      #else
  60   2                  RamDebug(auxdata);
  61   2              #endif
  62   2              }
  63   1              KBHIMDOR = auxdata;
  64   1      
  65   1      #if PS2_Pack_Debug    
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_ECToHost = 0x00;
                  }
                  else
                  {
                      PS_Debug_ECToHost++;
                      if(PS_Debug_ECToHost>3)
                      {
                          PS_Debug_ECToHost = 0x01;
                      }
                  }
              #endif
  79   1      }
  80          
  81          //-----------------------------------------------------------------
  82          // 
  83          //-----------------------------------------------------------------
  84          void SetPS2InhibitTime(BYTE time)
  85          {
  86   1          if(AUXInactiveCounter<DeviceResetCmdITTime)
  87   1          {
  88   2              AUXInactiveCounter = time;
  89   2          }
  90   1      }
  91          
  92          //-----------------------------------------------------------------
  93          // Process mouse data from ps2 interface
  94          //-----------------------------------------------------------------
  95          void ProcessMouseData(BYTE channel)
  96          {
  97   1          BYTE index;
  98   1          
  99   1      #if PS2_Pack_Debug  
                  //RamDebug(PS2_Pack_Debug_Index);
                  //RamDebug(channel);
                  if(PS_Debug_ECToHost==0xFF)
                  {
                     PS_Debug_DeviceToEC = 0x00;
                  }
                  else
                  {
                      PS_Debug_DeviceToEC++;
                      if(PS_Debug_DeviceToEC>3)
                      {
                          PS_Debug_DeviceToEC = 0x01;
                      }
                  }
              #endif
 115   1      
 116   1          if(MS_ID_CUNT!=0x00)                    // Save mouse driver type(3bytes, 4bytes, or 5bytes)
 117   1          {
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 3   

 118   2              if(--MS_ID_CUNT==0x00)
 119   2              {
 120   3                  if(PS2PortxData[channel]==0x00||
 121   3                      PS2PortxData[channel]==0x03||
 122   3                       PS2PortxData[channel]==0x04)
 123   3                  {
 124   4                      MS_DRIVER_TYPE = PS2PortxData[channel];
 125   4                  }
 126   3              }
 127   2          }
 128   1      
 129   1          if(IsFlag1(KBHISR,OBF)||IsFlag1(KBHISR,IBF)||(Ccb42_DISAB_AUX))
 130   1          {   
 131   2              AUXPortNum = channel;
 132   2                  MousePendingBuf=PS2PortxData[channel];
 133   2                  MSPendingRXCount = 0x33;
 134   2          }
 135   1          else
 136   1          {
 137   2              AUXPortNum = channel;
 138   2                  SendFromAux(PS2PortxData[channel]);
 139   2                  if(TPACKCounter!=0x00)
 140   2                  {
 141   3                          TPACKCounter--;
 142   3                  }
 143   2      
 144   2              if(AUXInterfaceBusy)
 145   2              {
 146   3                  AUXInterfaceBusy = 0;
 147   3                  Send2Port((Main_KB_CHN-1), PS2_KBCmd_BK);
 148   3                  SetPS2InhibitTime(KBCmdBusyInactiveTime);
 149   3              }
 150   2              else
 151   2              {       
 152   3                      if(MULPX_Multiplex)
 153   3                      {
 154   4                      PS2Deviceactive();                  // Enable all ps2 interface
 155   4                  }
 156   3                  else
 157   3                      {
 158   4                      for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 159   4                      {
 160   5                          if(IsFlag1(AuxFlags[index], DEVICE_IS_KEYBOARD))
 161   5                          {
 162   6                              *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 163   6                              SET_BIT(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 164   6                          }
 165   5                      }
 166   4                      for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 167   4                      {
 168   5                          if(index == channel)
 169   5                          {
 170   6                              *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 171   6                                      SET_BIT(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 172   6                          }
 173   5                      }
 174   4                              SetPS2InhibitTime(InactiveTime);    
 175   4                      }
 176   3              }
 177   2          }
 178   1      } 
 179          
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 4   

 180          //-----------------------------------------------------------------
 181          // Process keybaord data from ps2 interface
 182          //-----------------------------------------------------------------
 183          void ProcessKeyboardData(BYTE channel)
 184          {
 185   1          BYTE index;
 186   1          if(Main_KB_ACK_CUNT!=0x00)
 187   1          {
 188   2              Main_KB_ACK_CUNT--;
 189   2              if(Main_KB_ACK_CUNT==0x00)
 190   2              { 
 191   3                  SKIP_AUX_SCAN_CUNT = 0x00;
 192   3              }
 193   2      
 194   2              KBC_DataPending(PS2PortxData[channel]);
 195   2              F_Service_SEND = 1;
 196   2          }
 197   1          else
 198   1          {
 199   2              Buffer_Key(PS2PortxData[channel]);
 200   2              F_Service_SEND = 1;
 201   2          }
 202   1      
 203   1          if(Main_KB_ACK_CUNT==0x00)
 204   1          {   
 205   2              PS2Deviceactive();
 206   2          }
 207   1          else
 208   1          {
 209   2              *asPS2Struct[channel].ps2ctrl=PS2_ReceiveMode;
 210   2              SET_BIT(*asPS2Struct[channel].ps2ier, asPS2Struct[channel].ctrlbit);
 211   2              SetPS2InhibitTime(InactiveTime);
 212   2          }
 213   1      }
 214          
 215          void ProcessECTestAUXACK(BYTE PortNum)
 216          {
 217   1          ECSendtoAUXFlag = 0;
 218   1          AUX_SCAN_TIMEOUT_CUNT = 0x00;
 219   1          AUX_SCAN_INDEX_HS = 0x00;
 220   1          ScanAUXStepIndex = ScanAUXStep_CheckOK + PortNum;
 221   1      
 222   1          if(IsFlag1(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))     // Command 0xF5 ACK
 223   1          {
 224   2              if(PS2PortxData[PortNum]==0xFA)
 225   2              {
 226   3                  //ClearFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 227   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 228   3                  SetFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_DISABLED);
 229   3              }
 230   2              else
 231   2              {
 232   3                  PS2_ReTryCunt++;
 233   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 234   3                  {
 235   4                      PS2_ReTryCunt = 0x00;
 236   4                      //ClearFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED);
 237   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 238   4                      SetFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_DISABLE_TIME_OUT);
 239   4                  }
 240   3              }
 241   2          }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 5   

 242   1          else if(IsFlag1(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))     // Command 0xF4 ACK
 243   1          {
 244   2              if(PS2PortxData[PortNum]==0xFA)
 245   2              {
 246   3                  //ClearFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 247   3                  AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 248   3                  SetFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_IS_ENABLED);
 249   3              }
 250   2              else
 251   2              {
 252   3                  PS2_ReTryCunt++;
 253   3                  if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
 254   3                  {
 255   4                      PS2_ReTryCunt = 0x00;
 256   4                      //ClearFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED);
 257   4                      AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 258   4                      SetFlag(AuxFlags2[AUX_SCAN_INDEX],DEVICE_ENABLED_TIME_OUT);
 259   4                  }
 260   3              }
 261   2          }
 262   1          else                                            // Test Command 0xF1 ACK 
 263   1          {
 264   2              if(AuxFlags[PortNum]==0x00)                 // Device first time plug-in
 265   2              {
 266   3                  AuxFlags[PortNum] = DEVICE_NEED_INIT;
 267   3                  AUX_SCAN_INDEX_HS = 0xFF;
 268   3                  ScanAUXStepIndex = ScanAUXStep_CheckType + PortNum; // goto check device is keyboard or mouse
 269   3                  if(PS2_AUXTypeDebug)
 270   3                  {
 271   4                      RamDebug(PS2_AUX_PlugIn);
 272   4                      RamDebug(PortNum);
 273   4                  }
 274   3              }
 275   2              else
 276   2              {
 277   3                  if(IsFlag1(AuxFlags[PortNum], DEVICE_NEED_CONFIG))
 278   3                  {
 279   4                      AUX_SCAN_INDEX_HS = 0xFF;                  
 280   4                      ScanAUXStepIndex = ScanAUXStep_Init + PortNum;  // goto config. device 
 281   4                  }
 282   3                  else
 283   3                  {
 284   4                      if(AuxFlags_KB_CMD[PortNum]!=0x00)
 285   4                      {
 286   5                          AUX_SCAN_INDEX_HS = 0xFF;
 287   5                          ScanAUXStepIndex = ScanAUXStep_UpdateKB + PortNum;
 288   5                          //if(PS2_AUXTypeDebug)
 289   5                          //{
 290   5                          //    RamDebug(PS2_AUX_StatsuUpdate);
 291   5                          //    RamDebug(PortNum);
 292   5                          //}
 293   5                      }
 294   4                  }
 295   3              }
 296   2          }
 297   1          PS2Deviceactive();  
 298   1      }
 299          
 300          
 301          //-----------------------------------------------------------------
 302          // Bypass AUX data to host
 303          //-----------------------------------------------------------------
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 6   

 304          void SendAUXData(BYTE PortNum)                  // Dino 0907             
 305          {
 306   1          BYTE index;
 307   1      
 308   1          if(SendtoAUXFlag)                                   // Send command to device and transmit done.
 309   1          {
 310   2              SendtoAUXFlag = 0;              
 311   2              *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Enable Receive mode for ACK byte
 312   2              SET_BIT(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);  // Enable interrupt for ACK 
             -byte
 313   2              AUX_SCAN_TIMEOUT_CUNT = 0x00;
 314   2          }
 315   1          else                                                                // Receive done and get data
 316   1          {   
 317   2              if(ECSendtoAUXFlag)                 // If thsi byte is EC scan channel ACK, no send to host
 318   2              {
 319   3                  ProcessECTestAUXACK(PortNum);
 320   3              }
 321   2              else                                // receive mode transmit done.      
 322   2              {
 323   3                  if(SKIP_AUX_SCAN_CUNT<SkipScanAUXTime)
 324   3                  {
 325   4                      SKIP_AUX_SCAN_CUNT = 100;    // pr-set to Stop scaning ps2 interface 1sec 
 326   4                  }
 327   3                  AUX_SCAN_INDEX_HS = 0x00;
 328   3                  AUX_SCAN_TIMEOUT_CUNT = 0x00;
 329   3                  if(IsFlag1(AuxFlags[PortNum], DEVICE_IS_MOUSE))     // If data from mosue
 330   3                      {
 331   4                      ProcessMouseData(PortNum);      // Process mosue data
 332   4                      }
 333   3                  else if(IsFlag1(AuxFlags[PortNum], DEVICE_IS_KEYBOARD)) // If data from keyboard
 334   3                      {       
 335   4                          ProcessKeyboardData(PortNum);   // Process keyboard data
 336   4                      }
 337   3                  else
 338   3                  {
 339   4                      PS2Deviceactive();          // Enable all ps2 interface
 340   4                  }
 341   3              }
 342   2          }
 343   1      }
 344          
 345          
 346          //-----------------------------------------------------------------
 347          // 
 348          //-----------------------------------------------------------------
 349          void ClaerPS2IFPendingEvent(void)
 350          {
 351   1          vInhibitAUXDevice();
 352   1          IER2&=(~0x1C);                      // Disable all PS2 interrupt
 353   1          ISR2|=0x1C;                             // Write to clear all PS2 pending interrupt
 354   1          PS2StartBit = 0;            // clear ps2 interrupt start bit flag
 355   1          F_Service_PS2_IRQ = 0;          // Clear PS2 interrupt service flag
 356   1      }
 357          
 358          //-----------------------------------------------------------------
 359          // EC Send command to ps2 interface no ack to host
 360          //-----------------------------------------------------------------
 361          void ECSend2Port( BYTE PortNum, BYTE PortData)
 362          {
 363   1          ClaerPS2IFPendingEvent();
 364   1              ECSendtoAUXFlag = 1;
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 7   

 365   1          SendtoAUXFlag = 1;
 366   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 367   1              *asPS2Struct[PortNum].ps2data = PortData;
 368   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
 369   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 370   1         
 371   1          SET_BIT(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt   
 372   1      }
 373          
 374          //-----------------------------------------------------------------
 375          // Send data to ps2 interface
 376          //-----------------------------------------------------------------
 377          void Send2Port( BYTE PortNum, BYTE PortData)
 378          {
 379   1          if(PortData==0xFF)                              // reset command
 380   1          {
 381   2              AUXInactiveCounter = DeviceResetCmdITTime;  // 1sec
 382   2          }
 383   1          else
 384   1          {
 385   2              SetPS2InhibitTime(InactiveTime);
 386   2          }
 387   1          
 388   1          ClaerPS2IFPendingEvent();
 389   1      
 390   1          if(SKIP_AUX_SCAN_CUNT<SkipScanAUXTime)
 391   1          {
 392   2              SKIP_AUX_SCAN_CUNT = SkipScanAUXTime; 
 393   2          }
 394   1          AUX_SCAN_INDEX_HS = 0x00;
 395   1      
 396   1          ECSendtoAUXFlag = 0;
 397   1          SendtoAUXFlag = 1;
 398   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 399   1              *asPS2Struct[PortNum].ps2data = PortData;
 400   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
 401   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 402   1        
 403   1          SET_BIT(*asPS2Struct[PortNum].ps2ier, asPS2Struct[PortNum].ctrlbit);    // Enable interrupt 
 404   1      }
 405          
 406          //-----------------------------------------------------------------
 407          // Send command to ps2 interface and check ack or not
 408          //  Note : return   0 --> // Transaction done
 409          //                  1 --> // Transaction fail
 410          //
 411          //                  After this function, all ps2 channel is inhibit and channel interrupt is disabled
 412          //-----------------------------------------------------------------
 413          BYTE Send2PortNWait( BYTE PortNum, BYTE cmd, BYTE bytecunt)
 414          {
 415   1          BYTE result;
 416   1          BYTE index;
 417   1      
 418   1          PS2IFAck = 0x00;
 419   1      
 420   1          ClaerPS2IFPendingEvent();
 421   1          
 422   1          ECSendtoAUXFlag = 0;
 423   1          SendtoAUXFlag = 0;
 424   1              *asPS2Struct[PortNum].ps2ctrl = 0x1D;
 425   1              *asPS2Struct[PortNum].ps2data = cmd;
 426   1              *asPS2Struct[PortNum].ps2ctrl = 0x1C;
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 8   

 427   1              *asPS2Struct[PortNum].ps2ctrl = 0x1E;
 428   1      
 429   1          result = bExtAUXTimeOutCheck(PortNum);
 430   1      
 431   1          if(result==0x00)                                    // Transaction done
 432   1          {
 433   2              for(index=0x00;index<bytecunt;index++)
 434   2              {
 435   3                  *asPS2Struct[PortNum].ps2ctrl=PS2_ReceiveMode;  // Get Last ACK by bytecunt
 436   3                  result = bExtAUXTimeOutCheck(PortNum);
 437   3                  if(result!=0x00)
 438   3                  {
 439   4                      break;                                  // Transaction fail
 440   4                  }
 441   3              }
 442   2          }
 443   1      
 444   1          return(result);                                     
 445   1      }
 446          
 447          //-----------------------------------------------------------------
 448          // Process AUX command
 449          //-----------------------------------------------------------------
 450          void vSendCmdtoMouse(BYTE PortNum)
 451          {
 452   1          BYTE index;
 453   1          ResetMSPendingData();
 454   1              Cmd_A8();   
 455   1              TPACKCounter = 0x00;
 456   1          MS_ID_CUNT = 0x00;
 457   1      
 458   1              if(AUX2ByteCommand)
 459   1              {       
 460   2                      if(TPResolution == 0xFF)
 461   2                      {
 462   3                              TPResolution = KBHIData;
 463   3                      }
 464   2                      else if(TPSamplingRate == 0xFF)
 465   2                      {
 466   3                              TPSamplingRate = KBHIData;              
 467   3                      }
 468   2      
 469   2                      Send2Port(PortNum, KBHIData);   
 470   2                      AUX2ByteCommand = 0;
 471   2                      return;
 472   2              }
 473   1      
 474   1              switch(KBHIData)
 475   1              {
 476   2                      case 0xE8:                      // Set Resolution (2 byte)
 477   2                              TPResolution = 0xFF;
 478   2                              AUX2ByteCommand=1;
 479   2                              break;
 480   2                      
 481   2                      case 0xF3:                      // Set Sampling Rate (2 byte)
 482   2                              TPSamplingRate = 0xFF;  
 483   2                              AUX2ByteCommand=1;
 484   2                              break;  
 485   2                              
 486   2                      case 0xF4:      
 487   2                  #if PS2_Pack_Debug
                          PS_Debug_ECToHost = 0xFF;
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 9   

                          #endif
 490   2                              EnableTP = 1;
 491   2                              MouseDriverIn = 1;
 492   2                              break;
 493   2                              
 494   2                      case 0xF5:
 495   2                              MouseDriverIn = 0;
 496   2                              break;  
 497   2                              
 498   2                      case 0xE6:
 499   2                              break;
 500   2                              
 501   2                      case 0xE7:
 502   2                              break;
 503   2                              
 504   2                      case 0xEA:
 505   2                              break;
 506   2                              
 507   2                      case 0xEC:
 508   2                              break;
 509   2                              
 510   2                      case 0xEE:
 511   2                              break;
 512   2                              
 513   2                      case 0xF0:
 514   2                              break;
 515   2                              
 516   2                      case 0xF6:              
 517   2                              break;  
 518   2                              
 519   2                      case 0xE9:      
 520   2                              break;
 521   2                              
 522   2                      case 0xF2:      
 523   2                  MS_ID_CUNT = 2;
 524   2                              break;
 525   2                              
 526   2                      case 0xEB:
 527   2                      case 0xFE:      
 528   2                              break;
 529   2                              
 530   2                      case 0xFF:
 531   2                  //ResetMSPendingData();
 532   2                              MouseDriverIn = 0;
 533   2                  MULPX_Multiplex = 0;            // Disable Activate Multiplex mode 
 534   2                              EnableTP = 0;
 535   2                              TPACKCounter = 0x03;            // ACK 3 bytes
 536   2      
 537   2                  for(index=0x00; index<3; index++)
 538   2                  {
 539   3                      if((Main_MOUSE_CHN-1)!=index)
 540   3                      {
 541   4                          if(IsFlag1(AuxFlags[index], DEVICE_IS_MOUSE))
 542   4                          {
 543   5                              AuxFlags[index] = 0x00;
 544   5                          }
 545   4                      }
 546   3                  }
 547   2                              break;
 548   2                              
 549   2                      default:                                    // Invalid command
 550   2                              break;
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 10  

 551   2              }
 552   1      
 553   1              Send2Port(PortNum, KBHIData);
 554   1      
 555   1      }
 556          
 557          //-----------------------------------------------------------------
 558          // Process AUX MUX command
 559          //-----------------------------------------------------------------
 560          void vSendCmdtoMUX(BYTE port)
 561          {
 562   1              Cmd_A8();
 563   1          ResetMSPendingData();
 564   1              if(AUX2ByteCommand)
 565   1              {       
 566   2                      Send2Port(port, KBHIData);      
 567   2                      AUX2ByteCommand = 0;
 568   2                      return;
 569   2              }
 570   1      
 571   1              switch(KBHIData)
 572   1              {
 573   2                      case 0xE8:              // Set Resolution (2 byte)
 574   2                      case 0xF3:              // Set Sampling Rate (2 byte)
 575   2                              Send2Port(port, KBHIData);      
 576   2                              AUX2ByteCommand=1;
 577   2                              break;  
 578   2                              
 579   2                      case 0xF4:      
 580   2                              Send2Port(port, KBHIData);
 581   2                              break;
 582   2                              
 583   2                      case 0xF5:      
 584   2                              Send2Port(port, KBHIData);
 585   2                              break;
 586   2                              
 587   2                      case 0xE6:
 588   2                      case 0xE7:
 589   2                      case 0xEA:
 590   2                      case 0xEC:
 591   2                      case 0xEE:
 592   2                      case 0xF0:      
 593   2                      case 0xF6:      
 594   2                      case 0xE9:
 595   2                      case 0xEB:
 596   2                      case 0xF2:                              
 597   2                      case 0xFE:      
 598   2                              Send2Port(port, KBHIData);
 599   2                              break;
 600   2                              
 601   2                      case 0xE1:                                              // For older Synaptics TouchPads        
 602   2                              Send2Port(port, KBHIData);
 603   2                              break;  
 604   2                              
 605   2                      case 0xFF:
 606   2                  //ResetMSPendingData();
 607   2                              Send2Port(port, KBHIData);
 608   2                              break;
 609   2                              
 610   2                      default:                                                // Invalid command
 611   2                              break;
 612   2              }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 11  

 613   1      }
 614          
 615          
 616          //-----------------------------------------------------------------
 617          // FUNCTION: Ps2_Init - Init PS2 registers and variables.  
 618          // Put in receive mode.
 619          //-----------------------------------------------------------------
 620          void Ps2_Init(void)
 621          {
 622   1      
 623   1      }
 624          
 625          //-----------------------------------------------------------------
 626          // The function of PS2 interface interrupt service routine
 627          //-----------------------------------------------------------------
 628          void Service_PS2_IRQ(void)
 629          {       
 630   1          if(PS2_IRQ_Channel!=0xFF)
 631   1          {
 632   2              SendAUXData(PS2_IRQ_Channel);
 633   2              PS2_IRQ_Channel = 0xFF;
 634   2          }
 635   1      }
 636          
 637          //----------------------------------------------------------------------------
 638          //----------------------------------------------------------------------------
 639          // The function of stopping ps2 devices send data to KBC
 640          //----------------------------------------------------------------------------
 641          void vPS2DeviceInactive(void)
 642          {
 643   1              PSCTL1 = PS2_InhibitMode;
 644   1              PSCTL2 = PS2_InhibitMode;
 645   1              PSCTL3 = PS2_InhibitMode;
 646   1      }
 647          
 648          //----------------------------------------------------------------------------
 649          // The function of starting ps2 devices send data to KBC
 650          //----------------------------------------------------------------------------
 651          void PS2Deviceactive(void)
 652          {        
 653   1          BYTE index;
 654   1          for(index=0x00;index<3;index++)
 655   1          {
 656   2              if(IsFlag1(AuxFlags[index],DEVICE_IS_KEYBOARD))
 657   2              {
 658   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 659   3                  SET_BIT(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 660   3              }
 661   2          }
 662   1          for(index=0x00;index<3;index++)
 663   1          {
 664   2              if(IsFlag1(AuxFlags[index],DEVICE_IS_MOUSE))
 665   2              {
 666   3                  *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 667   3                  SET_BIT(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 668   3              }
 669   2          }     
 670   1      }
 671          
 672          //----------------------------------------------------------------------------
 673          // The function of inhibit AUX device
 674          //----------------------------------------------------------------------------
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 12  

 675          void vInhibitAUXDevice(void)
 676          { 
 677   1              vPS2DeviceInactive();
 678   1      
 679   1              ET1 = 0;                // Disable timer1 interrupt
 680   1          TL1 = 0x8C;     // set timer1 counter 150 us
 681   1          TH1 = 0xFF;     // set timer1 counter 150 us        
 682   1              TR1 = 1;                // enable timer1
 683   1              TF1 = 0;                // clear overflow flag
 684   1              while(!TF1);    // waitting overflow flag
 685   1              TF1 = 0;                // clear overflow flag
 686   1              ET1 = 1;                // Enable timer1 interrupt
 687   1      }
 688          
 689          //----------------------------------------------------------------------------
 690          // The function of scaning AUX device
 691          //----------------------------------------------------------------------------
 692          void ScanAUXDevice(void)
 693          {
 694   1              BYTE index;
 695   1          BYTE timeout;
 696   1         
 697   1              for(index=0x00;index<3;index++)
 698   1              {
 699   2              if(IsFlag1(AuxFlags[index], DEVICE_IS_MOUSE)||IsFlag1(AuxFlags[index], DEVICE_IS_KEYBOARD))
 700   2              {
 701   3                  continue;
 702   3              }
 703   2                      AuxFlags[index] = 0x00;                 
 704   2      
 705   2                      if(index==0x00)
 706   2                      {
 707   3                              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
 708   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.             
 709   3                      }
 710   2                      else if(index==0x01)
 711   2                      {
 712   3                              if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
 713   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.    
 714   3                      }
 715   2                      else if(index==0x02)
 716   2                      {
 717   3                              if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
 718   3                                      continue;                   // If this channel isn't PS2 ALT function, scan next.    
 719   3                      }
 720   2              
 721   2              if(Send2PortNWait(index,0xFF,1)==0x00)
 722   2              {
 723   3                  SetFlag(AuxFlags[index], DEVICE_IS_ATTACHED);
 724   3      
 725   3                  for(timeout=0x00;timeout<=20;timeout++) // 600 ms time-out
 726   3                  {
 727   4                      *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 728   4                      if(!bExtAUXTimeOutCheck(index))
 729   4                      {
 730   5                          break;
 731   5                      }
 732   4                  }
 733   3                      
 734   3                  if(timeout>20)                      // wait aa time-out
 735   3                  {
 736   4                      if(PS2_AUXTypeDebug)
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 13  

 737   4                      {
 738   5                          RamDebug(FF_ACK_AA_TimeOut);
 739   5                      }
 740   4                  }
 741   3                  else
 742   3                  {
 743   4                      for(timeout=0x00;timeout<=10;timeout++)
 744   4                      {
 745   5                          *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 746   5                          if(!bExtAUXTimeOutCheck(index))
 747   5                          {
 748   6                              break;
 749   6                          }
 750   5                      }
 751   4                          
 752   4                      if(timeout>10)          // wait 00 time-out
 753   4                      {
 754   5                          SetFlag(AuxFlags[index], DEVICE_IS_KEYBOARD);
 755   5                          CheckNSetMainKBCHN(index);
 756   5              
 757   5                          if(PS2_AUXTypeDebug)
 758   5                          {
 759   6                              RamDebug(FF_ACK_00_TimeOut);
 760   6                              RamDebug(PS2_AUXType_KB);
 761   6                          }        
 762   5                      }
 763   4                      else
 764   4                      {
 765   5                          if(PS2_AUXTypeDebug)
 766   5                          {
 767   6                              RamDebug(FF_ACK_00_TimeDone);
 768   6                          }
 769   5                              
 770   5                          SetFlag(AuxFlags[index], DEVICE_IS_MOUSE);
 771   5      
 772   5                          CheckNSetMainMSCHN(index);
 773   5      
 774   5                          if(PS2_AUXTypeDebug)
 775   5                          {
 776   6                              RamDebug(PS2_AUXType_KB);
 777   6                              RamDebug(PS2_KB_Strange);
 778   6                          } 
 779   5                      }
 780   4                  }
 781   3              }
 782   2              else
 783   2              {
 784   3                              continue;           // Device non-ack
 785   3              }       
 786   2              }
 787   1      
 788   1          if((Main_MOUSE_CHN==0x00)&&(Main_KB_CHN==0x00)) // No any device
 789   1          {
 790   2              AUX_SCAN_TIMEOUT_CUNT = 0x00;
 791   2              AUX_SCAN_INDEX_HS = 0x00;
 792   2          }
 793   1          
 794   1          #if TouchPad_only
                      Main_KB_CHN = 0x00;
                  #endif
 797   1      }
 798          
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 14  

 799          //----------------------------------------------------------------------------
 800          // The function of reading device ID
 801          //----------------------------------------------------------------------------
 802          void ReadDeviceID(void)
 803          {
 804   1          PS2IFAck = 0x00;
 805   1          if(Send2PortNWait(AUX_SCAN_INDEX,0xF2,2)==0x00)
 806   1          {
 807   2                  if(PS2IFAck ==0xAB)                                         // Device is keyboard
 808   2                  {
 809   3                  SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
 810   3                  CheckNSetMainKBCHN(AUX_SCAN_INDEX);
 811   3                  *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;   // Get ID
 812   3                  bExtAUXTimeOutCheck(AUX_SCAN_INDEX);
 813   3                  if(PS2_AUXTypeDebug)
 814   3                  {
 815   4                      RamDebug(PS2_AUXType_KB);
 816   4                  }
 817   3              }
 818   2              else
 819   2              {
 820   3                  SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_MOUSE);      // Device is mouse
 821   3                  CheckNSetMainMSCHN(AUX_SCAN_INDEX);
 822   3                  if(PS2_AUXTypeDebug)
 823   3                  {
 824   4                      RamDebug(PS2_AUXType_MS);
 825   4                  }
 826   3              }
 827   2          }
 828   1          else
 829   1          {
 830   2              if(PS2_AUXTypeDebug)
 831   2              {
 832   3                  RamDebug(PS2_AUXType_F2_TimeOut);
 833   3              }
 834   2          }
 835   1      }
 836          
 837          
 838          //----------------------------------------------------------------------------
 839          // The function of checking AUX device is keyborad or mouse
 840          //----------------------------------------------------------------------------
 841          void CheckAUXDeviceType(void)
 842          {
 843   1          BYTE timeout;
 844   1          
 845   1          if(AuxFlags[AUX_SCAN_INDEX] == DEVICE_NEED_INIT)
 846   1          {
 847   2              AuxFlags[AUX_SCAN_INDEX]=0x00;
 848   2              PS2IFAck = 0x00;
 849   2      
 850   2              if(PS2_AUXTypeDebug)
 851   2              {
 852   3                  RamDebug((AUX_SCAN_INDEX+1));
 853   3              }
 854   2      
 855   2              if(Send2PortNWait(AUX_SCAN_INDEX,0xFF,1)==0x00)
 856   2              {
 857   3                  SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_ATTACHED);
 858   3      
 859   3                  for(timeout=0x00;timeout<=20;timeout++) // 600 ms time-out
 860   3                  {
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 15  

 861   4                      *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
 862   4                      if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX))
 863   4                      {
 864   5                          break;
 865   5                      }
 866   4                  }
 867   3                      
 868   3                  if(timeout>20)          // wait aa time-out
 869   3                  {
 870   4                      if(PS2_AUXTypeDebug)
 871   4                      {
 872   5                          RamDebug(FF_ACK_AA_TimeOut);
 873   5                      }
 874   4                  }
 875   3                  else
 876   3                  {
 877   4                      for(timeout=0x00;timeout<=10;timeout++)
 878   4                      {
 879   5                          *asPS2Struct[AUX_SCAN_INDEX].ps2ctrl=PS2_ReceiveMode;
 880   5                          if(!bExtAUXTimeOutCheck(AUX_SCAN_INDEX))
 881   5                          {
 882   6                               break;
 883   6                          }
 884   5                      }
 885   4                          
 886   4                      if(timeout>10)          // wait 00 time-out
 887   4                      {
 888   5                          SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
 889   5                          CheckNSetMainKBCHN(AUX_SCAN_INDEX);
 890   5                              
 891   5                          if(PS2_AUXTypeDebug)
 892   5                          {
 893   6                              RamDebug(FF_ACK_00_TimeOut);
 894   6                              RamDebug(PS2_AUXType_KB);
 895   6                          }        
 896   5                      }
 897   4                      else
 898   4                      {
 899   5                          if(PS2_AUXTypeDebug)
 900   5                          {
 901   6                              RamDebug(FF_ACK_00_TimeDone);
 902   6                          }
 903   5                              
 904   5                          if(PS2IFAck==0x00)
 905   5                          {
 906   6                              ReadDeviceID();
 907   6                          }
 908   5                          else
 909   5                          {
 910   6                              SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD);
 911   6                              CheckNSetMainKBCHN(AUX_SCAN_INDEX);
 912   6                              if(PS2_AUXTypeDebug)
 913   6                              {
 914   7                                  RamDebug(PS2_AUXType_KB);
 915   7                                  RamDebug(PS2_KB_Strange);
 916   7                              } 
 917   6                          }
 918   5                      }
 919   4                  }
 920   3                  SetFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
 921   3                  ScanAUXStepIndex = ScanAUXStep_Init + AUX_SCAN_INDEX;
 922   3              }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 16  

 923   2              else
 924   2              {
 925   3                  if(PS2_AUXTypeDebug)
 926   3                  {
 927   4                      RamDebug(FF_ACK_FA_TimeOut);
 928   4                  }  
 929   3                  AUX_SCAN_INDEX_HS = 0x00;
 930   3                  ScanAUXStepIndex = ScanAUXStep_InitFail + AUX_SCAN_INDEX;
 931   3              }
 932   2              PS2Deviceactive();
 933   2          } 
 934   1      }
 935          
 936          //----------------------------------------------------------------------------
 937          // The polling aux device center
 938          //----------------------------------------------------------------------------
 939          void PollingAUXDeviceCenter(void)
 940          {
 941   1          BYTE index;
 942   1       
 943   1          if(SKIP_AUX_SCAN_CUNT!=0x00)
 944   1          {
 945   2              SKIP_AUX_SCAN_CUNT--;
 946   2          }
 947   1          else
 948   1          {
 949   2              if(AUX_SCAN_INDEX_HS!=0xFF)
 950   2              {
 951   3                  AUX_SCAN_INDEX_HS = 0xFF;
 952   3                  AUX_SCAN_INDEX++;
 953   3                  if(AUX_SCAN_INDEX>2)
 954   3                  {
 955   4                      AUX_SCAN_INDEX=0x00;
 956   4                  }
 957   3                  ScanAUXStepIndex = ScanAUXStep_ScanPort+AUX_SCAN_INDEX;
 958   3              }
 959   2              else
 960   2              {
 961   3                  if(ECSendtoAUXFlag)
 962   3                  {
 963   4                      AUX_SCAN_TIMEOUT_CUNT++;
 964   4                      if(AUX_SCAN_TIMEOUT_CUNT>=CheckDeviceTimeOut)
 965   4                      {
 966   5                          AUX_SCAN_TIMEOUT_CUNT = 0x00;
 967   5                          AUX_SCAN_INDEX_HS = 0x00;
 968   5                          AuxFlags[AUX_SCAN_INDEX] = 0x00;
 969   5                          AuxFlags2[AUX_SCAN_INDEX] = 0x00;
 970   5                          PS2_ReTryCunt = 0x00;
 971   5                          SendtoAUXFlag = 0;  
 972   5                          ECSendtoAUXFlag = 0;
 973   5      
 974   5                          if(Main_MOUSE_CHN == (AUX_SCAN_INDEX+1))
 975   5                          {
 976   6                              Main_MOUSE_CHN = 0x00;
 977   6                              for(index=0x00;index<3;index++)
 978   6                              {
 979   7                                  if(IsFlag1(AuxFlags[index], DEVICE_IS_MOUSE))
 980   7                                  {
 981   8                                      SetFlag(AuxFlags[index], DEVICE_IS_MAIN_MOUSE);
 982   8                                      Main_MOUSE_CHN = index + 1;
 983   8                                      break;
 984   8                                  }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 17  

 985   7                              }   
 986   6                          }
 987   5                          
 988   5                          if(Main_KB_CHN == (AUX_SCAN_INDEX+1))
 989   5                          {
 990   6                              Main_KB_CHN = 0x00;
 991   6                              for(index=0x00;index<3;index++)
 992   6                              {
 993   7                                  if(IsFlag1(AuxFlags[index], DEVICE_IS_KEYBOARD))
 994   7                                  {
 995   8                                      SetFlag(AuxFlags[index], DEVICE_IS_MAIN_KB);
 996   8                                      Main_KB_CHN = index + 1;
 997   8                                      break;
 998   8                                  }
 999   7                              }
1000   6                          }
1001   5                          PS2Deviceactive();  
1002   5                      }
1003   4                  }
1004   3              }
1005   2          }
1006   1      }
1007          
1008          //----------------------------------------------------------------------------
1009          // The function of update external keyboard device
1010          //----------------------------------------------------------------------------
1011          const BYTE code UpdateConfigAUXKB[] = {0xF5, 0xF4, 0xF3, 0xED}; // Command table
1012          
1013          void UpdateExtKeyboard(BYTE portnum)
1014          {   
1015   1              BYTE index;
1016   1          
1017   1          for(index=0x00; index<sizeof(UpdateConfigAUXKB); index++)   
1018   1          {
1019   2              if(IS_BIT_SET(AuxFlags_KB_CMD[AUX_SCAN_INDEX], index))
1020   2              {
1021   3                  if(!Send2PortNWait(portnum,UpdateConfigAUXKB[index],1))
1022   3                  {
1023   4                      if(UpdateConfigAUXKB[index]==0xF3)
1024   4                      {
1025   5                          Send2PortNWait(portnum,Save_Typematic,1);
1026   5                      }
1027   4                      else if(UpdateConfigAUXKB[index]==0xED)
1028   4                      {
1029   5                          Send2PortNWait(portnum,(Led_Data&0x07),1);
1030   5                      }
1031   4                      CLR_BIT(AuxFlags_KB_CMD[AUX_SCAN_INDEX], index);
1032   4                  }
1033   3              }
1034   2          }
1035   1      }
1036          
1037          //----------------------------------------------------------------------------
1038          // The function of update aux keyboard device
1039          //----------------------------------------------------------------------------
1040          void UpdateAUXKBDevice(void)
1041          {
1042   1          UpdateExtKeyboard(AUX_SCAN_INDEX);
1043   1          AUX_SCAN_INDEX_HS = 0x00;
1044   1      }
1045          
1046          
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 18  

1047          //----------------------------------------------------------------------------
1048          // The function of init, AUX device
1049          //----------------------------------------------------------------------------
1050          void InitAUXDevice(void)
1051          {
1052   1          if(IsFlag1(AuxFlags[AUX_SCAN_INDEX], DEVICE_IS_KEYBOARD))   // device is keyboard
1053   1          {
1054   2              if(KeyboardDriverIn)
1055   2              {
1056   3                  if(AuxFlags_KB_CMD[AUX_SCAN_INDEX]==0x00)
1057   3                  {
1058   4                      ConfigExtKeyboard(AUX_SCAN_INDEX);
1059   4                  }
1060   3                  else
1061   3                  {
1062   4                      UpdateExtKeyboard(AUX_SCAN_INDEX);
1063   4                  }
1064   3                  ClearFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1065   3              }
1066   2              else
1067   2              {
1068   3                  
1069   3              }
1070   2          }
1071   1          else                                                // device is mouse
1072   1          {
1073   2              if(MouseDriverIn)
1074   2              {
1075   3                      if(MULPX_Multiplex)
1076   3                      {
1077   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1078   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1079   4                      ClearFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1080   4                      }
1081   3                  else
1082   3                  {            
1083   4                      if(vSetIntellimouse(MS_DRIVER_TYPE,AUX_SCAN_INDEX))
1084   4                      {
1085   5                          if(ReadMouseID(AUX_SCAN_INDEX)==MS_DRIVER_TYPE)
1086   5                          {
1087   6                              if(ConfigExtMouse(AUX_SCAN_INDEX))
1088   6                              {
1089   7                                  ClearFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1090   7                              }
1091   6                              else
1092   6                              {
1093   7                                  AuxFlags[AUX_SCAN_INDEX] = 0x00;        // device error
1094   7                              }
1095   6                          }
1096   5                          else
1097   5                          {
1098   6                              SetFlag(AuxFlags[AUX_SCAN_INDEX],DEVICE_MS_DRIVER_NO_MATCH);
1099   6                              ClearFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1100   6                          }
1101   5                      }
1102   4                      else
1103   4                      {
1104   5                          AuxFlags[AUX_SCAN_INDEX] = 0x00;                // device error
1105   5                      }
1106   4                  }
1107   3              }
1108   2              else
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 19  

1109   2              {
1110   3                      if(MULPX_Multiplex)
1111   3                      {
1112   4                      AUXData_To_Host_nWait(0xAA,AUX_SCAN_INDEX);
1113   4                      AUXData_To_Host_nWait(0x00,AUX_SCAN_INDEX);
1114   4                      ClearFlag(AuxFlags[AUX_SCAN_INDEX], DEVICE_NEED_CONFIG);
1115   4                      }
1116   3              }
1117   2          }
1118   1          PS2Deviceactive();
1119   1          AUX_SCAN_INDEX_HS = 0x00;
1120   1      }
1121          
1122          //----------------------------------------------------------------------------
1123          // The function of checking on/off TP.
1124          // Just for "TouchPad_only" selection set.
1125          //----------------------------------------------------------------------------
1126          void TPOnly_CheckOnOffTP(void)
1127          {
1128   1          BYTE index;
1129   1          
1130   1              for(index=0x00;index<3;index++)
1131   1              {
1132   2                      if(IsFlag1(AuxFlags2[index], DEVICE_NEED_DISABLED))
1133   2                      {
1134   3                      if(!Send2PortNWait(index,0xF5,1))
1135   3                      {
1136   4                              AuxFlags2[index] = 0x00;
1137   4                      SetFlag(AuxFlags2[index],DEVICE_IS_DISABLED);
1138   4                      }
1139   3                  else
1140   3                  {
1141   4                      PS2_ReTryCunt++;
1142   4                      if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
1143   4                      {
1144   5                          PS2_ReTryCunt = 0x00;
1145   5                          AuxFlags2[index] = 0x00;
1146   5                          SetFlag(AuxFlags2[index],DEVICE_DISABLE_TIME_OUT);
1147   5                      }
1148   4                  }
1149   3                      }
1150   2                      else if(IsFlag1(AuxFlags2[index], DEVICE_NEED_ENABLED))
1151   2                      {
1152   3                      if(!Send2PortNWait(index,0xF4,1))
1153   3                      {
1154   4                              AuxFlags2[index] = 0x00;
1155   4                      SetFlag(AuxFlags2[index],DEVICE_IS_ENABLED);
1156   4                                      *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
1157   4                      }
1158   3                  else
1159   3                  {
1160   4                      PS2_ReTryCunt++;
1161   4                      if(PS2_ReTryCunt>PS2_OnOffTimeOutCUNT)
1162   4                      {
1163   5                          PS2_ReTryCunt = 0x00;
1164   5                          AuxFlags2[index] = 0x00;
1165   5                          SetFlag(AuxFlags2[index],DEVICE_DISABLE_TIME_OUT);
1166   5                      }
1167   4                  }            
1168   3                      }
1169   2              }    
1170   1      }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 20  

1171          
1172          //----------------------------------------------------------------------------
1173          // The function of scaning AUX device step
1174          //----------------------------------------------------------------------------
1175          void ScanAUXDeviceStep(void)
1176          {
1177   1      #if TouchPad_only  
                  if(IsFlag1(PSSTS1, TDS)&&IS_BIT_SET(ISR2,4))        // Transaction done  
                  {
                      ISR_Aux_Port1();
                  }
                  if(IsFlag1(PSSTS2, TDS)&&IS_BIT_SET(ISR2,3))        // Transaction done 
                  {   
                          ISR_Aux_Port2();
                  }   
                  if(IsFlag1(PSSTS3, TDS)&&IS_BIT_SET(ISR2,2))        // Transaction done 
                  {
                          ISR_Aux_Port3();
                  }   
                  TPOnly_CheckOnOffTP();
                  
              #else
1193   1          if(StartENAUXDevice)
1194   1          {
1195   2              StartENAUXDevice = 0;
1196   2              EnableAUXDevice();
1197   2              if(IsFlag1(PSSTS1, SS)||IsFlag1(PSSTS2, SS)||IsFlag1(PSSTS3, SS))
1198   2              {
1199   3                  AuxScanWDT++;
1200   3                  if(AuxScanWDT>250)      // 2.5 sec
1201   3                  {
1202   4                      AuxScanWDT = 0x00;
1203   4                      ScanAUXPortX();
1204   4                  }
1205   3              }
1206   2              else
1207   2              {
1208   3                  AuxScanWDT = 0x00;
1209   3              }
1210   2          }
1211   1              
1212   1          if(IsFlag1(PSSTS1, TDS)&&IS_BIT_SET(ISR2,4))        // Transaction done  
1213   1              {
1214   2                      ISR_Aux_Port1();
1215   2              }
1216   1          if(IsFlag1(PSSTS2, TDS)&&IS_BIT_SET(ISR2,3))        // Transaction done 
1217   1              {   
1218   2                      ISR_Aux_Port2();
1219   2              }       
1220   1          if(IsFlag1(PSSTS3, TDS)&&IS_BIT_SET(ISR2,2))        // Transaction done 
1221   1              {
1222   2                      ISR_Aux_Port3();
1223   2              }
1224   1          if((Service != 0x00)||(Service1 != 0x00))
1225   1          {
1226   2              return;
1227   2          }
1228   1          
1229   1          if(IsFlag1(PSSTS1, SS)||IsFlag1(PSSTS2, SS)||IsFlag1(PSSTS3, SS))
1230   1          {
1231   2              return;
1232   2          }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 21  

1233   1      
1234   1          if(StartScanAUXDevice)
1235   1          {
1236   2              StartScanAUXDevice = 0;
1237   2              PollingAUXDeviceCenter();
1238   2          }
1239   1      
1240   1          if(SKIP_AUX_SCAN_CUNT!=0x00)
1241   1          {
1242   2              return;
1243   2          }
1244   1      
1245   1          if(MSPendingRXCount==0x33)
1246   1          {
1247   2              return;
1248   2          }
1249   1             
1250   1          switch(ScanAUXStepIndex)
1251   1          {
1252   2              case ScanAUXStep_ScanPort0:   
1253   2              case ScanAUXStep_ScanPort1:
1254   2              case ScanAUXStep_ScanPort2:
1255   2                  if(AUXInactiveCounter==0x00)
1256   2                      {
1257   3                      ScanAUXPortX();
1258   3                  }
1259   2                  break;      
1260   2                  
1261   2              case ScanAUXStep_CheckType0:
1262   2              case ScanAUXStep_CheckType1:
1263   2              case ScanAUXStep_CheckType2:
1264   2                  CheckAUXDeviceType();
1265   2                  break;
1266   2                  
1267   2              case ScanAUXStep_Init0:
1268   2              case ScanAUXStep_Init1:
1269   2              case ScanAUXStep_Init2:
1270   2                  InitAUXDevice();
1271   2                  break;
1272   2      
1273   2              case ScanAUXStep_UpdateKB0:
1274   2              case ScanAUXStep_UpdateKB1:
1275   2              case ScanAUXStep_UpdateKB2:
1276   2                  UpdateAUXKBDevice();
1277   2                  break;
1278   2      
1279   2              case ScanAUXStep_CheckOK1:
1280   2              case ScanAUXStep_CheckOK2:
1281   2              case ScanAUXStep_CheckOK3:
1282   2                  
1283   2              case ScanAUXStep_InitFail0:
1284   2              case ScanAUXStep_InitFail1:
1285   2              case ScanAUXStep_InitFail2:            
1286   2             
1287   2              case ScanAUXStep_Skip0:
1288   2              case ScanAUXStep_Skip1:
1289   2              case ScanAUXStep_Skip2:
1290   2                  
1291   2              case ScanAUXStep_WaitPort0:
1292   2              case ScanAUXStep_WaitPort1:
1293   2              case ScanAUXStep_WaitPort2:
1294   2                  
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 22  

1295   2              default:
1296   2                  break;
1297   2          }   
1298   1      #endif    
1299   1      }
1300          
1301          //----------------------------------------------------------------------------
1302          // The function of checking AUX device
1303          //----------------------------------------------------------------------------
1304          void ScanAUXPortX(void)
1305          {
1306   1          if(AUX_SCAN_INDEX_HS==0xFF)
1307   1          {
1308   2              if(AUX_SCAN_INDEX==0x00)
1309   2              {
1310   3                  if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1311   3                  {
1312   4                       AUX_SCAN_INDEX_HS = 0x00;
1313   4                  }
1314   3              }
1315   2              else if(AUX_SCAN_INDEX==0x01)
1316   2              {
1317   3                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1318   3                  {
1319   4                      AUX_SCAN_INDEX_HS = 0x00;
1320   4                  }
1321   3              }
1322   2              else if(AUX_SCAN_INDEX==0x02)
1323   2              {
1324   3                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1325   3                  {
1326   4                       AUX_SCAN_INDEX_HS = 0x00;
1327   4                  }
1328   3              }
1329   2                  
1330   2              if(AUX_SCAN_INDEX_HS == 0x00)
1331   2              {
1332   3                  ScanAUXStepIndex = ScanAUXStep_Skip + AUX_SCAN_INDEX;
1333   3              }
1334   2              else
1335   2              {
1336   3                  AUX_SCAN_TIMEOUT_CUNT = 0x00;
1337   3                  if(IsFlag1(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_DISABLED))
1338   3                  {
1339   4                       ECSend2Port(AUX_SCAN_INDEX, 0xF5);              
1340   4                  }
1341   3                  else if(IsFlag1(AuxFlags2[AUX_SCAN_INDEX],DEVICE_NEED_ENABLED))
1342   3                  {
1343   4                       ECSend2Port(AUX_SCAN_INDEX, 0xF4);              
1344   4                  }
1345   3                  else
1346   3                  {
1347   4                      ECSend2Port(AUX_SCAN_INDEX, 0xF1);
1348   4                  }
1349   3                  ScanAUXStepIndex = ScanAUXStep_WaitPort + AUX_SCAN_INDEX;
1350   3              }
1351   2          }
1352   1      }
1353          
1354          //----------------------------------------------------------------------------
1355          // The function of enabling AUX device
1356          //----------------------------------------------------------------------------
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 23  

1357          void EnableAUXDevice(void)
1358          {
1359   1              if(AUXInactiveCounter!=0x00)
1360   1              {
1361   2                      AUXInactiveCounter--;
1362   2                      if(AUXInactiveCounter==0x00)
1363   2                      {
1364   3                              PS2Deviceactive();
1365   3                      }
1366   2              }
1367   1      }
1368          
1369          //----------------------------------------------------------------------------
1370          // The function of starting to check AUX device
1371          //----------------------------------------------------------------------------
1372          BYTE bExtAUXTimeOutCheck(BYTE channel)
1373          {
1374   1          BYTE result;
1375   1          result = 0x01;      // pre-set resutl is fail
1376   1          
1377   1          TR1 = 0;            // Disable timer 1
1378   1              ET1 = 0;                        // Disable timer1 interrupt
1379   1              TH1 = 0xA6;                     // set timer1 counter 30 ms 
1380   1              TL1 = 0x21;                     // set timer1 counter 30 ms
1381   1          TF1 = 0;                    // clear overflow flag
1382   1              TR1 = 1;                        // enable timer1
1383   1      
1384   1              do
1385   1              {                   // Wait PS2 transaction Done Status
1386   2              if(IsFlag1(*asPS2Struct[channel].ps2status, TDS))
1387   2              {
1388   3                  *asPS2Struct[channel].ps2ctrl=PS2_InhibitMode;
1389   3                  PS2IFAck=*asPS2Struct[channel].ps2data;
1390   3                  result = 0x00;
1391   3                  break;
1392   3              }
1393   2              }while(!TF1);                                   // waitting for overflow flag
1394   1      
1395   1          *asPS2Struct[channel].ps2ctrl=PS2_InhibitMode;
1396   1          TR1 = 0;                                // disable timer1
1397   1          TF1 = 0;                                            // clear overflow flag
1398   1          ET1 = 1;    
1399   1              return(result);
1400   1      }
1401          
1402          //----------------------------------------------------------------------------
1403          // The function of setting external keyboard device
1404          //----------------------------------------------------------------------------
1405          const BYTE code ConfigAUXKB[] = {0xF3, 0xED, 0xF4 };    // Command table
1406          
1407          void ConfigExtKeyboard(BYTE portnum)
1408          {   
1409   1              BYTE index;
1410   1      
1411   1          for(index=0x00; index<sizeof(ConfigAUXKB); index++) 
1412   1          {
1413   2              if(!Send2PortNWait(portnum,ConfigAUXKB[index],1))
1414   2              {
1415   3                  if(ConfigAUXKB[index]==0xF3)
1416   3                  {
1417   4                      Send2PortNWait(portnum,Save_Typematic,1);
1418   4                  }
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 24  

1419   3                  else if(ConfigAUXKB[index]==0xED)
1420   3                  {
1421   4                      Send2PortNWait(portnum,(Led_Data&0x07),1);
1422   4                  }
1423   3              }
1424   2          }
1425   1      }
1426          
1427          //----------------------------------------------------------------------------
1428          // The function of setting Resolution
1429          //  return : 1 OK, 0 fail
1430          //----------------------------------------------------------------------------
1431          BYTE EnableMouse(BYTE port)
1432          {
1433   1          BYTE resault;
1434   1          if(!Send2PortNWait(port,0xF4,1))
1435   1          {
1436   2              resault = 1;
1437   2          }
1438   1          else
1439   1          {
1440   2              resault = 0;
1441   2          }
1442   1          return(resault);
1443   1      }
1444          
1445          //----------------------------------------------------------------------------
1446          // The function of setting Resolution
1447          //  return : 1 OK, 0 fail
1448          //----------------------------------------------------------------------------
1449          BYTE SetResolution(BYTE port, BYTE resolution)
1450          {
1451   1          BYTE resault;
1452   1          if(!Send2PortNWait(port,0xE8,1))
1453   1          {
1454   2              if(!Send2PortNWait(port,resolution,1))
1455   2              {
1456   3                  resault = 1;
1457   3              }
1458   2              else
1459   2              {
1460   3                  resault = 0;
1461   3              }
1462   2          }
1463   1          else
1464   1          {
1465   2              resault = 0;
1466   2          }
1467   1          return(resault);
1468   1      }
1469          
1470          //----------------------------------------------------------------------------
1471          // The function of setting samplerate
1472          //  return : 1 OK, 0 fail
1473          //----------------------------------------------------------------------------
1474          BYTE Setsamplerate(BYTE port, BYTE samplerate)
1475          {
1476   1          BYTE resault;
1477   1          if(!Send2PortNWait(port,0xF3,1))
1478   1          {
1479   2              if(!Send2PortNWait(port,samplerate,1))
1480   2              {
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 25  

1481   3                  resault = 1;
1482   3              }
1483   2              else
1484   2              {
1485   3                  resault = 0;
1486   3              }
1487   2          }
1488   1          else
1489   1          {
1490   2              resault = 0;
1491   2          }
1492   1          return(resault);
1493   1      }
1494          
1495          //----------------------------------------------------------------------------
1496          // The Microsoft Intellimouse
1497          //----------------------------------------------------------------------------
1498          const BYTE code Intellimouse_5Byte[3] = 
1499          {       
1500              200,    200,    80
1501          };      
1502          
1503          const BYTE code Intellimouse_4Byte[3] = 
1504          {       
1505              200,    100,    80
1506          };
1507          
1508          BYTE vSetIntellimouse(BYTE DriverType, BYTE port)
1509          {
1510   1          BYTE index;
1511   1          BYTE result;
1512   1          result = 0x01;   // pr-set OK
1513   1          
1514   1          if(DriverType==3)
1515   1          {
1516   2              for(index=0x00;index<sizeof(Intellimouse_4Byte);index++)
1517   2              {
1518   3                  if(Setsamplerate(port, Intellimouse_4Byte[index])==0x00)
1519   3                  {
1520   4                      result = 0x00;
1521   4                      break;
1522   4                  }
1523   3              }
1524   2          }
1525   1          else if(DriverType==4)
1526   1          {
1527   2              for(index=0x00;index<sizeof(Intellimouse_5Byte);index++)
1528   2              {
1529   3                  if(Setsamplerate(port, Intellimouse_5Byte[index])==0x00)
1530   3                  {
1531   4                      result = 0x00;
1532   4                      break;
1533   4                  }
1534   3              }
1535   2          }
1536   1          return(result);
1537   1      }
1538          
1539          BYTE ReadMouseID(BYTE port)
1540          {
1541   1          if(Send2PortNWait(port,0xF2,2)==0x00)
1542   1          {
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 26  

1543   2              return(PS2IFAck);
1544   2          }
1545   1          return(0xFF);
1546   1      }
1547          
1548          //----------------------------------------------------------------------------
1549          // The function of setting external mouse device
1550          //----------------------------------------------------------------------------
1551          BYTE ConfigExtMouse(BYTE portnum)
1552          {  
1553   1          BYTE result;
1554   1          result = 0x00;
1555   1          
1556   1          if(SetResolution(portnum,TPResolution))
1557   1          {
1558   2              if(EnableMouse(portnum))
1559   2              {
1560   3                  result = 0x01;
1561   3              }
1562   2          }
1563   1          return(result);
1564   1      }
1565          
1566          //----------------------------------------------------------------------------
1567          // The function of checking AUX Multiplexed modes
1568          //----------------------------------------------------------------------------
1569          BYTE vCheckAuxMux(void)
1570          {
1571   1              BYTE current,data_byte,index;
1572   1              current = 1;
1573   1          data_byte = KBHIData;           // For Dos mouse
1574   1              if (KBHIData == 0xF0)                   // Data from Host is F0h 
1575   1              {  
1576   2              MULPX_Mx_state2 = 1;
1577   2              MULPX_Mx_state3 = 0;
1578   2              current = 0;                            // Do NOT clear State2 and State3 
1579   2              data_byte = 0xF0;
1580   2              }
1581   1              else if (KBHIData == 0x56)              // Data from Host is 56h
1582   1              { 
1583   2              if (MULPX_Mx_state2)            // Current is State2
1584   2                      { 
1585   3                      MULPX_Mx_state2 = 0;
1586   3                      MULPX_Mx_state3 = 1;
1587   3                      current = 0;
1588   3                              data_byte = 0x56;
1589   3              }
1590   2              }
1591   1              else if (KBHIData == 0xA4)              // Data from Host is A4h 
1592   1              {  
1593   2                      if (MULPX_Mx_state3)            // Current is State3 
1594   2                      {  
1595   3                      MULPX_Multiplex = 1;    // Enable Activate Multiplex mode 
1596   3                      SKIP_AUX_SCAN_CUNT = 250;
1597   3                      data_byte = 0x11;               // Return Version number 
1598   3              }
1599   2              }
1600   1              else if (KBHIData == 0xA5)              // Data from Host is A5h. 
1601   1              {   
1602   2                      if (MULPX_Mx_state3)            // Current is State3
1603   2                      {  
1604   3                      MULPX_Multiplex = 0;    // Reveret to Legacy Mode 
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 27  

1605   3                      data_byte = 0x11;       // Return version number 
1606   3              }
1607   2              } 
1608   1      
1609   1              if (current) 
1610   1              {
1611   2              MULPX_Mx_state2 = 0;            // Clear State2 and State3 
1612   2                      MULPX_Mx_state3 = 0;
1613   2              }
1614   1              return(data_byte);
1615   1      }
1616          
1617          // ----------------------------------------------------------------------------
1618          // The function of disable ps2 channel x
1619          // Input :  portnum --> ps2 channel
1620          //          active  --> 1 : On, 0 : Off
1621          //
1622          //  Note : If want to enable mouse device. Please ensrue "MouseDriverIn" is set.
1623          // ----------------------------------------------------------------------------
1624          void OnOffPS2Channel_X(BYTE portnum, BYTE active)
1625          {
1626   1          if(portnum==0x00)
1627   1          {
1628   2              if((PS2_Port0_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port0_Data_CtrlReg&0xFB)!=0x00)
1629   2              {
1630   3                  return;// If this channel isn't PS2 ALT function. return;  
1631   3              }                  
1632   2          }
1633   1          else if(portnum==0x01)
1634   1          {
1635   2                  if((PS2_Port1_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port1_Data_CtrlReg&0xFB)!=0x00)
1636   2              {
1637   3                  return;// If this channel isn't PS2 ALT function. return;  
1638   3              }    
1639   2          }
1640   1          else if(portnum==0x02)
1641   1          {
1642   2                  if((PS2_Port2_CLK_CtrlReg&0xFB)!=0x00 || (PS2_Port2_Data_CtrlReg&0xFB)!=0x00)
1643   2              {
1644   3                  return;// If this channel isn't PS2 ALT function. return;  
1645   3              }     
1646   2          }
1647   1      
1648   1          if(active == 0x00)
1649   1          {
1650   2              SetFlag(AuxFlags2[portnum], DEVICE_NEED_DISABLED);
1651   2          }
1652   1          else if(active == 0x01)
1653   1          {
1654   2              SetFlag(AuxFlags2[portnum], DEVICE_NEED_ENABLED);
1655   2          }
1656   1          PS2_ReTryCunt = 0x00;
1657   1      }
1658          
1659          // ----------------------------------------------------------------------------
1660          // 
1661          // ----------------------------------------------------------------------------
1662          void ISR_Aux_Port1(void)
1663          {
1664   1          CLEAR_BIT(IER2,4);          // Disable PS2 interrupt 0
1665   1          SET_BIT(ISR2,4);            // Write to clear pending interrupt
1666   1          WNCKR = 0x00;               // Delay 15.26 us
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 28  

1667   1          WNCKR = 0x00;               // Delay 15.26 us
1668   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
1669   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
1670   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
1671   1      
1672   1          PS2_IRQ_Channel = 0;    // Set PS2 0 service flag
1673   1          F_Service_PS2_IRQ = 1;  // Set main service flag
1674   1          PS2StartBit=0;          // clear start bit flag
1675   1          PS2PortxData[0]=PSDAT1;
1676   1      }
1677          
1678          // ----------------------------------------------------------------------------
1679          // 
1680          // ----------------------------------------------------------------------------
1681          void ISR_Aux_Port2(void)
1682          {
1683   1          CLEAR_BIT(IER2,3);      // Disable PS2 interrupt 1
1684   1          SET_BIT(ISR2,3);        // Write to clear pending interrupt
1685   1          WNCKR = 0x00;               // Delay 15.26 us
1686   1          WNCKR = 0x00;               // Delay 15.26 us
1687   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
1688   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
1689   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
1690   1      
1691   1          PS2_IRQ_Channel = 1;    // Set PS2 1 service flag
1692   1          F_Service_PS2_IRQ = 1;  // Set main service flag
1693   1          PS2StartBit=0;          // clear start bit flag     
1694   1          PS2PortxData[1]=PSDAT2;
1695   1      }
1696          
1697          // ----------------------------------------------------------------------------
1698          // 
1699          // ----------------------------------------------------------------------------
1700          void ISR_Aux_Port3(void)
1701          {
1702   1          CLEAR_BIT(IER2,2);      // Disable PS2 interrupt 2
1703   1          SET_BIT(ISR2,2);        // Write to clear pending interrupt
1704   1          WNCKR = 0x00;               // Delay 15.26 us
1705   1          WNCKR = 0x00;               // Delay 15.26 us
1706   1          PSCTL1 = PS2_InhibitMode;   // Inhibit clock pin1
1707   1          PSCTL2 = PS2_InhibitMode;   // Inhibit clock pin2
1708   1          PSCTL3 = PS2_InhibitMode;   // Inhibit clock pin3
1709   1      
1710   1          PS2_IRQ_Channel = 2;    // Set PS2 2 service flag    
1711   1          F_Service_PS2_IRQ = 1;  // Set main service flag
1712   1          PS2StartBit=0;          // clear start bit flag
1713   1          PS2PortxData[2]=PSDAT3;             
1714   1      } 
1715          
1716          // ----------------------------------------------------------------------------
1717          // 
1718          // ----------------------------------------------------------------------------
1719          void KBCmdAckByteCunt(BYTE ackcunt)
1720          {
1721   1          Main_KB_ACK_CUNT = ackcunt;
1722   1      }
1723          
1724          // ----------------------------------------------------------------------------
1725          // 
1726          // ----------------------------------------------------------------------------
1727          void SetOtherKBNeedUpdataFlag(BYTE KBCmd)
1728          {
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 29  

1729   1          BYTE index;
1730   1          
1731   1          for(index=0x00;index<3;index++)
1732   1          {
1733   2              if(IsFlag1(AuxFlags[index], DEVICE_IS_KEYBOARD))
1734   2              {
1735   3                  if(Main_KB_CHN != (index+1))
1736   3                  {
1737   4                      if(IsFlag0(AuxFlags[index], DEVICE_NEED_CONFIG))
1738   4                      {
1739   5                          if(KBCmd==0xED)
1740   5                          {
1741   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xED;
1742   6                          }
1743   5                          else if(KBCmd==0xF3)
1744   5                          {
1745   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF3;
1746   6                          }
1747   5                          else if(KBCmd==0xF4)
1748   5                          {
1749   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF4;
1750   6                          }
1751   5                          else if(KBCmd==0xF5)
1752   5                          {
1753   6                              AuxFlags_KB_CMD[index] |= KB_CMD_0xF5;
1754   6                          }      
1755   5                      }
1756   4                  }
1757   3              }
1758   2          } 
1759   1      }
1760          
1761          // ----------------------------------------------------------------------------
1762          // 
1763          // ----------------------------------------------------------------------------
1764          void SetStartScanAUXFlag(void)
1765          {
1766   1          StartScanAUXDevice = 1;
1767   1          StartENAUXDevice = 1;
1768   1      }
1769          
1770          // ----------------------------------------------------------------------------
1771          // 
1772          // ----------------------------------------------------------------------------
1773          void AUXData_To_Host_nWait(BYTE data_byte, BYTE portnum)
1774          {
1775   1          AUXPortNum = portnum;
1776   1          SendFromAux(data_byte);
1777   1      
1778   1          TR1 = 0;                    // Disable timer1
1779   1          ET1 = 0;                    // Disable timer1 interrupt
1780   1          TH1 = (0xFFFF-19942)>>8;    // Set timer1 counter 26ms
1781   1          TL1 = (0xFFFF-19942);       // Set timer1 counter 26ms
1782   1          TF1 = 0;                    // Clear overflow flag
1783   1          TR1 = 1;                    // Enable timer1
1784   1      
1785   1              while (!TF1)
1786   1              { 
1787   2                  if(IsFlag0(KBHISR, OBF))
1788   2              {
1789   3                  break;
1790   3              }   
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 30  

1791   2              if(IsFlag1(KBHISR, IBF))
1792   2              {
1793   3                  break;
1794   3              }  
1795   2              }
1796   1      }
1797          
1798          // ----------------------------------------------------------------------------
1799          // 
1800          // ----------------------------------------------------------------------------
1801          void ReSendPS2PendingData(void)
1802          {
1803   1          if(MSPendingRXCount==0x33)
1804   1          {
1805   2              F_Service_Send_PS2 = 1;
1806   2          }
1807   1      }
1808          
1809          // ----------------------------------------------------------------------------
1810          // 
1811          // ----------------------------------------------------------------------------
1812          void CheckNSetMainKBCHN(BYTE PortNum)
1813          {
1814   1          if(Main_KB_CHN == 0x00)
1815   1          {
1816   2              SetFlag(AuxFlags[PortNum], DEVICE_IS_MAIN_KB);
1817   2              Main_KB_CHN = PortNum+1;
1818   2          }
1819   1      }
1820          
1821          // ----------------------------------------------------------------------------
1822          // 
1823          // ----------------------------------------------------------------------------
1824          void CheckNSetMainMSCHN(BYTE PortNum)
1825          {
1826   1          if(Main_MOUSE_CHN == 0x00)
1827   1          {
1828   2              SetFlag(AuxFlags[PortNum], DEVICE_IS_MAIN_MOUSE);
1829   2              Main_MOUSE_CHN = PortNum+1;
1830   2          }
1831   1      }
1832          
1833          // ----------------------------------------------------------------------------
1834          // 
1835          // ----------------------------------------------------------------------------
1836          void ResetMSPendingData(void)
1837          {
1838   1          MSPendingRXCount = 0x88;
1839   1          F_Service_Send_PS2 = 0;
1840   1      }
1841          
1842          // ----------------------------------------------------------------------------
1843          // The function of checking ps2 port busy
1844          //  Return : 1: The port is busy
1845          //           0: no busy   
1846          // ----------------------------------------------------------------------------
1847          BYTE CheckMousePS2IFBusy(BYTE PortNum)
1848          {
1849   1          BYTE result,auxstatus;
1850   1      
1851   1          auxstatus = *asPS2Struct[PortNum].ps2status;
1852   1          if(IsFlag1(auxstatus,TDS)||
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 31  

1853   1              IsFlag1(auxstatus,SS)||
1854   1              ((F_Service_PS2_IRQ == 1)&&(PS2_IRQ_Channel == PortNum))||
1855   1              ((PS2StartBit == 1)&&(PS2_SSIRQ_Channel == PortNum)))
1856   1          {
1857   2              result = 0x01;
1858   2          }
1859   1          else
1860   1          {
1861   2              *asPS2Struct[PortNum].ps2ctrl = PS2_InhibitMode;
1862   2              result = 0x00;
1863   2          }
1864   1      
1865   1          return(result);
1866   1      }
1867          
1868          
1869          // ----------------------------------------------------------------------------
1870          //
1871          // ----------------------------------------------------------------------------
1872          void KBCmdCheckMouseBusy(BYTE KBCmd)
1873          {
1874   1          BYTE index;
1875   1          
1876   1          if(MouseDriverIn)
1877   1          {
1878   2              for(index=0x00;index<3;index++)
1879   2              {
1880   3                  if(index == (Main_KB_CHN-1))
1881   3                  {
1882   4                      continue;
1883   4                  }
1884   3                  
1885   3                  if(IsFlag1(AuxFlags[index], DEVICE_IS_MOUSE))
1886   3                  {
1887   4                      if(CheckMousePS2IFBusy(index)==1)
1888   4                      {
1889   5                          if(ECSendtoAUXFlag==0)
1890   5                          {
1891   6                              AUXInterfaceBusy = 1;
1892   6                              PS2_KBCmd_BK = KBCmd;
1893   6                          }
1894   5                          break;
1895   5                      }
1896   4                              
1897   4                      if(MSPendingRXCount==0x33)
1898   4                      {
1899   5                          AUXInterfaceBusy = 1;
1900   5                          PS2_KBCmd_BK = KBCmd;
1901   5                          break;
1902   5                      }
1903   4                  }
1904   3              }
1905   2          }
1906   1      }
1907          
1908          //----------------------------------------------------------------------------
1909          // PS2 interface enable/disable OEM function call
1910          //----------------------------------------------------------------------------
1911          // ----------------------------------------------------------------------------
1912          // Disable port 0 ( send 0xF5 command to device)
1913          // ----------------------------------------------------------------------------
1914          void DisablePS2Port_0(void)
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 32  

1915          {
1916   1          OnOffPS2Channel_X(0,0);
1917   1      }
1918          
1919          // ----------------------------------------------------------------------------
1920          // Disable port 1 ( send 0xF5 command to device)
1921          // ----------------------------------------------------------------------------
1922          void DisablePS2Port_1(void)
1923          {
1924   1          OnOffPS2Channel_X(1,0);
1925   1      }
1926          
1927          // ----------------------------------------------------------------------------
1928          // Disable port 2 ( send 0xF5 command to device) 
1929          // ----------------------------------------------------------------------------
1930          void DisablePS2Port_2(void)
1931          {
1932   1          OnOffPS2Channel_X(2,0);
1933   1      }
1934          
1935          // ----------------------------------------------------------------------------
1936          // Enable port 0 ( send 0xF4 command to device) 
1937          // ----------------------------------------------------------------------------
1938          void EnablePS2Port_0(void)
1939          {
1940   1          OnOffPS2Channel_X(0,1);
1941   1      }
1942          
1943          // ----------------------------------------------------------------------------
1944          // Enable port 1 ( send 0xF4 command to device)  
1945          // ----------------------------------------------------------------------------
1946          void EnablePS2Port_1(void)
1947          {
1948   1          OnOffPS2Channel_X(1,1);
1949   1      }
1950          
1951          // ----------------------------------------------------------------------------
1952          // Enable port 2 ( send 0xF4 command to device)  
1953          // ----------------------------------------------------------------------------
1954          void EnablePS2Port_2(void)
1955          {
1956   1          OnOffPS2Channel_X(2,1);
1957   1      }
1958          
1959          // ----------------------------------------------------------------------------
1960          // Power off clock and data pins of all supported channel
1961          // ----------------------------------------------------------------------------
1962          void PS2_PowerOff(void)
1963          {
1964   1          BYTE index;
1965   1          ResetMSPendingData();
1966   1          ClaerPS2IFPendingEvent();
1967   1      
1968   1          AUX_SCAN_TIMEOUT_CUNT = 0x00;
1969   1          AUX_SCAN_INDEX_HS = 0x00;
1970   1          PS2_ReTryCunt = 0x00;
1971   1          SendtoAUXFlag = 0;  
1972   1          ECSendtoAUXFlag = 0;
1973   1          AUXInactiveCounter = 0;
1974   1          StartScanAUXDevice = 0;
1975   1          StartENAUXDevice = 0;
1976   1          AUXInterfaceBusy = 0;
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 33  

1977   1      
1978   1          for(index=0x00;index<3;index++)
1979   1          {
1980   2              AuxFlags[index] = 0x00;
1981   2              AuxFlags2[index] = 0x00;
1982   2          }
1983   1          
1984   1          if((PS2_Port0_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port0_Data_CtrlReg&0xFB)==0x00)
1985   1          {
1986   2              PS2_Port0_CLK_CtrlReg = OUTPUT+PULL_DN;
1987   2              PS2_Port0_Data_CtrlReg = OUTPUT+PULL_DN;
1988   2              SetFlag(AuxFlags2[0], DEVICE_POWER_DOWN);
1989   2          }
1990   1                 
1991   1          if((PS2_Port1_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port1_Data_CtrlReg&0xFB)==0x00)
1992   1          {
1993   2              PS2_Port1_CLK_CtrlReg = OUTPUT+PULL_DN;
1994   2              PS2_Port1_Data_CtrlReg = OUTPUT+PULL_DN;
1995   2              SetFlag(AuxFlags2[1], DEVICE_POWER_DOWN);
1996   2          }
1997   1          
1998   1          if((PS2_Port2_CLK_CtrlReg&0xFB)==0x00 && (PS2_Port2_Data_CtrlReg&0xFB)==0x00)
1999   1          {
2000   2              PS2_Port2_CLK_CtrlReg = OUTPUT+PULL_DN;
2001   2              PS2_Port2_Data_CtrlReg = OUTPUT+PULL_DN;
2002   2              SetFlag(AuxFlags2[2], DEVICE_POWER_DOWN);
2003   2          }
2004   1      }
2005          
2006          // ----------------------------------------------------------------------------
2007          // Power on clock and data pins of all supported channel
2008          // ----------------------------------------------------------------------------
2009          void PS2_PowerOn(void)
2010          {
2011   1          vPS2DeviceInactive();
2012   1          if(IsFlag1(AuxFlags2[0], DEVICE_POWER_DOWN))
2013   1          {
2014   2              ClearFlag(AuxFlags2[0], DEVICE_POWER_DOWN);
2015   2              PS2_Port0_CLK_CtrlReg = PALT;
2016   2              PS2_Port0_Data_CtrlReg = PALT;
2017   2          }
2018   1          
2019   1          if(IsFlag1(AuxFlags2[1], DEVICE_POWER_DOWN))
2020   1          {
2021   2              ClearFlag(AuxFlags2[1], DEVICE_POWER_DOWN);
2022   2              PS2_Port1_CLK_CtrlReg = PALT;
2023   2              PS2_Port1_Data_CtrlReg = PALT;
2024   2          }
2025   1      
2026   1          if(IsFlag1(AuxFlags2[2], DEVICE_POWER_DOWN))
2027   1          {
2028   2              ClearFlag(AuxFlags2[2], DEVICE_POWER_DOWN);
2029   2              PS2_Port2_CLK_CtrlReg = PALT;
2030   2              PS2_Port2_Data_CtrlReg = PALT;
2031   2          }    
2032   1      }
2033          
2034          /*-----------------------------------------------------------------------------
2035           * End
2036           *---------------------------------------------------------------------------*/
2037          
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 34  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _SendFromAux (BEGIN)
                                           ; SOURCE LINE # 24
;---- Variable 'auxdata' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 901304            MOV     DPTR,#01304H
0003 E0                MOVX    A,@DPTR
0004 540F              ANL     A,#0FH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
0007 30002B      E     JNB     MULPX_Multiplex,?C0001
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
000A 7800        E     MOV     R0,#LOW AUXPortNum
000C E6                MOV     A,@R0
000D 7005              JNZ     ?C0002
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
000F 7440              MOV     A,#040H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
0012 801A              SJMP    ?C0003
0014         ?C0002:
                                           ; SOURCE LINE # 34
0014 7800        E     MOV     R0,#LOW AUXPortNum
0016 E6                MOV     A,@R0
0017 B40108            CJNE    A,#01H,?C0004
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
001A 901304            MOV     DPTR,#01304H
001D 7480              MOV     A,#080H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0020 800C              SJMP    ?C0003
0022         ?C0004:
                                           ; SOURCE LINE # 38
0022 7800        E     MOV     R0,#LOW AUXPortNum
0024 E6                MOV     A,@R0
0025 B40206            CJNE    A,#02H,?C0003
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0028 901304            MOV     DPTR,#01304H
002B 74C0              MOV     A,#0C0H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 41
002E         ?C0003:
                                           ; SOURCE LINE # 42
002E 901304            MOV     DPTR,#01304H
0031 E0                MOVX    A,@DPTR
0032 54FB              ANL     A,#0FBH
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 43
0035         ?C0001:
                                           ; SOURCE LINE # 45
0035 901304            MOV     DPTR,#01304H
0038 E0                MOVX    A,@DPTR
0039 4420              ORL     A,#020H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 46
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 35  

003C 901300            MOV     DPTR,#01300H
003F E0                MOVX    A,@DPTR
0040 300005      E     JNB     Ccb42_INTR_AUX,?C0007
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
0043 4402              ORL     A,#02H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
0046 8003              SJMP    ?C0009
0048         ?C0007:
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
0048 54FD              ANL     A,#0FDH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 62
004B         ?C0009:
                                           ; SOURCE LINE # 63
004B 901308            MOV     DPTR,#01308H
004E EF                MOV     A,R7
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
0050 22                RET     
             ; FUNCTION _SendFromAux (END)

             ; FUNCTION _SetPS2InhibitTime (BEGIN)
                                           ; SOURCE LINE # 84
;---- Variable 'time' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 86
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 C3                CLR     C
0004 9464              SUBB    A,#064H
0006 5002              JNC     ?C0012
                                           ; SOURCE LINE # 87
                                           ; SOURCE LINE # 88
0008 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
000A         ?C0012:
000A 22                RET     
             ; FUNCTION _SetPS2InhibitTime (END)

             ; FUNCTION _ProcessMouseData (BEGIN)
                                           ; SOURCE LINE # 95
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 116
0005 7800        E     MOV     R0,#LOW MS_ID_CUNT
0007 E6                MOV     A,@R0
0008 6028              JZ      ?C0013
                                           ; SOURCE LINE # 117
                                           ; SOURCE LINE # 118
000A 16                DEC     @R0
000B E6                MOV     A,@R0
000C 7024              JNZ     ?C0013
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 36  

                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 2400        E     ADD     A,#LOW PS2PortxData
0012 F8                MOV     R0,A
0013 E6                MOV     A,@R0
0014 6011              JZ      ?C0016
0016 7400        E     MOV     A,#LOW PS2PortxData
0018 2F                ADD     A,R7
0019 F8                MOV     R0,A
001A E6                MOV     A,@R0
001B 6403              XRL     A,#03H
001D 6008              JZ      ?C0016
001F E0                MOVX    A,@DPTR
0020 2400        E     ADD     A,#LOW PS2PortxData
0022 F8                MOV     R0,A
0023 E6                MOV     A,@R0
0024 B4040B            CJNE    A,#04H,?C0013
0027         ?C0016:
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0027 900000      R     MOV     DPTR,#channel
002A E0                MOVX    A,@DPTR
002B 2400        E     ADD     A,#LOW PS2PortxData
002D F8                MOV     R0,A
002E E6                MOV     A,@R0
002F 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0031 F6                MOV     @R0,A
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0032         ?C0013:
                                           ; SOURCE LINE # 129
0032 901304            MOV     DPTR,#01304H
0035 E0                MOVX    A,@DPTR
0036 20E007            JB      ACC.0,?C0018
0039 E0                MOVX    A,@DPTR
003A 20E103            JB      ACC.1,?C0018
003D 300017      E     JNB     Ccb42_DISAB_AUX,?C0017
0040         ?C0018:
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
0040 900000      R     MOV     DPTR,#channel
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 7800        E     MOV     R0,#LOW AUXPortNum
0047 F6                MOV     @R0,A
                                           ; SOURCE LINE # 132
0048 7400        E     MOV     A,#LOW PS2PortxData
004A 2F                ADD     A,R7
004B F8                MOV     R0,A
004C E6                MOV     A,@R0
004D 7800        E     MOV     R0,#LOW MousePendingBuf
004F F6                MOV     @R0,A
                                           ; SOURCE LINE # 133
0050 900000      E     MOV     DPTR,#MSPendingRXCount
0053 7433              MOV     A,#033H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
0056 22                RET     
0057         ?C0017:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 37  

                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0057 900000      R     MOV     DPTR,#channel
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 7800        E     MOV     R0,#LOW AUXPortNum
005E F6                MOV     @R0,A
                                           ; SOURCE LINE # 138
005F 7400        E     MOV     A,#LOW PS2PortxData
0061 2F                ADD     A,R7
0062 F8                MOV     R0,A
0063 E6                MOV     A,@R0
0064 FF                MOV     R7,A
0065 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 139
0068 7800        E     MOV     R0,#LOW TPACKCounter
006A E6                MOV     A,@R0
006B 6001              JZ      ?C0020
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
006D 16                DEC     @R0
                                           ; SOURCE LINE # 142
006E         ?C0020:
                                           ; SOURCE LINE # 144
006E 300013      E     JNB     AUXInterfaceBusy,?C0021
                                           ; SOURCE LINE # 145
                                           ; SOURCE LINE # 146
0071 C200        E     CLR     AUXInterfaceBusy
                                           ; SOURCE LINE # 147
0073 7800        E     MOV     R0,#LOW Main_KB_CHN
0075 E6                MOV     A,@R0
0076 14                DEC     A
0077 FF                MOV     R7,A
0078 7800        E     MOV     R0,#LOW PS2_KBCmd_BK
007A E6                MOV     A,@R0
007B FD                MOV     R5,A
007C 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 148
007F 7F0A              MOV     R7,#0AH
                                           ; SOURCE LINE # 149
0081 020000      R     LJMP    ?C0492
0084         ?C0021:
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0084 300003      E     JNB     MULPX_Multiplex,?C0023
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0087 020000      R     LJMP    PS2Deviceactive
                                           ; SOURCE LINE # 155
008A         ?C0023:
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
;---- Variable 'index' assigned to Register 'R7' ----
008A E4                CLR     A
008B FF                MOV     R7,A
008C         ?C0025:
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
008C 7400        E     MOV     A,#LOW AuxFlags
008E 2F                ADD     A,R7
008F F8                MOV     R0,A
0090 E6                MOV     A,@R0
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 38  

0091 30E65B            JNB     ACC.6,?C0027
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 162
0094 EF                MOV     A,R7
0095 75F00D            MOV     B,#0DH
0098 A4                MUL     AB
0099 2400        R     ADD     A,#LOW asPS2Struct
009B F582              MOV     DPL,A
009D E4                CLR     A
009E 3400        R     ADDC    A,#HIGH asPS2Struct
00A0 F583              MOV     DPH,A
00A2 E4                CLR     A
00A3 93                MOVC    A,@A+DPTR
00A4 FC                MOV     R4,A
00A5 7401              MOV     A,#01H
00A7 93                MOVC    A,@A+DPTR
00A8 F582              MOV     DPL,A
00AA 8C83              MOV     DPH,R4
00AC 7417              MOV     A,#017H
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 163
00AF EF                MOV     A,R7
00B0 75F00D            MOV     B,#0DH
00B3 A4                MUL     AB
00B4 2400        R     ADD     A,#LOW asPS2Struct+08H
00B6 F582              MOV     DPL,A
00B8 E4                CLR     A
00B9 3400        R     ADDC    A,#HIGH asPS2Struct+08H
00BB F583              MOV     DPH,A
00BD E4                CLR     A
00BE 93                MOVC    A,@A+DPTR
00BF FC                MOV     R4,A
00C0 7401              MOV     A,#01H
00C2 93                MOVC    A,@A+DPTR
00C3 F582              MOV     DPL,A
00C5 8C83              MOV     DPH,R4
00C7 C083              PUSH    DPH
00C9 C082              PUSH    DPL
00CB E0                MOVX    A,@DPTR
00CC FE                MOV     R6,A
00CD EF                MOV     A,R7
00CE 75F00D            MOV     B,#0DH
00D1 A4                MUL     AB
00D2 2400        R     ADD     A,#LOW asPS2Struct+0CH
00D4 F582              MOV     DPL,A
00D6 E4                CLR     A
00D7 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
00D9 F583              MOV     DPH,A
00DB E4                CLR     A
00DC 93                MOVC    A,@A+DPTR
00DD FD                MOV     R5,A
00DE 7401              MOV     A,#01H
00E0 A805              MOV     R0,AR5
00E2 08                INC     R0
00E3 8002              SJMP    ?C0470
00E5         ?C0469:
00E5 C3                CLR     C
00E6 33                RLC     A
00E7         ?C0470:
00E7 D8FC              DJNZ    R0,?C0469
00E9 4E                ORL     A,R6
00EA D082              POP     DPL
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 39  

00EC D083              POP     DPH
00EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
00EF         ?C0027:
00EF 0F                INC     R7
00F0 EF                MOV     A,R7
00F1 B40398            CJNE    A,#03H,?C0025
00F4         ?C0026:
                                           ; SOURCE LINE # 166
00F4 E4                CLR     A
00F5 FF                MOV     R7,A
00F6         ?C0029:
                                           ; SOURCE LINE # 167
                                           ; SOURCE LINE # 168
00F6 900000      R     MOV     DPTR,#channel
00F9 E0                MOVX    A,@DPTR
00FA FE                MOV     R6,A
00FB 6F                XRL     A,R7
00FC 705C              JNZ     ?C0031
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
00FE E0                MOVX    A,@DPTR
00FF FD                MOV     R5,A
0100 75F00D            MOV     B,#0DH
0103 A4                MUL     AB
0104 2400        R     ADD     A,#LOW asPS2Struct
0106 F582              MOV     DPL,A
0108 E4                CLR     A
0109 3400        R     ADDC    A,#HIGH asPS2Struct
010B F583              MOV     DPH,A
010D E4                CLR     A
010E 93                MOVC    A,@A+DPTR
010F FA                MOV     R2,A
0110 7401              MOV     A,#01H
0112 93                MOVC    A,@A+DPTR
0113 F582              MOV     DPL,A
0115 8A83              MOV     DPH,R2
0117 7417              MOV     A,#017H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
011A ED                MOV     A,R5
011B 75F00D            MOV     B,#0DH
011E A4                MUL     AB
011F 2400        R     ADD     A,#LOW asPS2Struct+08H
0121 F582              MOV     DPL,A
0123 E4                CLR     A
0124 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0126 F583              MOV     DPH,A
0128 E4                CLR     A
0129 93                MOVC    A,@A+DPTR
012A FC                MOV     R4,A
012B 7401              MOV     A,#01H
012D 93                MOVC    A,@A+DPTR
012E F582              MOV     DPL,A
0130 8C83              MOV     DPH,R4
0132 C083              PUSH    DPH
0134 C082              PUSH    DPL
0136 E0                MOVX    A,@DPTR
0137 FD                MOV     R5,A
0138 EE                MOV     A,R6
0139 75F00D            MOV     B,#0DH
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 40  

013C A4                MUL     AB
013D 2400        R     ADD     A,#LOW asPS2Struct+0CH
013F F582              MOV     DPL,A
0141 E4                CLR     A
0142 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
0144 F583              MOV     DPH,A
0146 E4                CLR     A
0147 93                MOVC    A,@A+DPTR
0148 FE                MOV     R6,A
0149 7401              MOV     A,#01H
014B A806              MOV     R0,AR6
014D 08                INC     R0
014E 8002              SJMP    ?C0472
0150         ?C0471:
0150 C3                CLR     C
0151 33                RLC     A
0152         ?C0472:
0152 D8FC              DJNZ    R0,?C0471
0154 4D                ORL     A,R5
0155 D082              POP     DPL
0157 D083              POP     DPH
0159 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
015A         ?C0031:
015A 0F                INC     R7
015B EF                MOV     A,R7
015C B40397            CJNE    A,#03H,?C0029
015F         ?C0030:
                                           ; SOURCE LINE # 174
015F 7F06              MOV     R7,#06H
0161         ?C0492:
0161 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
                                           ; SOURCE LINE # 178
0164         ?C0033:
0164 22                RET     
             ; FUNCTION _ProcessMouseData (END)

             ; FUNCTION _ProcessKeyboardData (BEGIN)
                                           ; SOURCE LINE # 183
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 186
0005 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0007 E6                MOV     A,@R0
0008 6017              JZ      ?C0034
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
000A 16                DEC     @R0
                                           ; SOURCE LINE # 189
000B E6                MOV     A,@R0
000C 7003              JNZ     ?C0035
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
000E 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0010 F6                MOV     @R0,A
                                           ; SOURCE LINE # 192
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 41  

0011         ?C0035:
                                           ; SOURCE LINE # 194
0011 900000      R     MOV     DPTR,#channel
0014 E0                MOVX    A,@DPTR
0015 2400        E     ADD     A,#LOW PS2PortxData
0017 F8                MOV     R0,A
0018 E6                MOV     A,@R0
0019 FF                MOV     R7,A
001A 120000      E     LCALL   _KBC_DataPending
                                           ; SOURCE LINE # 195
001D D200        E     SETB    F_Service_SEND
                                           ; SOURCE LINE # 196
001F 800E              SJMP    ?C0036
0021         ?C0034:
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
0021 900000      R     MOV     DPTR,#channel
0024 E0                MOVX    A,@DPTR
0025 2400        E     ADD     A,#LOW PS2PortxData
0027 F8                MOV     R0,A
0028 E6                MOV     A,@R0
0029 FF                MOV     R7,A
002A 120000      E     LCALL   _Buffer_Key
                                           ; SOURCE LINE # 200
002D D200        E     SETB    F_Service_SEND
                                           ; SOURCE LINE # 201
002F         ?C0036:
                                           ; SOURCE LINE # 203
002F 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0031 E6                MOV     A,@R0
0032 7003              JNZ     ?C0037
                                           ; SOURCE LINE # 204
                                           ; SOURCE LINE # 205
0034 020000      R     LJMP    PS2Deviceactive
                                           ; SOURCE LINE # 206
0037         ?C0037:
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 209
0037 900000      R     MOV     DPTR,#channel
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 75F00D            MOV     B,#0DH
003F A4                MUL     AB
0040 2400        R     ADD     A,#LOW asPS2Struct
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        R     ADDC    A,#HIGH asPS2Struct
0047 F583              MOV     DPH,A
0049 E4                CLR     A
004A 93                MOVC    A,@A+DPTR
004B FC                MOV     R4,A
004C 7401              MOV     A,#01H
004E 93                MOVC    A,@A+DPTR
004F F582              MOV     DPL,A
0051 8C83              MOV     DPH,R4
0053 7417              MOV     A,#017H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0056 EF                MOV     A,R7
0057 75F00D            MOV     B,#0DH
005A A4                MUL     AB
005B 2400        R     ADD     A,#LOW asPS2Struct+08H
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 42  

005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0062 F583              MOV     DPH,A
0064 E4                CLR     A
0065 93                MOVC    A,@A+DPTR
0066 FE                MOV     R6,A
0067 7401              MOV     A,#01H
0069 93                MOVC    A,@A+DPTR
006A F582              MOV     DPL,A
006C 8E83              MOV     DPH,R6
006E C083              PUSH    DPH
0070 C082              PUSH    DPL
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      R     MOV     DPTR,#channel
0077 E0                MOVX    A,@DPTR
0078 75F00D            MOV     B,#0DH
007B A4                MUL     AB
007C 2400        R     ADD     A,#LOW asPS2Struct+0CH
007E F582              MOV     DPL,A
0080 E4                CLR     A
0081 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
0083 F583              MOV     DPH,A
0085 E4                CLR     A
0086 93                MOVC    A,@A+DPTR
0087 FE                MOV     R6,A
0088 7401              MOV     A,#01H
008A A806              MOV     R0,AR6
008C 08                INC     R0
008D 8002              SJMP    ?C0474
008F         ?C0473:
008F C3                CLR     C
0090 33                RLC     A
0091         ?C0474:
0091 D8FC              DJNZ    R0,?C0473
0093 4F                ORL     A,R7
0094 D082              POP     DPL
0096 D083              POP     DPH
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0099 7F06              MOV     R7,#06H
009B 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
009E         ?C0039:
009E 22                RET     
             ; FUNCTION _ProcessKeyboardData (END)

             ; FUNCTION _ProcessECTestAUXACK (BEGIN)
                                           ; SOURCE LINE # 215
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0000 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 218
0002 E4                CLR     A
0003 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 219
0006 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0008 F6                MOV     @R0,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 43  

                                           ; SOURCE LINE # 220
0009 EF                MOV     A,R7
000A 2480              ADD     A,#080H
000C 7800        E     MOV     R0,#LOW ScanAUXStepIndex
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 222
000F 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0011 E6                MOV     A,@R0
0012 2400        E     ADD     A,#LOW AuxFlags2
0014 F8                MOV     R0,A
0015 E6                MOV     A,@R0
0016 30E040            JNB     ACC.0,?C0040
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0019 7400        E     MOV     A,#LOW PS2PortxData
001B 2F                ADD     A,R7
001C F8                MOV     R0,A
001D E6                MOV     A,@R0
001E B4FA15            CJNE    A,#0FAH,?C0041
                                           ; SOURCE LINE # 225
                                           ; SOURCE LINE # 227
0021 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0023 E6                MOV     A,@R0
0024 2400        E     ADD     A,#LOW AuxFlags2
0026 F8                MOV     R0,A
0027 E4                CLR     A
0028 F6                MOV     @R0,A
                                           ; SOURCE LINE # 228
0029 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002B E6                MOV     A,@R0
002C 2400        E     ADD     A,#LOW AuxFlags2
002E F8                MOV     R0,A
002F 7402              MOV     A,#02H
0031 46                ORL     A,@R0
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 229
0033 020000      R     LJMP    ?C0044
0036         ?C0041:
                                           ; SOURCE LINE # 231
                                           ; SOURCE LINE # 232
0036 0500        E     INC     PS2_ReTryCunt
                                           ; SOURCE LINE # 233
0038 E500        E     MOV     A,PS2_ReTryCunt
003A D3                SETB    C
003B 9405              SUBB    A,#05H
003D 5003              JNC     $ + 5H
003F 020000      R     LJMP    ?C0044
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
0042 E4                CLR     A
0043 F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 237
0045 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0047 E6                MOV     A,@R0
0048 2400        E     ADD     A,#LOW AuxFlags2
004A F8                MOV     R0,A
004B E4                CLR     A
004C F6                MOV     @R0,A
                                           ; SOURCE LINE # 238
004D 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
004F E6                MOV     A,@R0
0050 2400        E     ADD     A,#LOW AuxFlags2
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 44  

0052 F8                MOV     R0,A
0053 7404              MOV     A,#04H
0055 46                ORL     A,@R0
0056 F6                MOV     @R0,A
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
0057 807E              SJMP    ?C0044
0059         ?C0040:
                                           ; SOURCE LINE # 242
0059 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
005B E6                MOV     A,@R0
005C 2400        E     ADD     A,#LOW AuxFlags2
005E F8                MOV     R0,A
005F E6                MOV     A,@R0
0060 30E43C            JNB     ACC.4,?C0045
                                           ; SOURCE LINE # 243
                                           ; SOURCE LINE # 244
0063 7400        E     MOV     A,#LOW PS2PortxData
0065 2F                ADD     A,R7
0066 F8                MOV     R0,A
0067 E6                MOV     A,@R0
0068 B4FA14            CJNE    A,#0FAH,?C0046
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 247
006B 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
006D E6                MOV     A,@R0
006E 2400        E     ADD     A,#LOW AuxFlags2
0070 F8                MOV     R0,A
0071 E4                CLR     A
0072 F6                MOV     @R0,A
                                           ; SOURCE LINE # 248
0073 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0075 E6                MOV     A,@R0
0076 2400        E     ADD     A,#LOW AuxFlags2
0078 F8                MOV     R0,A
0079 7420              MOV     A,#020H
007B 46                ORL     A,@R0
007C F6                MOV     @R0,A
                                           ; SOURCE LINE # 249
007D 8058              SJMP    ?C0044
007F         ?C0046:
                                           ; SOURCE LINE # 251
                                           ; SOURCE LINE # 252
007F 0500        E     INC     PS2_ReTryCunt
                                           ; SOURCE LINE # 253
0081 E500        E     MOV     A,PS2_ReTryCunt
0083 D3                SETB    C
0084 9405              SUBB    A,#05H
0086 404F              JC      ?C0044
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0088 E4                CLR     A
0089 F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 257
008B 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
008D E6                MOV     A,@R0
008E 2400        E     ADD     A,#LOW AuxFlags2
0090 F8                MOV     R0,A
0091 E4                CLR     A
0092 F6                MOV     @R0,A
                                           ; SOURCE LINE # 258
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 45  

0093 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0095 E6                MOV     A,@R0
0096 2400        E     ADD     A,#LOW AuxFlags2
0098 F8                MOV     R0,A
0099 7440              MOV     A,#040H
009B 46                ORL     A,@R0
009C F6                MOV     @R0,A
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 261
009D 8038              SJMP    ?C0044
009F         ?C0045:
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
009F 7400        E     MOV     A,#LOW AuxFlags
00A1 2F                ADD     A,R7
00A2 F8                MOV     R0,A
00A3 E6                MOV     A,@R0
00A4 700F              JNZ     ?C0050
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 266
00A6 7400        E     MOV     A,#LOW AuxFlags
00A8 2F                ADD     A,R7
00A9 F8                MOV     R0,A
00AA 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 267
00AC 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
00AE 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 268
00B0 EF                MOV     A,R7
00B1 24B0              ADD     A,#0B0H
                                           ; SOURCE LINE # 269
00B3 801F              SJMP    ?C0494
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
00B5         ?C0050:
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
00B5 7400        E     MOV     A,#LOW AuxFlags
00B7 2F                ADD     A,R7
00B8 F8                MOV     R0,A
00B9 E6                MOV     A,@R0
00BA 30E309            JNB     ACC.3,?C0053
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
00BD 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
00BF 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 280
00C1 EF                MOV     A,R7
00C2 24C0              ADD     A,#0C0H
00C4         ?C0493:
                                           ; SOURCE LINE # 281
00C4 800E              SJMP    ?C0494
00C6         ?C0053:
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 284
00C6 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
00C8 2F                ADD     A,R7
00C9 F8                MOV     R0,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 46  

00CA E6                MOV     A,@R0
00CB 600A              JZ      ?C0044
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 286
00CD 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
00CF 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 287
00D1 EF                MOV     A,R7
00D2 24A0              ADD     A,#0A0H
00D4         ?C0494:
00D4 7800        E     MOV     R0,#LOW ScanAUXStepIndex
00D6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
                                           ; SOURCE LINE # 296
00D7         ?C0044:
                                           ; SOURCE LINE # 297
00D7 020000      R     LJMP    PS2Deviceactive
             ; FUNCTION _ProcessECTestAUXACK (END)

             ; FUNCTION _SendAUXData (BEGIN)
                                           ; SOURCE LINE # 304
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 308
0005 300066      E     JNB     SendtoAUXFlag,?C0057
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0008 C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 311
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
000C 75F00D            MOV     B,#0DH
000F A4                MUL     AB
0010 2400        R     ADD     A,#LOW asPS2Struct
0012 F582              MOV     DPL,A
0014 E4                CLR     A
0015 3400        R     ADDC    A,#HIGH asPS2Struct
0017 F583              MOV     DPH,A
0019 E4                CLR     A
001A 93                MOVC    A,@A+DPTR
001B FC                MOV     R4,A
001C 7401              MOV     A,#01H
001E 93                MOVC    A,@A+DPTR
001F F582              MOV     DPL,A
0021 8C83              MOV     DPH,R4
0023 7417              MOV     A,#017H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0026 EF                MOV     A,R7
0027 75F00D            MOV     B,#0DH
002A A4                MUL     AB
002B 2400        R     ADD     A,#LOW asPS2Struct+08H
002D F582              MOV     DPL,A
002F E4                CLR     A
0030 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0032 F583              MOV     DPH,A
0034 E4                CLR     A
0035 93                MOVC    A,@A+DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 47  

0036 FE                MOV     R6,A
0037 7401              MOV     A,#01H
0039 93                MOVC    A,@A+DPTR
003A F582              MOV     DPL,A
003C 8E83              MOV     DPH,R6
003E C083              PUSH    DPH
0040 C082              PUSH    DPL
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#PortNum
0047 E0                MOVX    A,@DPTR
0048 75F00D            MOV     B,#0DH
004B A4                MUL     AB
004C 2400        R     ADD     A,#LOW asPS2Struct+0CH
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
0053 F583              MOV     DPH,A
0055 E4                CLR     A
0056 93                MOVC    A,@A+DPTR
0057 FE                MOV     R6,A
0058 7401              MOV     A,#01H
005A A806              MOV     R0,AR6
005C 08                INC     R0
005D 8002              SJMP    ?C0476
005F         ?C0475:
005F C3                CLR     C
0060 33                RLC     A
0061         ?C0476:
0061 D8FC              DJNZ    R0,?C0475
0063 4F                ORL     A,R7
0064 D082              POP     DPL
0066 D083              POP     DPH
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
0069 E4                CLR     A
006A 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
006C F6                MOV     @R0,A
                                           ; SOURCE LINE # 314
006D 22                RET     
006E         ?C0057:
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
006E 300008      E     JNB     ECSendtoAUXFlag,?C0059
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
0071 900000      R     MOV     DPTR,#PortNum
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 020000      R     LJMP    _ProcessECTestAUXACK
                                           ; SOURCE LINE # 320
0079         ?C0059:
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
0079 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
007B E6                MOV     A,@R0
007C C3                CLR     C
007D 9496              SUBB    A,#096H
007F 5002              JNC     ?C0061
                                           ; SOURCE LINE # 324
                                           ; SOURCE LINE # 325
0081 7664              MOV     @R0,#064H
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 48  

                                           ; SOURCE LINE # 326
0083         ?C0061:
                                           ; SOURCE LINE # 327
0083 E4                CLR     A
0084 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0086 F6                MOV     @R0,A
                                           ; SOURCE LINE # 328
0087 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0089 F6                MOV     @R0,A
                                           ; SOURCE LINE # 329
008A 900000      R     MOV     DPTR,#PortNum
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F 2400        E     ADD     A,#LOW AuxFlags
0091 F8                MOV     R0,A
0092 E6                MOV     A,@R0
0093 30E703            JNB     ACC.7,?C0062
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 331
0096 020000      R     LJMP    _ProcessMouseData
                                           ; SOURCE LINE # 332
0099         ?C0062:
                                           ; SOURCE LINE # 333
0099 900000      R     MOV     DPTR,#PortNum
009C E0                MOVX    A,@DPTR
009D FF                MOV     R7,A
009E 2400        E     ADD     A,#LOW AuxFlags
00A0 F8                MOV     R0,A
00A1 E6                MOV     A,@R0
00A2 30E603            JNB     ACC.6,?C0064
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
00A5 020000      R     LJMP    _ProcessKeyboardData
                                           ; SOURCE LINE # 336
00A8         ?C0064:
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
00A8 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
00AB         ?C0066:
00AB 22                RET     
             ; FUNCTION _SendAUXData (END)

             ; FUNCTION ClaerPS2IFPendingEvent (BEGIN)
                                           ; SOURCE LINE # 349
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
0000 120000      R     LCALL   vInhibitAUXDevice
                                           ; SOURCE LINE # 352
0003 901106            MOV     DPTR,#01106H
0006 E0                MOVX    A,@DPTR
0007 54E3              ANL     A,#0E3H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
000A 901102            MOV     DPTR,#01102H
000D E0                MOVX    A,@DPTR
000E 441C              ORL     A,#01CH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 49  

0011 C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 355
0013 C200        E     CLR     F_Service_PS2_IRQ
                                           ; SOURCE LINE # 356
0015 22                RET     
             ; FUNCTION ClaerPS2IFPendingEvent (END)

             ; FUNCTION _ECSend2Port (BEGIN)
                                           ; SOURCE LINE # 361
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0008 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 364
000B D200        E     SETB    ECSendtoAUXFlag
                                           ; SOURCE LINE # 365
000D D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 366
000F 900000      R     MOV     DPTR,#PortNum
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 75F00D            MOV     B,#0DH
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW asPS2Struct
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH asPS2Struct
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FC                MOV     R4,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FD                MOV     R5,A
0028 F582              MOV     DPL,A
002A 8C83              MOV     DPH,R4
002C 741D              MOV     A,#01DH
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
002F 900000      R     MOV     DPTR,#PortData
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 EF                MOV     A,R7
0035 75F00D            MOV     B,#0DH
0038 A4                MUL     AB
0039 2400        R     ADD     A,#LOW asPS2Struct+06H
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        R     ADDC    A,#HIGH asPS2Struct+06H
0040 F583              MOV     DPH,A
0042 E4                CLR     A
0043 93                MOVC    A,@A+DPTR
0044 FA                MOV     R2,A
0045 7401              MOV     A,#01H
0047 93                MOVC    A,@A+DPTR
0048 F582              MOV     DPL,A
004A 8A83              MOV     DPH,R2
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 50  

004C EE                MOV     A,R6
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
004E 8D82              MOV     DPL,R5
0050 8C83              MOV     DPH,R4
0052 741C              MOV     A,#01CH
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0055 900000      R     MOV     DPTR,#PortNum
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A 75F00D            MOV     B,#0DH
005D A4                MUL     AB
005E 2400        R     ADD     A,#LOW asPS2Struct
0060 F582              MOV     DPL,A
0062 E4                CLR     A
0063 3400        R     ADDC    A,#HIGH asPS2Struct
0065 F583              MOV     DPH,A
0067 E4                CLR     A
0068 93                MOVC    A,@A+DPTR
0069 FC                MOV     R4,A
006A 7401              MOV     A,#01H
006C 93                MOVC    A,@A+DPTR
006D F582              MOV     DPL,A
006F 8C83              MOV     DPH,R4
0071 741E              MOV     A,#01EH
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0074 EF                MOV     A,R7
0075 75F00D            MOV     B,#0DH
0078 A4                MUL     AB
0079 2400        R     ADD     A,#LOW asPS2Struct+08H
007B F582              MOV     DPL,A
007D E4                CLR     A
007E 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0080 F583              MOV     DPH,A
0082 E4                CLR     A
0083 93                MOVC    A,@A+DPTR
0084 FE                MOV     R6,A
0085 7401              MOV     A,#01H
0087 93                MOVC    A,@A+DPTR
0088 F582              MOV     DPL,A
008A 8E83              MOV     DPH,R6
008C C083              PUSH    DPH
008E C082              PUSH    DPL
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#PortNum
0095 E0                MOVX    A,@DPTR
0096 75F00D            MOV     B,#0DH
0099 A4                MUL     AB
009A 2400        R     ADD     A,#LOW asPS2Struct+0CH
009C F582              MOV     DPL,A
009E E4                CLR     A
009F 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
00A1 F583              MOV     DPH,A
00A3 E4                CLR     A
00A4 93                MOVC    A,@A+DPTR
00A5 FE                MOV     R6,A
00A6 7401              MOV     A,#01H
00A8 A806              MOV     R0,AR6
00AA 08                INC     R0
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 51  

00AB 8002              SJMP    ?C0478
00AD         ?C0477:
00AD C3                CLR     C
00AE 33                RLC     A
00AF         ?C0478:
00AF D8FC              DJNZ    R0,?C0477
00B1 4F                ORL     A,R7
00B2 D082              POP     DPL
00B4 D083              POP     DPH
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
00B7 22                RET     
             ; FUNCTION _ECSend2Port (END)

             ; FUNCTION _Send2Port (BEGIN)
                                           ; SOURCE LINE # 377
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 379
0008 BDFF06            CJNE    R5,#0FFH,?C0069
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
000B 7800        E     MOV     R0,#LOW AUXInactiveCounter
000D 7664              MOV     @R0,#064H
                                           ; SOURCE LINE # 382
000F 8005              SJMP    ?C0070
0011         ?C0069:
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
0011 7F06              MOV     R7,#06H
0013 120000      R     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 386
0016         ?C0070:
                                           ; SOURCE LINE # 388
0016 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 390
0019 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
001B E6                MOV     A,@R0
001C C3                CLR     C
001D 9496              SUBB    A,#096H
001F 5002              JNC     ?C0071
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
0021 7696              MOV     @R0,#096H
                                           ; SOURCE LINE # 393
0023         ?C0071:
                                           ; SOURCE LINE # 394
0023 E4                CLR     A
0024 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0026 F6                MOV     @R0,A
                                           ; SOURCE LINE # 396
0027 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 397
0029 D200        E     SETB    SendtoAUXFlag
                                           ; SOURCE LINE # 398
002B 900000      R     MOV     DPTR,#PortNum
002E E0                MOVX    A,@DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 52  

002F FF                MOV     R7,A
0030 75F00D            MOV     B,#0DH
0033 A4                MUL     AB
0034 2400        R     ADD     A,#LOW asPS2Struct
0036 F582              MOV     DPL,A
0038 E4                CLR     A
0039 3400        R     ADDC    A,#HIGH asPS2Struct
003B F583              MOV     DPH,A
003D E4                CLR     A
003E 93                MOVC    A,@A+DPTR
003F FC                MOV     R4,A
0040 7401              MOV     A,#01H
0042 93                MOVC    A,@A+DPTR
0043 FD                MOV     R5,A
0044 F582              MOV     DPL,A
0046 8C83              MOV     DPH,R4
0048 741D              MOV     A,#01DH
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
004B 900000      R     MOV     DPTR,#PortData
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 EF                MOV     A,R7
0051 75F00D            MOV     B,#0DH
0054 A4                MUL     AB
0055 2400        R     ADD     A,#LOW asPS2Struct+06H
0057 F582              MOV     DPL,A
0059 E4                CLR     A
005A 3400        R     ADDC    A,#HIGH asPS2Struct+06H
005C F583              MOV     DPH,A
005E E4                CLR     A
005F 93                MOVC    A,@A+DPTR
0060 FA                MOV     R2,A
0061 7401              MOV     A,#01H
0063 93                MOVC    A,@A+DPTR
0064 F582              MOV     DPL,A
0066 8A83              MOV     DPH,R2
0068 EE                MOV     A,R6
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
006A 8D82              MOV     DPL,R5
006C 8C83              MOV     DPH,R4
006E 741C              MOV     A,#01CH
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
0071 900000      R     MOV     DPTR,#PortNum
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 75F00D            MOV     B,#0DH
0079 A4                MUL     AB
007A 2400        R     ADD     A,#LOW asPS2Struct
007C F582              MOV     DPL,A
007E E4                CLR     A
007F 3400        R     ADDC    A,#HIGH asPS2Struct
0081 F583              MOV     DPH,A
0083 E4                CLR     A
0084 93                MOVC    A,@A+DPTR
0085 FC                MOV     R4,A
0086 7401              MOV     A,#01H
0088 93                MOVC    A,@A+DPTR
0089 F582              MOV     DPL,A
008B 8C83              MOV     DPH,R4
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 53  

008D 741E              MOV     A,#01EH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0090 EF                MOV     A,R7
0091 75F00D            MOV     B,#0DH
0094 A4                MUL     AB
0095 2400        R     ADD     A,#LOW asPS2Struct+08H
0097 F582              MOV     DPL,A
0099 E4                CLR     A
009A 3400        R     ADDC    A,#HIGH asPS2Struct+08H
009C F583              MOV     DPH,A
009E E4                CLR     A
009F 93                MOVC    A,@A+DPTR
00A0 FE                MOV     R6,A
00A1 7401              MOV     A,#01H
00A3 93                MOVC    A,@A+DPTR
00A4 F582              MOV     DPL,A
00A6 8E83              MOV     DPH,R6
00A8 C083              PUSH    DPH
00AA C082              PUSH    DPL
00AC E0                MOVX    A,@DPTR
00AD FF                MOV     R7,A
00AE 900000      R     MOV     DPTR,#PortNum
00B1 E0                MOVX    A,@DPTR
00B2 75F00D            MOV     B,#0DH
00B5 A4                MUL     AB
00B6 2400        R     ADD     A,#LOW asPS2Struct+0CH
00B8 F582              MOV     DPL,A
00BA E4                CLR     A
00BB 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
00BD F583              MOV     DPH,A
00BF E4                CLR     A
00C0 93                MOVC    A,@A+DPTR
00C1 FE                MOV     R6,A
00C2 7401              MOV     A,#01H
00C4 A806              MOV     R0,AR6
00C6 08                INC     R0
00C7 8002              SJMP    ?C0480
00C9         ?C0479:
00C9 C3                CLR     C
00CA 33                RLC     A
00CB         ?C0480:
00CB D8FC              DJNZ    R0,?C0479
00CD 4F                ORL     A,R7
00CE D082              POP     DPL
00D0 D083              POP     DPH
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
00D3 22                RET     
             ; FUNCTION _Send2Port (END)

             ; FUNCTION L?0522 (BEGIN)
0000 E0                MOVX    A,@DPTR
0001 FF                MOV     R7,A
0002 A3                INC     DPTR
0003 E0                MOVX    A,@DPTR
0004 FD                MOV     R5,A
0005 7B01              MOV     R3,#01H
             ; FUNCTION _Send2PortNWait (BEGIN)
                                           ; SOURCE LINE # 413
0007 900000      R     MOV     DPTR,#PortNum
000A EF                MOV     A,R7
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 54  

000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D ED                MOV     A,R5
000E F0                MOVX    @DPTR,A
000F A3                INC     DPTR
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
                                           ; SOURCE LINE # 418
0012 E4                CLR     A
0013 7800        E     MOV     R0,#LOW PS2IFAck
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 420
0016 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 422
0019 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 423
001B C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 424
001D 900000      R     MOV     DPTR,#PortNum
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 75F00D            MOV     B,#0DH
0025 A4                MUL     AB
0026 2400        R     ADD     A,#LOW asPS2Struct
0028 F582              MOV     DPL,A
002A E4                CLR     A
002B 3400        R     ADDC    A,#HIGH asPS2Struct
002D F583              MOV     DPH,A
002F E4                CLR     A
0030 93                MOVC    A,@A+DPTR
0031 FC                MOV     R4,A
0032 7401              MOV     A,#01H
0034 93                MOVC    A,@A+DPTR
0035 FD                MOV     R5,A
0036 F582              MOV     DPL,A
0038 8C83              MOV     DPH,R4
003A 741D              MOV     A,#01DH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 425
003D 900000      R     MOV     DPTR,#cmd
0040 E0                MOVX    A,@DPTR
0041 FE                MOV     R6,A
0042 EF                MOV     A,R7
0043 75F00D            MOV     B,#0DH
0046 A4                MUL     AB
0047 2400        R     ADD     A,#LOW asPS2Struct+06H
0049 F582              MOV     DPL,A
004B E4                CLR     A
004C 3400        R     ADDC    A,#HIGH asPS2Struct+06H
004E F583              MOV     DPH,A
0050 E4                CLR     A
0051 93                MOVC    A,@A+DPTR
0052 FA                MOV     R2,A
0053 7401              MOV     A,#01H
0055 93                MOVC    A,@A+DPTR
0056 F582              MOV     DPL,A
0058 8A83              MOV     DPH,R2
005A EE                MOV     A,R6
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 426
005C 8D82              MOV     DPL,R5
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 55  

005E 8C83              MOV     DPH,R4
0060 741C              MOV     A,#01CH
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0063 900000      R     MOV     DPTR,#PortNum
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 75F00D            MOV     B,#0DH
006B A4                MUL     AB
006C 2400        R     ADD     A,#LOW asPS2Struct
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        R     ADDC    A,#HIGH asPS2Struct
0073 F583              MOV     DPH,A
0075 E4                CLR     A
0076 93                MOVC    A,@A+DPTR
0077 FC                MOV     R4,A
0078 7401              MOV     A,#01H
007A 93                MOVC    A,@A+DPTR
007B F582              MOV     DPL,A
007D 8C83              MOV     DPH,R4
007F 741E              MOV     A,#01EH
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
0082 120000      R     LCALL   _bExtAUXTimeOutCheck
;---- Variable 'result' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 431
0085 EF                MOV     A,R7
0086 7020              JNZ     ?C0073
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0088 900000      R     MOV     DPTR,#index
008B F0                MOVX    @DPTR,A
008C         ?C0074:
008C 900000      R     MOV     DPTR,#bytecunt
008F E0                MOVX    A,@DPTR
0090 FE                MOV     R6,A
0091 A3                INC     DPTR
0092 E0                MOVX    A,@DPTR
0093 C3                CLR     C
0094 9E                SUBB    A,R6
0095 5011              JNC     ?C0073
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
0097 900000      R     MOV     DPTR,#PortNum
                                           ; SOURCE LINE # 436
009A 120000      R     LCALL   L?0521
                                           ; SOURCE LINE # 437
009D EF                MOV     A,R7
009E 7008              JNZ     ?C0073
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
00A0         ?C0076:
00A0 900000      R     MOV     DPTR,#index
00A3 E0                MOVX    A,@DPTR
00A4 04                INC     A
00A5 F0                MOVX    @DPTR,A
00A6 80E4              SJMP    ?C0074
                                           ; SOURCE LINE # 442
00A8         ?C0073:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 56  

                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
00A8         ?C0078:
00A8 22                RET     
             ; FUNCTION _Send2PortNWait (END)

             ; FUNCTION _vSendCmdtoMouse (BEGIN)
                                           ; SOURCE LINE # 450
0000 900000      R     MOV     DPTR,#PortNum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 453
0005 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 454
0008 120000      E     LCALL   Cmd_A8
                                           ; SOURCE LINE # 455
000B E4                CLR     A
000C 7800        E     MOV     R0,#LOW TPACKCounter
000E F6                MOV     @R0,A
                                           ; SOURCE LINE # 456
000F 7800        E     MOV     R0,#LOW MS_ID_CUNT
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 458
0012 30001F      E     JNB     AUX2ByteCommand,?C0079
                                           ; SOURCE LINE # 459
                                           ; SOURCE LINE # 460
0015 7800        E     MOV     R0,#LOW TPResolution
0017 E6                MOV     A,@R0
0018 B4FF04            CJNE    A,#0FFH,?C0080
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
001B A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 463
001D 8008              SJMP    ?C0081
001F         ?C0080:
                                           ; SOURCE LINE # 464
001F 7800        E     MOV     R0,#LOW TPSamplingRate
0021 E6                MOV     A,@R0
0022 B4FF02            CJNE    A,#0FFH,?C0081
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0025 A600        E     MOV     @R0,KBHIData
                                           ; SOURCE LINE # 467
0027         ?C0081:
                                           ; SOURCE LINE # 469
0027 900000      R     MOV     DPTR,#PortNum
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C AD00        E     MOV     R5,KBHIData
002E 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 470
0031 C200        E     CLR     AUX2ByteCommand
0033 22                RET     
                                           ; SOURCE LINE # 472
0034         ?C0079:
                                           ; SOURCE LINE # 474
0034 E500        E     MOV     A,KBHIData
0036 240E              ADD     A,#0EH
0038 6027              JZ      ?C0097
003A 14                DEC     A
003B 6012              JZ      ?C0086
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 57  

003D 14                DEC     A
003E 6017              JZ      ?C0087
0040 14                DEC     A
0041 601A              JZ      ?C0088
0043 24F6              ADD     A,#0F6H
0045 6020              JZ      ?C0100
0047 2417              ADD     A,#017H
0049 7042              JNZ     ?C0084
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
004B         ?C0085:
                                           ; SOURCE LINE # 477
004B 7800        E     MOV     R0,#LOW TPResolution
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
004D 8002              SJMP    ?C0495
                                           ; SOURCE LINE # 481
004F         ?C0086:
                                           ; SOURCE LINE # 482
004F 7800        E     MOV     R0,#LOW TPSamplingRate
0051         ?C0495:
0051 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 483
0053 D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 484
0055 8036              SJMP    ?C0084
                                           ; SOURCE LINE # 486
0057         ?C0087:
                                           ; SOURCE LINE # 490
0057 D200        E     SETB    EnableTP
                                           ; SOURCE LINE # 491
0059 D200        E     SETB    MouseDriverIn
                                           ; SOURCE LINE # 492
005B 8030              SJMP    ?C0084
                                           ; SOURCE LINE # 494
005D         ?C0088:
                                           ; SOURCE LINE # 495
005D C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 496
005F 802C              SJMP    ?C0084
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 504
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
                                           ; SOURCE LINE # 519
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 522
0061         ?C0097:
                                           ; SOURCE LINE # 523
0061 7800        E     MOV     R0,#LOW MS_ID_CUNT
0063 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 524
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 58  

0065 8026              SJMP    ?C0084
                                           ; SOURCE LINE # 526
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
                                           ; SOURCE LINE # 530
0067         ?C0100:
                                           ; SOURCE LINE # 532
0067 C200        E     CLR     MouseDriverIn
                                           ; SOURCE LINE # 533
0069 C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 534
006B C200        E     CLR     EnableTP
                                           ; SOURCE LINE # 535
006D 7800        E     MOV     R0,#LOW TPACKCounter
006F 7603              MOV     @R0,#03H
                                           ; SOURCE LINE # 537
;---- Variable 'index' assigned to Register 'R7' ----
0071 E4                CLR     A
0072 FF                MOV     R7,A
0073         ?C0101:
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0073 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0075 E6                MOV     A,@R0
0076 14                DEC     A
0077 6F                XRL     A,R7
0078 600E              JZ      ?C0103
                                           ; SOURCE LINE # 540
                                           ; SOURCE LINE # 541
007A 7400        E     MOV     A,#LOW AuxFlags
007C 2F                ADD     A,R7
007D F8                MOV     R0,A
007E E6                MOV     A,@R0
007F 30E706            JNB     ACC.7,?C0103
                                           ; SOURCE LINE # 542
                                           ; SOURCE LINE # 543
0082 7400        E     MOV     A,#LOW AuxFlags
0084 2F                ADD     A,R7
0085 F8                MOV     R0,A
0086 E4                CLR     A
0087 F6                MOV     @R0,A
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 546
0088         ?C0103:
0088 0F                INC     R7
0089 EF                MOV     A,R7
008A B403E6            CJNE    A,#03H,?C0101
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
008D         ?C0084:
                                           ; SOURCE LINE # 553
008D 900000      R     MOV     DPTR,#PortNum
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 AD00        E     MOV     R5,KBHIData
0094 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 555
0097         ?C0083:
0097 22                RET     
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 59  

             ; FUNCTION _vSendCmdtoMouse (END)

             ; FUNCTION _vSendCmdtoMUX (BEGIN)
                                           ; SOURCE LINE # 560
0000 900000      R     MOV     DPTR,#port
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 562
0005 120000      E     LCALL   Cmd_A8
                                           ; SOURCE LINE # 563
0008 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 564
000B 30000D      E     JNB     AUX2ByteCommand,?C0107
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
000E 900000      R     MOV     DPTR,#port
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 AD00        E     MOV     R5,KBHIData
0015 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 567
0018 C200        E     CLR     AUX2ByteCommand
001A 22                RET     
                                           ; SOURCE LINE # 569
001B         ?C0107:
                                           ; SOURCE LINE # 571
001B E500        E     MOV     A,KBHIData
001D 120000      E     LCALL   ?C?CCASE
0020 0000        R     DW      ?C0124
0022 E1                DB      0E1H
0023 0000        R     DW      ?C0124
0025 E6                DB      0E6H
0026 0000        R     DW      ?C0124
0028 E7                DB      0E7H
0029 0000        R     DW      ?C0111
002B E8                DB      0E8H
002C 0000        R     DW      ?C0124
002E E9                DB      0E9H
002F 0000        R     DW      ?C0124
0031 EA                DB      0EAH
0032 0000        R     DW      ?C0124
0034 EB                DB      0EBH
0035 0000        R     DW      ?C0124
0037 EC                DB      0ECH
0038 0000        R     DW      ?C0124
003A EE                DB      0EEH
003B 0000        R     DW      ?C0124
003D F0                DB      0F0H
003E 0000        R     DW      ?C0124
0040 F2                DB      0F2H
0041 0000        R     DW      ?C0111
0043 F3                DB      0F3H
0044 0000        R     DW      ?C0124
0046 F4                DB      0F4H
0047 0000        R     DW      ?C0124
0049 F5                DB      0F5H
004A 0000        R     DW      ?C0124
004C F6                DB      0F6H
004D 0000        R     DW      ?C0124
004F FE                DB      0FEH
0050 0000        R     DW      ?C0124
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 60  

0052 FF                DB      0FFH
0053 0000              DW      00H
0055 0000        R     DW      ?C0108
                                           ; SOURCE LINE # 572
                                           ; SOURCE LINE # 573
                                           ; SOURCE LINE # 574
0057         ?C0111:
                                           ; SOURCE LINE # 575
0057 900000      R     MOV     DPTR,#port
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C AD00        E     MOV     R5,KBHIData
005E 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 576
0061 D200        E     SETB    AUX2ByteCommand
                                           ; SOURCE LINE # 577
0063 22                RET     
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 583
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
                                           ; SOURCE LINE # 597
0064         ?C0124:
                                           ; SOURCE LINE # 598
0064         ?C0497:
                                           ; SOURCE LINE # 599
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 605
0064         ?C0499:
0064 900000      R     MOV     DPTR,#port
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 AD00        E     MOV     R5,KBHIData
006B 120000      R     LCALL   _Send2Port
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
006E         ?C0108:
006E 22                RET     
             ; FUNCTION _vSendCmdtoMUX (END)

             ; FUNCTION Ps2_Init (BEGIN)
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 623
0000 22                RET     
             ; FUNCTION Ps2_Init (END)

             ; FUNCTION Service_PS2_IRQ (BEGIN)
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
                                           ; SOURCE LINE # 630
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 61  

0000 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 6009              JZ      ?C0130
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
0006 E6                MOV     A,@R0
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _SendAUXData
                                           ; SOURCE LINE # 633
000B 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
000D 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
000F         ?C0130:
000F 22                RET     
             ; FUNCTION Service_PS2_IRQ (END)

             ; FUNCTION vPS2DeviceInactive (BEGIN)
                                           ; SOURCE LINE # 641
                                           ; SOURCE LINE # 642
                                           ; SOURCE LINE # 643
0000 901700            MOV     DPTR,#01700H
0003 7411              MOV     A,#011H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
0008 A3                INC     DPTR
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 646
000A 22                RET     
             ; FUNCTION vPS2DeviceInactive (END)

             ; FUNCTION PS2Deviceactive (BEGIN)
                                           ; SOURCE LINE # 651
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 654
;---- Variable 'index' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0132:
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0002 7400        E     MOV     A,#LOW AuxFlags
0004 2F                ADD     A,R7
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E65B            JNB     ACC.6,?C0134
                                           ; SOURCE LINE # 657
                                           ; SOURCE LINE # 658
000A EF                MOV     A,R7
000B 75F00D            MOV     B,#0DH
000E A4                MUL     AB
000F 2400        R     ADD     A,#LOW asPS2Struct
0011 F582              MOV     DPL,A
0013 E4                CLR     A
0014 3400        R     ADDC    A,#HIGH asPS2Struct
0016 F583              MOV     DPH,A
0018 E4                CLR     A
0019 93                MOVC    A,@A+DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 62  

001A FC                MOV     R4,A
001B 7401              MOV     A,#01H
001D 93                MOVC    A,@A+DPTR
001E F582              MOV     DPL,A
0020 8C83              MOV     DPH,R4
0022 7417              MOV     A,#017H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
0025 EF                MOV     A,R7
0026 75F00D            MOV     B,#0DH
0029 A4                MUL     AB
002A 2400        R     ADD     A,#LOW asPS2Struct+08H
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        R     ADDC    A,#HIGH asPS2Struct+08H
0031 F583              MOV     DPH,A
0033 E4                CLR     A
0034 93                MOVC    A,@A+DPTR
0035 FC                MOV     R4,A
0036 7401              MOV     A,#01H
0038 93                MOVC    A,@A+DPTR
0039 F582              MOV     DPL,A
003B 8C83              MOV     DPH,R4
003D C083              PUSH    DPH
003F C082              PUSH    DPL
0041 E0                MOVX    A,@DPTR
0042 FE                MOV     R6,A
0043 EF                MOV     A,R7
0044 75F00D            MOV     B,#0DH
0047 A4                MUL     AB
0048 2400        R     ADD     A,#LOW asPS2Struct+0CH
004A F582              MOV     DPL,A
004C E4                CLR     A
004D 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
004F F583              MOV     DPH,A
0051 E4                CLR     A
0052 93                MOVC    A,@A+DPTR
0053 FD                MOV     R5,A
0054 7401              MOV     A,#01H
0056 A805              MOV     R0,AR5
0058 08                INC     R0
0059 8002              SJMP    ?C0482
005B         ?C0481:
005B C3                CLR     C
005C 33                RLC     A
005D         ?C0482:
005D D8FC              DJNZ    R0,?C0481
005F 4E                ORL     A,R6
0060 D082              POP     DPL
0062 D083              POP     DPH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0065         ?C0134:
0065 0F                INC     R7
0066 EF                MOV     A,R7
0067 B40398            CJNE    A,#03H,?C0132
006A         ?C0133:
                                           ; SOURCE LINE # 662
006A E4                CLR     A
006B FF                MOV     R7,A
006C         ?C0136:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 63  

                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
006C 7400        E     MOV     A,#LOW AuxFlags
006E 2F                ADD     A,R7
006F F8                MOV     R0,A
0070 E6                MOV     A,@R0
0071 30E75B            JNB     ACC.7,?C0138
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
0074 EF                MOV     A,R7
0075 75F00D            MOV     B,#0DH
0078 A4                MUL     AB
0079 2400        R     ADD     A,#LOW asPS2Struct
007B F582              MOV     DPL,A
007D E4                CLR     A
007E 3400        R     ADDC    A,#HIGH asPS2Struct
0080 F583              MOV     DPH,A
0082 E4                CLR     A
0083 93                MOVC    A,@A+DPTR
0084 FC                MOV     R4,A
0085 7401              MOV     A,#01H
0087 93                MOVC    A,@A+DPTR
0088 F582              MOV     DPL,A
008A 8C83              MOV     DPH,R4
008C 7417              MOV     A,#017H
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
008F EF                MOV     A,R7
0090 75F00D            MOV     B,#0DH
0093 A4                MUL     AB
0094 2400        R     ADD     A,#LOW asPS2Struct+08H
0096 F582              MOV     DPL,A
0098 E4                CLR     A
0099 3400        R     ADDC    A,#HIGH asPS2Struct+08H
009B F583              MOV     DPH,A
009D E4                CLR     A
009E 93                MOVC    A,@A+DPTR
009F FC                MOV     R4,A
00A0 7401              MOV     A,#01H
00A2 93                MOVC    A,@A+DPTR
00A3 F582              MOV     DPL,A
00A5 8C83              MOV     DPH,R4
00A7 C083              PUSH    DPH
00A9 C082              PUSH    DPL
00AB E0                MOVX    A,@DPTR
00AC FE                MOV     R6,A
00AD EF                MOV     A,R7
00AE 75F00D            MOV     B,#0DH
00B1 A4                MUL     AB
00B2 2400        R     ADD     A,#LOW asPS2Struct+0CH
00B4 F582              MOV     DPL,A
00B6 E4                CLR     A
00B7 3400        R     ADDC    A,#HIGH asPS2Struct+0CH
00B9 F583              MOV     DPH,A
00BB E4                CLR     A
00BC 93                MOVC    A,@A+DPTR
00BD FD                MOV     R5,A
00BE 7401              MOV     A,#01H
00C0 A805              MOV     R0,AR5
00C2 08                INC     R0
00C3 8002              SJMP    ?C0484
00C5         ?C0483:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 64  

00C5 C3                CLR     C
00C6 33                RLC     A
00C7         ?C0484:
00C7 D8FC              DJNZ    R0,?C0483
00C9 4E                ORL     A,R6
00CA D082              POP     DPL
00CC D083              POP     DPH
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 669
00CF         ?C0138:
00CF 0F                INC     R7
00D0 EF                MOV     A,R7
00D1 B40398            CJNE    A,#03H,?C0136
                                           ; SOURCE LINE # 670
00D4         ?C0140:
00D4 22                RET     
             ; FUNCTION PS2Deviceactive (END)

             ; FUNCTION vInhibitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 675
                                           ; SOURCE LINE # 676
                                           ; SOURCE LINE # 677
0000 120000      R     LCALL   vPS2DeviceInactive
                                           ; SOURCE LINE # 679
0003 C2AB              CLR     ET1
                                           ; SOURCE LINE # 680
0005 758B8C            MOV     TL1,#08CH
                                           ; SOURCE LINE # 681
0008 758DFF            MOV     TH1,#0FFH
                                           ; SOURCE LINE # 682
000B D28E              SETB    TR1
                                           ; SOURCE LINE # 683
000D C28F              CLR     TF1
000F         ?C0141:
                                           ; SOURCE LINE # 684
000F 308FFD            JNB     TF1,?C0141
0012         ?C0142:
                                           ; SOURCE LINE # 685
0012 C28F              CLR     TF1
                                           ; SOURCE LINE # 686
0014 D2AB              SETB    ET1
                                           ; SOURCE LINE # 687
0016 22                RET     
             ; FUNCTION vInhibitAUXDevice (END)

             ; FUNCTION ScanAUXDevice (BEGIN)
                                           ; SOURCE LINE # 692
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 697
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#index
0004 F0                MOVX    @DPTR,A
0005         ?C0144:
0005 900000      R     MOV     DPTR,#index
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9403              SUBB    A,#03H
000D 4003              JC      $ + 5H
000F 020000      R     LJMP    ?C0145
                                           ; SOURCE LINE # 698
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 65  

                                           ; SOURCE LINE # 699
0012 7400        E     MOV     A,#LOW AuxFlags
0014 2F                ADD     A,R7
0015 F8                MOV     R0,A
0016 E6                MOV     A,@R0
0017 30E703            JNB     ACC.7,$ + 6H
001A 020000      R     LJMP    ?C0146
001D E0                MOVX    A,@DPTR
001E 2400        E     ADD     A,#LOW AuxFlags
0020 F8                MOV     R0,A
0021 E6                MOV     A,@R0
0022 30E603            JNB     ACC.6,$ + 6H
0025 020000      R     LJMP    ?C0146
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 702
0028         ?C0147:
                                           ; SOURCE LINE # 703
0028 900000      R     MOV     DPTR,#index
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D 2400        E     ADD     A,#LOW AuxFlags
002F F8                MOV     R0,A
0030 E4                CLR     A
0031 F6                MOV     @R0,A
                                           ; SOURCE LINE # 705
0032 EE                MOV     A,R6
0033 7014              JNZ     ?C0149
                                           ; SOURCE LINE # 706
                                           ; SOURCE LINE # 707
0035 901638            MOV     DPTR,#01638H
0038 E0                MOVX    A,@DPTR
0039 54FB              ANL     A,#0FBH
003B 6003              JZ      $ + 5H
003D 020000      R     LJMP    ?C0146
0040 A3                INC     DPTR
0041 E0                MOVX    A,@DPTR
0042 54FB              ANL     A,#0FBH
0044 6030              JZ      ?C0152
                                           ; SOURCE LINE # 708
0046 020000      R     LJMP    ?C0146
                                           ; SOURCE LINE # 709
0049         ?C0149:
                                           ; SOURCE LINE # 710
0049 EF                MOV     A,R7
004A B40114            CJNE    A,#01H,?C0153
                                           ; SOURCE LINE # 711
                                           ; SOURCE LINE # 712
004D 90163A            MOV     DPTR,#0163AH
0050 E0                MOVX    A,@DPTR
0051 54FB              ANL     A,#0FBH
0053 6003              JZ      $ + 5H
0055 020000      R     LJMP    ?C0146
0058 A3                INC     DPTR
0059 E0                MOVX    A,@DPTR
005A 54FB              ANL     A,#0FBH
005C 6018              JZ      ?C0152
                                           ; SOURCE LINE # 713
005E         ?C0500:
005E 020000      R     LJMP    ?C0146
                                           ; SOURCE LINE # 714
0061         ?C0153:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 66  

                                           ; SOURCE LINE # 715
0061 900000      R     MOV     DPTR,#index
0064 E0                MOVX    A,@DPTR
0065 B4020E            CJNE    A,#02H,?C0152
                                           ; SOURCE LINE # 716
                                           ; SOURCE LINE # 717
0068 90163C            MOV     DPTR,#0163CH
006B E0                MOVX    A,@DPTR
006C 54FB              ANL     A,#0FBH
006E 7079              JNZ     ?C0146
0070 A3                INC     DPTR
0071 E0                MOVX    A,@DPTR
0072 54FB              ANL     A,#0FBH
0074 7073              JNZ     ?C0146
                                           ; SOURCE LINE # 718
                                           ; SOURCE LINE # 719
0076         ?C0152:
                                           ; SOURCE LINE # 721
0076 900000      R     MOV     DPTR,#index
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B 7B01              MOV     R3,#01H
007D 7DFF              MOV     R5,#0FFH
007F 120000      R     LCALL   _Send2PortNWait
0082 EF                MOV     A,R7
0083 7064              JNZ     ?C0146
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0085 900000      R     MOV     DPTR,#index
0088 E0                MOVX    A,@DPTR
0089 2400        E     ADD     A,#LOW AuxFlags
008B F8                MOV     R0,A
008C 7401              MOV     A,#01H
008E 46                ORL     A,@R0
008F F6                MOV     @R0,A
                                           ; SOURCE LINE # 725
0090 E4                CLR     A
0091 A3                INC     DPTR
0092 F0                MOVX    @DPTR,A
0093         ?C0161:
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
                                           ; SOURCE LINE # 728
0093 120000      R     LCALL   L?0520
0096 EF                MOV     A,R7
0097 600C              JZ      ?C0162
                                           ; SOURCE LINE # 729
                                           ; SOURCE LINE # 730
                                           ; SOURCE LINE # 731
                                           ; SOURCE LINE # 732
0099         ?C0163:
0099 900000      R     MOV     DPTR,#timeout
009C E0                MOVX    A,@DPTR
009D 04                INC     A
009E F0                MOVX    @DPTR,A
009F E0                MOVX    A,@DPTR
00A0 D3                SETB    C
00A1 9414              SUBB    A,#014H
00A3 40EE              JC      ?C0161
00A5         ?C0162:
                                           ; SOURCE LINE # 734
00A5 900000      R     MOV     DPTR,#timeout
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 67  

00A8 E0                MOVX    A,@DPTR
00A9 D3                SETB    C
00AA 9414              SUBB    A,#014H
00AC 503B              JNC     ?C0146
                                           ; SOURCE LINE # 735
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 739
                                           ; SOURCE LINE # 740
00AE         ?C0165:
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 743
00AE E4                CLR     A
00AF 900000      R     MOV     DPTR,#timeout
00B2 F0                MOVX    @DPTR,A
00B3         ?C0168:
                                           ; SOURCE LINE # 744
                                           ; SOURCE LINE # 745
                                           ; SOURCE LINE # 746
00B3 120000      R     LCALL   L?0520
00B6 EF                MOV     A,R7
00B7 600C              JZ      ?C0169
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
                                           ; SOURCE LINE # 749
                                           ; SOURCE LINE # 750
00B9         ?C0170:
00B9 900000      R     MOV     DPTR,#timeout
00BC E0                MOVX    A,@DPTR
00BD 04                INC     A
00BE F0                MOVX    @DPTR,A
00BF E0                MOVX    A,@DPTR
00C0 D3                SETB    C
00C1 940A              SUBB    A,#0AH
00C3 40EE              JC      ?C0168
00C5         ?C0169:
                                           ; SOURCE LINE # 752
00C5 900000      R     MOV     DPTR,#timeout
00C8 E0                MOVX    A,@DPTR
00C9 D3                SETB    C
00CA 940A              SUBB    A,#0AH
00CC 900000      R     MOV     DPTR,#index
00CF E0                MOVX    A,@DPTR
00D0 FF                MOV     R7,A
00D1 400C              JC      ?C0175
                                           ; SOURCE LINE # 753
                                           ; SOURCE LINE # 754
00D3 2400        E     ADD     A,#LOW AuxFlags
00D5 F8                MOV     R0,A
00D6 7440              MOV     A,#040H
00D8 46                ORL     A,@R0
00D9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 755
00DA 120000      R     LCALL   _CheckNSetMainKBCHN
                                           ; SOURCE LINE # 757
00DD 800A              SJMP    ?C0146
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 759
                                           ; SOURCE LINE # 760
                                           ; SOURCE LINE # 761
                                           ; SOURCE LINE # 762
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 68  

                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
00DF         ?C0175:
                                           ; SOURCE LINE # 770
00DF 2400        E     ADD     A,#LOW AuxFlags
00E1 F8                MOV     R0,A
00E2 7480              MOV     A,#080H
00E4 46                ORL     A,@R0
00E5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 772
00E6 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 774
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
                                           ; SOURCE LINE # 777
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
                                           ; SOURCE LINE # 780
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
00E9         ?C0146:
00E9 900000      R     MOV     DPTR,#index
00EC E0                MOVX    A,@DPTR
00ED 04                INC     A
00EE F0                MOVX    @DPTR,A
00EF 020000      R     LJMP    ?C0144
00F2         ?C0145:
                                           ; SOURCE LINE # 788
00F2 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
00F4 E6                MOV     A,@R0
00F5 700B              JNZ     ?C0179
00F7 7800        E     MOV     R0,#LOW Main_KB_CHN
00F9 E6                MOV     A,@R0
00FA 7006              JNZ     ?C0179
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
00FC 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
00FE F6                MOV     @R0,A
                                           ; SOURCE LINE # 791
00FF 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0101 F6                MOV     @R0,A
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 797
0102         ?C0179:
0102 22                RET     
             ; FUNCTION ScanAUXDevice (END)

             ; FUNCTION ReadDeviceID (BEGIN)
                                           ; SOURCE LINE # 802
                                           ; SOURCE LINE # 803
                                           ; SOURCE LINE # 804
0000 E4                CLR     A
0001 7800        E     MOV     R0,#LOW PS2IFAck
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 805
0004 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 69  

0006 E6                MOV     A,@R0
0007 FF                MOV     R7,A
0008 7B02              MOV     R3,#02H
000A 7DF2              MOV     R5,#0F2H
000C 120000      R     LCALL   _Send2PortNWait
000F EF                MOV     A,R7
0010 703D              JNZ     ?C0187
                                           ; SOURCE LINE # 806
                                           ; SOURCE LINE # 807
0012 7800        E     MOV     R0,#LOW PS2IFAck
0014 E6                MOV     A,@R0
0015 64AB              XRL     A,#0ABH
0017 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0019 7025              JNZ     ?C0181
                                           ; SOURCE LINE # 808
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 810
001B 120000      R     LCALL   L?0523
                                           ; SOURCE LINE # 811
001E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0020 E6                MOV     A,@R0
0021 75F00D            MOV     B,#0DH
0024 A4                MUL     AB
0025 2400        R     ADD     A,#LOW asPS2Struct
0027 F582              MOV     DPL,A
0029 E4                CLR     A
002A 3400        R     ADDC    A,#HIGH asPS2Struct
002C F583              MOV     DPH,A
002E E4                CLR     A
002F 93                MOVC    A,@A+DPTR
0030 FE                MOV     R6,A
0031 7401              MOV     A,#01H
0033 93                MOVC    A,@A+DPTR
0034 F582              MOV     DPL,A
0036 8E83              MOV     DPH,R6
0038 7417              MOV     A,#017H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 812
003B E6                MOV     A,@R0
003C FF                MOV     R7,A
003D 020000      R     LJMP    _bExtAUXTimeOutCheck
                                           ; SOURCE LINE # 813
                                           ; SOURCE LINE # 814
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
0040         ?C0181:
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
0040 E6                MOV     A,@R0
0041 2400        E     ADD     A,#LOW AuxFlags
0043 F8                MOV     R0,A
0044 7480              MOV     A,#080H
0046 46                ORL     A,@R0
0047 F6                MOV     @R0,A
                                           ; SOURCE LINE # 821
0048 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
004A E6                MOV     A,@R0
004B FF                MOV     R7,A
004C 120000      R     LCALL   _CheckNSetMainMSCHN
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 823
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 70  

                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 831
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
004F         ?C0187:
004F 22                RET     
             ; FUNCTION ReadDeviceID (END)

             ; FUNCTION CheckAUXDeviceType (BEGIN)
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
                                           ; SOURCE LINE # 845
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0002 E6                MOV     A,@R0
0003 2400        E     ADD     A,#LOW AuxFlags
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 6402              XRL     A,#02H
0009 6003              JZ      $ + 5H
000B 020000      R     LJMP    ?C0211
                                           ; SOURCE LINE # 846
                                           ; SOURCE LINE # 847
000E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0010 E6                MOV     A,@R0
0011 2400        E     ADD     A,#LOW AuxFlags
0013 F8                MOV     R0,A
0014 E4                CLR     A
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 848
0016 7800        E     MOV     R0,#LOW PS2IFAck
0018 F6                MOV     @R0,A
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 853
0019         ?C0189:
                                           ; SOURCE LINE # 855
0019 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
001B E6                MOV     A,@R0
001C FF                MOV     R7,A
001D 7B01              MOV     R3,#01H
001F 7DFF              MOV     R5,#0FFH
0021 120000      R     LCALL   _Send2PortNWait
0024 EF                MOV     A,R7
0025 6003              JZ      $ + 5H
0027 020000      R     LJMP    ?C0210
                                           ; SOURCE LINE # 856
                                           ; SOURCE LINE # 857
002A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
002C E6                MOV     A,@R0
002D 2400        E     ADD     A,#LOW AuxFlags
002F F8                MOV     R0,A
0030 7401              MOV     A,#01H
0032 46                ORL     A,@R0
0033 F6                MOV     @R0,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 71  

                                           ; SOURCE LINE # 859
0034 E4                CLR     A
0035 900000      R     MOV     DPTR,#timeout
0038 F0                MOVX    @DPTR,A
0039         ?C0191:
                                           ; SOURCE LINE # 860
                                           ; SOURCE LINE # 861
0039 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
003B E6                MOV     A,@R0
003C 75F00D            MOV     B,#0DH
003F A4                MUL     AB
0040 2400        R     ADD     A,#LOW asPS2Struct
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        R     ADDC    A,#HIGH asPS2Struct
0047 F583              MOV     DPH,A
0049 E4                CLR     A
004A 93                MOVC    A,@A+DPTR
004B FE                MOV     R6,A
004C 7401              MOV     A,#01H
004E 93                MOVC    A,@A+DPTR
004F F582              MOV     DPL,A
0051 8E83              MOV     DPH,R6
0053 7417              MOV     A,#017H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
0056 E6                MOV     A,@R0
0057 FF                MOV     R7,A
0058 120000      R     LCALL   _bExtAUXTimeOutCheck
005B EF                MOV     A,R7
005C 600C              JZ      ?C0192
                                           ; SOURCE LINE # 863
                                           ; SOURCE LINE # 864
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
005E         ?C0193:
005E 900000      R     MOV     DPTR,#timeout
0061 E0                MOVX    A,@DPTR
0062 04                INC     A
0063 F0                MOVX    @DPTR,A
0064 E0                MOVX    A,@DPTR
0065 D3                SETB    C
0066 9414              SUBB    A,#014H
0068 40CF              JC      ?C0191
006A         ?C0192:
                                           ; SOURCE LINE # 868
006A 900000      R     MOV     DPTR,#timeout
006D E0                MOVX    A,@DPTR
006E D3                SETB    C
006F 9414              SUBB    A,#014H
0071 5050              JNC     ?C0197
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0073         ?C0195:
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
0073 E4                CLR     A
0074 900000      R     MOV     DPTR,#timeout
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 72  

0077 F0                MOVX    @DPTR,A
0078         ?C0198:
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0078 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007A E6                MOV     A,@R0
007B 75F00D            MOV     B,#0DH
007E A4                MUL     AB
007F 2400        R     ADD     A,#LOW asPS2Struct
0081 F582              MOV     DPL,A
0083 E4                CLR     A
0084 3400        R     ADDC    A,#HIGH asPS2Struct
0086 F583              MOV     DPH,A
0088 E4                CLR     A
0089 93                MOVC    A,@A+DPTR
008A FE                MOV     R6,A
008B 7401              MOV     A,#01H
008D 93                MOVC    A,@A+DPTR
008E F582              MOV     DPL,A
0090 8E83              MOV     DPH,R6
0092 7417              MOV     A,#017H
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
0095 E6                MOV     A,@R0
0096 FF                MOV     R7,A
0097 120000      R     LCALL   _bExtAUXTimeOutCheck
009A EF                MOV     A,R7
009B 600C              JZ      ?C0199
                                           ; SOURCE LINE # 881
                                           ; SOURCE LINE # 882
                                           ; SOURCE LINE # 883
                                           ; SOURCE LINE # 884
009D         ?C0200:
009D 900000      R     MOV     DPTR,#timeout
00A0 E0                MOVX    A,@DPTR
00A1 04                INC     A
00A2 F0                MOVX    @DPTR,A
00A3 E0                MOVX    A,@DPTR
00A4 D3                SETB    C
00A5 940A              SUBB    A,#0AH
00A7 40CF              JC      ?C0198
00A9         ?C0199:
                                           ; SOURCE LINE # 886
00A9 900000      R     MOV     DPTR,#timeout
00AC E0                MOVX    A,@DPTR
00AD D3                SETB    C
00AE 940A              SUBB    A,#0AH
00B0 4002              JC      ?C0205
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
                                           ; SOURCE LINE # 891
00B2 800A              SJMP    ?C0501
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 895
                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 901
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 73  

                                           ; SOURCE LINE # 902
00B4         ?C0205:
                                           ; SOURCE LINE # 904
00B4 7800        E     MOV     R0,#LOW PS2IFAck
00B6 E6                MOV     A,@R0
00B7 7005              JNZ     ?C0206
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 906
00B9 120000      R     LCALL   ReadDeviceID
                                           ; SOURCE LINE # 907
00BC 8005              SJMP    ?C0197
00BE         ?C0206:
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
00BE         ?C0501:
00BE 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
                                           ; SOURCE LINE # 911
00C0 120000      R     LCALL   L?0523
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 914
                                           ; SOURCE LINE # 915
                                           ; SOURCE LINE # 916
                                           ; SOURCE LINE # 917
                                           ; SOURCE LINE # 918
                                           ; SOURCE LINE # 919
00C3         ?C0197:
                                           ; SOURCE LINE # 920
00C3 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00C5 E6                MOV     A,@R0
00C6 2400        E     ADD     A,#LOW AuxFlags
00C8 F8                MOV     R0,A
00C9 7408              MOV     A,#08H
00CB 46                ORL     A,@R0
00CC F6                MOV     @R0,A
                                           ; SOURCE LINE # 921
00CD 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00CF E6                MOV     A,@R0
00D0 24C0              ADD     A,#0C0H
                                           ; SOURCE LINE # 922
00D2 8009              SJMP    ?C0502
                                           ; SOURCE LINE # 924
                                           ; SOURCE LINE # 925
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
00D4         ?C0210:
                                           ; SOURCE LINE # 929
00D4 E4                CLR     A
00D5 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
00D7 F6                MOV     @R0,A
                                           ; SOURCE LINE # 930
00D8 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
00DA E6                MOV     A,@R0
00DB 24C8              ADD     A,#0C8H
00DD         ?C0502:
00DD 7900        E     MOV     R1,#LOW ScanAUXStepIndex
00DF F7                MOV     @R1,A
                                           ; SOURCE LINE # 931
00E0         ?C0209:
                                           ; SOURCE LINE # 932
00E0 120000      R     LCALL   PS2Deviceactive
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 74  

                                           ; SOURCE LINE # 933
                                           ; SOURCE LINE # 934
00E3         ?C0211:
00E3 22                RET     
             ; FUNCTION CheckAUXDeviceType (END)

             ; FUNCTION PollingAUXDeviceCenter (BEGIN)
                                           ; SOURCE LINE # 939
;---- Variable 'index' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 943
0000 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0002 E6                MOV     A,@R0
0003 6002              JZ      ?C0212
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 945
0005 16                DEC     @R0
                                           ; SOURCE LINE # 946
0006 22                RET     
0007         ?C0212:
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
0007 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0009 E6                MOV     A,@R0
000A F4                CPL     A
000B 6016              JZ      ?C0214
                                           ; SOURCE LINE # 950
                                           ; SOURCE LINE # 951
000D 76FF              MOV     @R0,#0FFH
                                           ; SOURCE LINE # 952
000F 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0011 06                INC     @R0
                                           ; SOURCE LINE # 953
0012 E6                MOV     A,@R0
0013 D3                SETB    C
0014 9402              SUBB    A,#02H
0016 4002              JC      ?C0215
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 955
0018 E4                CLR     A
0019 F6                MOV     @R0,A
                                           ; SOURCE LINE # 956
001A         ?C0215:
                                           ; SOURCE LINE # 957
001A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
001C E6                MOV     A,@R0
001D 24F0              ADD     A,#0F0H
001F 7900        E     MOV     R1,#LOW ScanAUXStepIndex
0021 F7                MOV     @R1,A
                                           ; SOURCE LINE # 958
0022 22                RET     
0023         ?C0214:
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0023 200003      E     JB      ECSendtoAUXFlag,$ + 6H
0026 020000      R     LJMP    ?C0229
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 963
0029 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
002B 06                INC     @R0
                                           ; SOURCE LINE # 964
002C E6                MOV     A,@R0
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 75  

002D C3                CLR     C
002E 9404              SUBB    A,#04H
0030 5003              JNC     $ + 5H
0032 020000      R     LJMP    ?C0229
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
0035 E4                CLR     A
0036 F6                MOV     @R0,A
                                           ; SOURCE LINE # 967
0037 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0039 F6                MOV     @R0,A
                                           ; SOURCE LINE # 968
003A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
003C E6                MOV     A,@R0
003D 2400        E     ADD     A,#LOW AuxFlags
003F F8                MOV     R0,A
0040 E4                CLR     A
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 969
0042 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0044 E6                MOV     A,@R0
0045 2400        E     ADD     A,#LOW AuxFlags2
0047 F8                MOV     R0,A
0048 E4                CLR     A
0049 F6                MOV     @R0,A
                                           ; SOURCE LINE # 970
004A F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 971
004C C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 972
004E C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 974
0050 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0052 E6                MOV     A,@R0
0053 2401              ADD     A,#01H
0055 FF                MOV     R7,A
0056 E4                CLR     A
0057 33                RLC     A
0058 FE                MOV     R6,A
0059 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
005B E6                MOV     A,@R0
005C 6F                XRL     A,R7
005D 7001              JNZ     ?C0485
005F EE                MOV     A,R6
0060         ?C0485:
0060 701E              JNZ     ?C0219
                                           ; SOURCE LINE # 975
                                           ; SOURCE LINE # 976
0062 F6                MOV     @R0,A
                                           ; SOURCE LINE # 977
0063 FB                MOV     R3,A
0064         ?C0220:
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 979
0064 7400        E     MOV     A,#LOW AuxFlags
0066 2B                ADD     A,R3
0067 F8                MOV     R0,A
0068 E6                MOV     A,@R0
0069 30E70F            JNB     ACC.7,?C0222
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 981
006C 7400        E     MOV     A,#LOW AuxFlags
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 76  

006E 2B                ADD     A,R3
006F F8                MOV     R0,A
0070 7420              MOV     A,#020H
0072 46                ORL     A,@R0
0073 F6                MOV     @R0,A
                                           ; SOURCE LINE # 982
0074 EB                MOV     A,R3
0075 04                INC     A
0076 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0078 F6                MOV     @R0,A
                                           ; SOURCE LINE # 983
0079 8005              SJMP    ?C0219
                                           ; SOURCE LINE # 984
                                           ; SOURCE LINE # 985
007B         ?C0222:
007B 0B                INC     R3
007C EB                MOV     A,R3
007D B403E4            CJNE    A,#03H,?C0220
                                           ; SOURCE LINE # 986
0080         ?C0219:
                                           ; SOURCE LINE # 988
0080 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0082 E6                MOV     A,@R0
0083 2401              ADD     A,#01H
0085 FF                MOV     R7,A
0086 E4                CLR     A
0087 33                RLC     A
0088 FE                MOV     R6,A
0089 7800        E     MOV     R0,#LOW Main_KB_CHN
008B E6                MOV     A,@R0
008C 6F                XRL     A,R7
008D 7001              JNZ     ?C0486
008F EE                MOV     A,R6
0090         ?C0486:
0090 701E              JNZ     ?C0224
                                           ; SOURCE LINE # 989
                                           ; SOURCE LINE # 990
0092 F6                MOV     @R0,A
                                           ; SOURCE LINE # 991
0093 FB                MOV     R3,A
0094         ?C0225:
                                           ; SOURCE LINE # 992
                                           ; SOURCE LINE # 993
0094 7400        E     MOV     A,#LOW AuxFlags
0096 2B                ADD     A,R3
0097 F8                MOV     R0,A
0098 E6                MOV     A,@R0
0099 30E60F            JNB     ACC.6,?C0227
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 995
009C 7400        E     MOV     A,#LOW AuxFlags
009E 2B                ADD     A,R3
009F F8                MOV     R0,A
00A0 7410              MOV     A,#010H
00A2 46                ORL     A,@R0
00A3 F6                MOV     @R0,A
                                           ; SOURCE LINE # 996
00A4 EB                MOV     A,R3
00A5 04                INC     A
00A6 7800        E     MOV     R0,#LOW Main_KB_CHN
00A8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 997
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 77  

00A9 8005              SJMP    ?C0224
                                           ; SOURCE LINE # 998
                                           ; SOURCE LINE # 999
00AB         ?C0227:
00AB 0B                INC     R3
00AC EB                MOV     A,R3
00AD B403E4            CJNE    A,#03H,?C0225
                                           ; SOURCE LINE # 1000
00B0         ?C0224:
                                           ; SOURCE LINE # 1001
00B0 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1002
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
                                           ; SOURCE LINE # 1006
00B3         ?C0229:
00B3 22                RET     
             ; FUNCTION PollingAUXDeviceCenter (END)

             ; FUNCTION _UpdateExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1013
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1014
                                           ; SOURCE LINE # 1017
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0230:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D C3                CLR     C
000E 9404              SUBB    A,#04H
0010 4003              JC      $ + 5H
0012 020000      R     LJMP    ?C0238
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1019
0015 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0017 E6                MOV     A,@R0
0018 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
001A F8                MOV     R0,A
001B E6                MOV     A,@R0
001C FD                MOV     R5,A
001D 7C00              MOV     R4,#00H
001F 7401              MOV     A,#01H
0021 7E00              MOV     R6,#00H
0023 A807              MOV     R0,AR7
0025 08                INC     R0
0026 8005              SJMP    ?C0488
0028         ?C0487:
0028 C3                CLR     C
0029 33                RLC     A
002A CE                XCH     A,R6
002B 33                RLC     A
002C CE                XCH     A,R6
002D         ?C0488:
002D D8F9              DJNZ    R0,?C0487
002F FF                MOV     R7,A
0030 EE                MOV     A,R6
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 78  

0031 5C                ANL     A,R4
0032 FE                MOV     R6,A
0033 EF                MOV     A,R7
0034 5D                ANL     A,R5
0035 4E                ORL     A,R6
0036 605C              JZ      ?C0232
                                           ; SOURCE LINE # 1020
                                           ; SOURCE LINE # 1021
0038 900000      R     MOV     DPTR,#portnum
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0042 93                MOVC    A,@A+DPTR
0043 FD                MOV     R5,A
0044 7B01              MOV     R3,#01H
0046 120000      R     LCALL   _Send2PortNWait
0049 EF                MOV     A,R7
004A 7048              JNZ     ?C0232
                                           ; SOURCE LINE # 1022
                                           ; SOURCE LINE # 1023
004C 900000      R     MOV     DPTR,#index
004F E0                MOVX    A,@DPTR
0050 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0053 93                MOVC    A,@A+DPTR
0054 B4F30A            CJNE    A,#0F3H,?C0235
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
0057 900000      R     MOV     DPTR,#portnum
005A E0                MOVX    A,@DPTR
005B FF                MOV     R7,A
005C 7800        E     MOV     R0,#LOW Save_Typematic
005E E6                MOV     A,@R0
                                           ; SOURCE LINE # 1026
005F 8014              SJMP    ?C0503
0061         ?C0235:
                                           ; SOURCE LINE # 1027
0061 900000      R     MOV     DPTR,#index
0064 E0                MOVX    A,@DPTR
0065 900000      R     MOV     DPTR,#UpdateConfigAUXKB
0068 93                MOVC    A,@A+DPTR
0069 B4ED0F            CJNE    A,#0EDH,?C0236
                                           ; SOURCE LINE # 1028
                                           ; SOURCE LINE # 1029
006C 900000      R     MOV     DPTR,#portnum
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 E500        E     MOV     A,Led_Data
0073 5407              ANL     A,#07H
0075         ?C0503:
0075 FD                MOV     R5,A
0076 7B01              MOV     R3,#01H
0078 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1030
007B         ?C0236:
                                           ; SOURCE LINE # 1031
007B 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007D E6                MOV     A,@R0
007E 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
0080 F9                MOV     R1,A
0081 900000      R     MOV     DPTR,#index
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 79  

0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
0086 7401              MOV     A,#01H
0088 A807              MOV     R0,AR7
008A 08                INC     R0
008B 8002              SJMP    ?C0490
008D         ?C0489:
008D C3                CLR     C
008E 33                RLC     A
008F         ?C0490:
008F D8FC              DJNZ    R0,?C0489
0091 F4                CPL     A
0092 57                ANL     A,@R1
0093 F7                MOV     @R1,A
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1034
0094         ?C0232:
0094 900000      R     MOV     DPTR,#index
0097 E0                MOVX    A,@DPTR
0098 04                INC     A
0099 F0                MOVX    @DPTR,A
009A 020000      R     LJMP    ?C0230
                                           ; SOURCE LINE # 1035
009D         ?C0238:
009D 22                RET     
             ; FUNCTION _UpdateExtKeyboard (END)

             ; FUNCTION UpdateAUXKBDevice (BEGIN)
                                           ; SOURCE LINE # 1040
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1043
0007 E4                CLR     A
0008 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
000A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1044
000B 22                RET     
             ; FUNCTION UpdateAUXKBDevice (END)

             ; FUNCTION InitAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
                                           ; SOURCE LINE # 1052
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0002 E6                MOV     A,@R0
0003 2400        E     ADD     A,#LOW AuxFlags
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E61F            JNB     ACC.6,?C0240
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
000A 200003      E     JB      KeyboardDriverIn,$ + 6H
000D 020000      R     LJMP    ?C0245
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
0010 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0012 E6                MOV     A,@R0
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 80  

0013 2400        E     ADD     A,#LOW AuxFlags_KB_CMD
0015 F8                MOV     R0,A
0016 E6                MOV     A,@R0
0017 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0019 7007              JNZ     ?C0242
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
001B E6                MOV     A,@R0
001C FF                MOV     R7,A
001D 120000      R     LCALL   _ConfigExtKeyboard
                                           ; SOURCE LINE # 1059
0020 8054              SJMP    ?C0505
0022         ?C0242:
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
0022 E6                MOV     A,@R0
0023 FF                MOV     R7,A
0024 120000      R     LCALL   _UpdateExtKeyboard
                                           ; SOURCE LINE # 1063
0027         ?C0243:
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
0027 804D              SJMP    ?C0505
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
0029         ?C0240:
                                           ; SOURCE LINE # 1072
                                           ; SOURCE LINE # 1073
0029 300058      E     JNB     MouseDriverIn,?C0246
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
002C 300014      E     JNB     MULPX_Multiplex,?C0247
                                           ; SOURCE LINE # 1076
                                           ; SOURCE LINE # 1077
002F 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0031 E6                MOV     A,@R0
0032 FD                MOV     R5,A
0033 7FAA              MOV     R7,#0AAH
0035 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1078
0038 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
003A E6                MOV     A,@R0
003B FD                MOV     R5,A
003C E4                CLR     A
003D FF                MOV     R7,A
003E 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1079
0041         ?C0504:
                                           ; SOURCE LINE # 1080
0041 8033              SJMP    ?C0505
0043         ?C0247:
                                           ; SOURCE LINE # 1082
                                           ; SOURCE LINE # 1083
0043 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
0045 E6                MOV     A,@R0
0046 FF                MOV     R7,A
0047 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0049 E6                MOV     A,@R0
004A FD                MOV     R5,A
004B 120000      R     LCALL   _vSetIntellimouse
004E EF                MOV     A,R7
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 81  

004F 6029              JZ      ?C0249
                                           ; SOURCE LINE # 1084
                                           ; SOURCE LINE # 1085
0051 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0053 E6                MOV     A,@R0
0054 FF                MOV     R7,A
0055 120000      R     LCALL   _ReadMouseID
0058 7800        E     MOV     R0,#LOW MS_DRIVER_TYPE
005A E6                MOV     A,@R0
005B 6F                XRL     A,R7
005C 700E              JNZ     ?C0250
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
005E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0060 E6                MOV     A,@R0
0061 FF                MOV     R7,A
0062 120000      R     LCALL   _ConfigExtMouse
0065 EF                MOV     A,R7
0066 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0068 6012              JZ      ?C0507
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1089
                                           ; SOURCE LINE # 1090
006A 802F              SJMP    ?C0508
006C         ?C0250:
                                           ; SOURCE LINE # 1097
                                           ; SOURCE LINE # 1098
006C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
006E E6                MOV     A,@R0
006F 2400        E     ADD     A,#LOW AuxFlags
0071 F8                MOV     R0,A
0072 7404              MOV     A,#04H
0074 46                ORL     A,@R0
0075 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1099
0076         ?C0505:
0076 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0078         ?C0506:
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
0078 8021              SJMP    ?C0508
007A         ?C0249:
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1104
007A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
007C         ?C0507:
007C E6                MOV     A,@R0
007D 2400        E     ADD     A,#LOW AuxFlags
007F F8                MOV     R0,A
0080 E4                CLR     A
0081 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1105
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
0082 801F              SJMP    ?C0245
0084         ?C0246:
                                           ; SOURCE LINE # 1109
                                           ; SOURCE LINE # 1110
0084 30001C      E     JNB     MULPX_Multiplex,?C0245
                                           ; SOURCE LINE # 1111
                                           ; SOURCE LINE # 1112
0087 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 82  

0089 E6                MOV     A,@R0
008A FD                MOV     R5,A
008B 7FAA              MOV     R7,#0AAH
008D 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1113
0090 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0092 E6                MOV     A,@R0
0093 FD                MOV     R5,A
0094 E4                CLR     A
0095 FF                MOV     R7,A
0096 120000      R     LCALL   _AUXData_To_Host_nWait
                                           ; SOURCE LINE # 1114
0099 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
009B         ?C0508:
009B E6                MOV     A,@R0
009C 2400        E     ADD     A,#LOW AuxFlags
009E F8                MOV     R0,A
009F 74F7              MOV     A,#0F7H
00A1 56                ANL     A,@R0
00A2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
                                           ; SOURCE LINE # 1117
00A3         ?C0245:
                                           ; SOURCE LINE # 1118
00A3 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1119
00A6 E4                CLR     A
00A7 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
00A9 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1120
00AA 22                RET     
             ; FUNCTION InitAUXDevice (END)

             ; FUNCTION TPOnly_CheckOnOffTP (BEGIN)
                                           ; SOURCE LINE # 1126
                                           ; SOURCE LINE # 1127
                                           ; SOURCE LINE # 1130
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#index
0004 F0                MOVX    @DPTR,A
0005         ?C0258:
0005 900000      R     MOV     DPTR,#index
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9403              SUBB    A,#03H
000D 4003              JC      $ + 5H
000F 020000      R     LJMP    ?C0270
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1132
0012 7400        E     MOV     A,#LOW AuxFlags2
0014 2F                ADD     A,R7
0015 F8                MOV     R0,A
0016 E6                MOV     A,@R0
0017 30E029            JNB     ACC.0,?C0261
                                           ; SOURCE LINE # 1133
                                           ; SOURCE LINE # 1134
001A 7B01              MOV     R3,#01H
001C 7DF5              MOV     R5,#0F5H
001E 120000      R     LCALL   _Send2PortNWait
0021 EF                MOV     A,R7
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 83  

0022 7014              JNZ     ?C0262
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
0024 900000      R     MOV     DPTR,#index
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 2400        E     ADD     A,#LOW AuxFlags2
002B F8                MOV     R0,A
002C E4                CLR     A
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1137
002E 7400        E     MOV     A,#LOW AuxFlags2
0030 2F                ADD     A,R7
0031 F8                MOV     R0,A
0032 7402              MOV     A,#02H
0034 46                ORL     A,@R0
0035 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1138
0036 806E              SJMP    ?C0260
0038         ?C0262:
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
0038 0500        E     INC     PS2_ReTryCunt
                                           ; SOURCE LINE # 1142
003A E500        E     MOV     A,PS2_ReTryCunt
003C D3                SETB    C
003D 9405              SUBB    A,#05H
003F 4065              JC      ?C0260
                                           ; SOURCE LINE # 1143
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
                                           ; SOURCE LINE # 1149
0041 804E              SJMP    ?C0509
0043         ?C0261:
                                           ; SOURCE LINE # 1150
0043 900000      R     MOV     DPTR,#index
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 2400        E     ADD     A,#LOW AuxFlags2
004A F8                MOV     R0,A
004B E6                MOV     A,@R0
004C 30E457            JNB     ACC.4,?C0260
                                           ; SOURCE LINE # 1151
                                           ; SOURCE LINE # 1152
004F 7B01              MOV     R3,#01H
0051 7DF4              MOV     R5,#0F4H
0053 120000      R     LCALL   _Send2PortNWait
0056 EF                MOV     A,R7
0057 702F              JNZ     ?C0267
                                           ; SOURCE LINE # 1153
                                           ; SOURCE LINE # 1154
0059 900000      R     MOV     DPTR,#index
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 2400        E     ADD     A,#LOW AuxFlags2
0060 F8                MOV     R0,A
0061 E4                CLR     A
0062 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1155
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 84  

0063 7400        E     MOV     A,#LOW AuxFlags2
0065 2F                ADD     A,R7
0066 F8                MOV     R0,A
0067 7420              MOV     A,#020H
0069 46                ORL     A,@R0
006A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1156
006B E0                MOVX    A,@DPTR
006C 75F00D            MOV     B,#0DH
006F A4                MUL     AB
0070 2400        R     ADD     A,#LOW asPS2Struct
0072 F582              MOV     DPL,A
0074 E4                CLR     A
0075 3400        R     ADDC    A,#HIGH asPS2Struct
0077 F583              MOV     DPH,A
0079 E4                CLR     A
007A 93                MOVC    A,@A+DPTR
007B FE                MOV     R6,A
007C 7401              MOV     A,#01H
007E 93                MOVC    A,@A+DPTR
007F F582              MOV     DPL,A
0081 8E83              MOV     DPH,R6
0083 7417              MOV     A,#017H
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
0086 801E              SJMP    ?C0260
0088         ?C0267:
                                           ; SOURCE LINE # 1159
                                           ; SOURCE LINE # 1160
0088 0500        E     INC     PS2_ReTryCunt
                                           ; SOURCE LINE # 1161
008A E500        E     MOV     A,PS2_ReTryCunt
008C D3                SETB    C
008D 9405              SUBB    A,#05H
008F 4015              JC      ?C0260
                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
0091         ?C0509:
0091 E4                CLR     A
0092 F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 1164
0094 900000      R     MOV     DPTR,#index
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 2400        E     ADD     A,#LOW AuxFlags2
009B F8                MOV     R0,A
009C E4                CLR     A
009D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1165
009E 7400        E     MOV     A,#LOW AuxFlags2
00A0 2F                ADD     A,R7
00A1 F8                MOV     R0,A
00A2 7404              MOV     A,#04H
00A4 46                ORL     A,@R0
00A5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1166
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
00A6         ?C0260:
00A6 900000      R     MOV     DPTR,#index
00A9 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 85  

00AA 04                INC     A
00AB F0                MOVX    @DPTR,A
00AC 020000      R     LJMP    ?C0258
                                           ; SOURCE LINE # 1170
00AF         ?C0270:
00AF 22                RET     
             ; FUNCTION TPOnly_CheckOnOffTP (END)

             ; FUNCTION ScanAUXDeviceStep (BEGIN)
                                           ; SOURCE LINE # 1175
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1193
0000 30002A      E     JNB     StartENAUXDevice,?C0271
                                           ; SOURCE LINE # 1194
                                           ; SOURCE LINE # 1195
0003 C200        E     CLR     StartENAUXDevice
                                           ; SOURCE LINE # 1196
0005 120000      R     LCALL   EnableAUXDevice
                                           ; SOURCE LINE # 1197
0008 901708            MOV     DPTR,#01708H
000B E0                MOVX    A,@DPTR
000C 20E20A            JB      ACC.2,?C0273
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 20E205            JB      ACC.2,?C0273
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 30E210            JNB     ACC.2,?C0272
0019         ?C0273:
                                           ; SOURCE LINE # 1198
                                           ; SOURCE LINE # 1199
0019 7800        E     MOV     R0,#LOW AuxScanWDT
001B 06                INC     @R0
                                           ; SOURCE LINE # 1200
001C E6                MOV     A,@R0
001D D3                SETB    C
001E 94FA              SUBB    A,#0FAH
0020 400B              JC      ?C0271
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
0022 E4                CLR     A
0023 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1203
0024 120000      R     LCALL   ScanAUXPortX
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
0027 8004              SJMP    ?C0271
0029         ?C0272:
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
0029 E4                CLR     A
002A 7800        E     MOV     R0,#LOW AuxScanWDT
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1209
                                           ; SOURCE LINE # 1210
002D         ?C0271:
                                           ; SOURCE LINE # 1212
002D 901708            MOV     DPTR,#01708H
0030 E0                MOVX    A,@DPTR
0031 30E30A            JNB     ACC.3,?C0276
0034 901102            MOV     DPTR,#01102H
0037 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 86  

0038 30E403            JNB     ACC.4,?C0276
                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
003B 120000      R     LCALL   ISR_Aux_Port1
                                           ; SOURCE LINE # 1215
003E         ?C0276:
                                           ; SOURCE LINE # 1216
003E 901709            MOV     DPTR,#01709H
0041 E0                MOVX    A,@DPTR
0042 30E30A            JNB     ACC.3,?C0277
0045 901102            MOV     DPTR,#01102H
0048 E0                MOVX    A,@DPTR
0049 30E303            JNB     ACC.3,?C0277
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
004C 120000      R     LCALL   ISR_Aux_Port2
                                           ; SOURCE LINE # 1219
004F         ?C0277:
                                           ; SOURCE LINE # 1220
004F 90170A            MOV     DPTR,#0170AH
0052 E0                MOVX    A,@DPTR
0053 30E30A            JNB     ACC.3,?C0278
0056 901102            MOV     DPTR,#01102H
0059 E0                MOVX    A,@DPTR
005A 30E203            JNB     ACC.2,?C0278
                                           ; SOURCE LINE # 1221
                                           ; SOURCE LINE # 1222
005D 120000      R     LCALL   ISR_Aux_Port3
                                           ; SOURCE LINE # 1223
0060         ?C0278:
                                           ; SOURCE LINE # 1224
0060 E500        E     MOV     A,Service
0062 7069              JNZ     ?C0281
0064 E500        E     MOV     A,Service1
0066 7065              JNZ     ?C0281
                                           ; SOURCE LINE # 1225
                                           ; SOURCE LINE # 1227
0068         ?C0279:
                                           ; SOURCE LINE # 1229
0068 901708            MOV     DPTR,#01708H
006B E0                MOVX    A,@DPTR
006C 20E25E            JB      ACC.2,?C0281
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 20E259            JB      ACC.2,?C0281
0074 A3                INC     DPTR
0075 E0                MOVX    A,@DPTR
0076 20E254            JB      ACC.2,?C0281
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1232
0079         ?C0282:
                                           ; SOURCE LINE # 1234
0079 300005      E     JNB     StartScanAUXDevice,?C0284
                                           ; SOURCE LINE # 1235
                                           ; SOURCE LINE # 1236
007C C200        E     CLR     StartScanAUXDevice
                                           ; SOURCE LINE # 1237
007E 120000      R     LCALL   PollingAUXDeviceCenter
                                           ; SOURCE LINE # 1238
0081         ?C0284:
                                           ; SOURCE LINE # 1240
0081 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 87  

0083 E6                MOV     A,@R0
0084 7047              JNZ     ?C0281
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1243
0086         ?C0285:
                                           ; SOURCE LINE # 1245
0086 900000      E     MOV     DPTR,#MSPendingRXCount
0089 E0                MOVX    A,@DPTR
008A 6433              XRL     A,#033H
008C 603F              JZ      ?C0281
                                           ; SOURCE LINE # 1246
                                           ; SOURCE LINE # 1248
008E         ?C0286:
                                           ; SOURCE LINE # 1250
008E 7800        E     MOV     R0,#LOW ScanAUXStepIndex
0090 E6                MOV     A,@R0
0091 120000      E     LCALL   ?C?CCASE
0094 0000        R     DW      ?C0300
0096 A0                DB      0A0H
0097 0000        R     DW      ?C0300
0099 A1                DB      0A1H
009A 0000        R     DW      ?C0300
009C A2                DB      0A2H
009D 0000        R     DW      ?C0294
009F B0                DB      0B0H
00A0 0000        R     DW      ?C0294
00A2 B1                DB      0B1H
00A3 0000        R     DW      ?C0294
00A5 B2                DB      0B2H
00A6 0000        R     DW      ?C0297
00A8 C0                DB      0C0H
00A9 0000        R     DW      ?C0297
00AB C1                DB      0C1H
00AC 0000        R     DW      ?C0297
00AE C2                DB      0C2H
00AF 0000        R     DW      ?C0290
00B1 F0                DB      0F0H
00B2 0000        R     DW      ?C0290
00B4 F1                DB      0F1H
00B5 0000        R     DW      ?C0290
00B7 F2                DB      0F2H
00B8 0000              DW      00H
00BA 0000        R     DW      ?C0281
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
00BC         ?C0290:
                                           ; SOURCE LINE # 1255
00BC 7800        E     MOV     R0,#LOW AUXInactiveCounter
00BE E6                MOV     A,@R0
00BF 700C              JNZ     ?C0281
                                           ; SOURCE LINE # 1256
                                           ; SOURCE LINE # 1257
00C1 020000      R     LJMP    ScanAUXPortX
                                           ; SOURCE LINE # 1258
                                           ; SOURCE LINE # 1259
                                           ; SOURCE LINE # 1261
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
00C4         ?C0294:
                                           ; SOURCE LINE # 1264
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 88  

00C4 020000      R     LJMP    CheckAUXDeviceType
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1267
                                           ; SOURCE LINE # 1268
                                           ; SOURCE LINE # 1269
00C7         ?C0297:
                                           ; SOURCE LINE # 1270
00C7 020000      R     LJMP    InitAUXDevice
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1275
00CA         ?C0300:
                                           ; SOURCE LINE # 1276
00CA 120000      R     LCALL   UpdateAUXKBDevice
                                           ; SOURCE LINE # 1277
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1297
                                           ; SOURCE LINE # 1299
00CD         ?C0281:
00CD 22                RET     
             ; FUNCTION ScanAUXDeviceStep (END)

             ; FUNCTION ScanAUXPortX (BEGIN)
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1306
0000 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
0002 E6                MOV     A,@R0
0003 F4                CPL     A
0004 6003              JZ      $ + 5H
0006 020000      R     LJMP    ?C0332
                                           ; SOURCE LINE # 1307
                                           ; SOURCE LINE # 1308
0009 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000B E6                MOV     A,@R0
000C 7010              JNZ     ?C0315
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
000E 901638            MOV     DPTR,#01638H
0011 E0                MOVX    A,@DPTR
0012 54FB              ANL     A,#0FBH
0014 7032              JNZ     ?C0511
0016 A3                INC     DPTR
0017 E0                MOVX    A,@DPTR
0018 54FB              ANL     A,#0FBH
001A 6030              JZ      ?C0318
001C         ?C0317:
                                           ; SOURCE LINE # 1311
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 89  

                                           ; SOURCE LINE # 1312
                                           ; SOURCE LINE # 1313
                                           ; SOURCE LINE # 1314
001C 802A              SJMP    ?C0511
001E         ?C0315:
                                           ; SOURCE LINE # 1315
001E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0020 E6                MOV     A,@R0
0021 B40110            CJNE    A,#01H,?C0319
                                           ; SOURCE LINE # 1316
                                           ; SOURCE LINE # 1317
0024 90163A            MOV     DPTR,#0163AH
0027 E0                MOVX    A,@DPTR
0028 54FB              ANL     A,#0FBH
002A 7006              JNZ     ?C0321
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E 54FB              ANL     A,#0FBH
0030 601A              JZ      ?C0318
0032         ?C0321:
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1319
0032         ?C0510:
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
0032 8014              SJMP    ?C0511
0034         ?C0319:
                                           ; SOURCE LINE # 1322
0034 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0036 E6                MOV     A,@R0
0037 B40212            CJNE    A,#02H,?C0318
                                           ; SOURCE LINE # 1323
                                           ; SOURCE LINE # 1324
003A 90163C            MOV     DPTR,#0163CH
003D E0                MOVX    A,@DPTR
003E 54FB              ANL     A,#0FBH
0040 7006              JNZ     ?C0325
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 54FB              ANL     A,#0FBH
0046 6004              JZ      ?C0318
0048         ?C0325:
                                           ; SOURCE LINE # 1325
                                           ; SOURCE LINE # 1326
0048         ?C0511:
0048 E4                CLR     A
0049 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
004B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1327
                                           ; SOURCE LINE # 1328
004C         ?C0318:
                                           ; SOURCE LINE # 1330
004C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
004E E6                MOV     A,@R0
004F 7007              JNZ     ?C0326
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
0051 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0053 E6                MOV     A,@R0
0054 24D0              ADD     A,#0D0H
                                           ; SOURCE LINE # 1333
0056 8034              SJMP    ?C0512
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 90  

0058         ?C0326:
                                           ; SOURCE LINE # 1335
                                           ; SOURCE LINE # 1336
0058 E4                CLR     A
0059 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
005B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1337
005C 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
005E E6                MOV     A,@R0
005F 2400        E     ADD     A,#LOW AuxFlags2
0061 F8                MOV     R0,A
0062 E6                MOV     A,@R0
0063 30E008            JNB     ACC.0,?C0328
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1339
0066 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0068 E6                MOV     A,@R0
0069 FF                MOV     R7,A
006A 7DF5              MOV     R5,#0F5H
                                           ; SOURCE LINE # 1340
006C 8016              SJMP    ?C0514
006E         ?C0328:
                                           ; SOURCE LINE # 1341
006E 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0070 E6                MOV     A,@R0
0071 2400        E     ADD     A,#LOW AuxFlags2
0073 F8                MOV     R0,A
0074 E6                MOV     A,@R0
0075 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0077 30E406            JNB     ACC.4,?C0330
                                           ; SOURCE LINE # 1342
                                           ; SOURCE LINE # 1343
007A E6                MOV     A,@R0
007B FF                MOV     R7,A
007C 7DF4              MOV     R5,#0F4H
007E         ?C0513:
                                           ; SOURCE LINE # 1344
007E 8004              SJMP    ?C0514
0080         ?C0330:
                                           ; SOURCE LINE # 1346
                                           ; SOURCE LINE # 1347
0080 E6                MOV     A,@R0
0081 FF                MOV     R7,A
0082 7DF1              MOV     R5,#0F1H
0084         ?C0514:
0084 120000      R     LCALL   _ECSend2Port
                                           ; SOURCE LINE # 1348
0087         ?C0329:
                                           ; SOURCE LINE # 1349
0087 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
0089 E6                MOV     A,@R0
008A 24E0              ADD     A,#0E0H
008C         ?C0512:
008C 7900        E     MOV     R1,#LOW ScanAUXStepIndex
008E F7                MOV     @R1,A
                                           ; SOURCE LINE # 1350
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1352
008F         ?C0332:
008F 22                RET     
             ; FUNCTION ScanAUXPortX (END)

C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 91  

             ; FUNCTION EnableAUXDevice (BEGIN)
                                           ; SOURCE LINE # 1357
                                           ; SOURCE LINE # 1358
                                           ; SOURCE LINE # 1359
0000 7800        E     MOV     R0,#LOW AUXInactiveCounter
0002 E6                MOV     A,@R0
0003 6007              JZ      ?C0335
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1361
0005 16                DEC     @R0
                                           ; SOURCE LINE # 1362
0006 E6                MOV     A,@R0
0007 7003              JNZ     ?C0335
                                           ; SOURCE LINE # 1363
                                           ; SOURCE LINE # 1364
0009 120000      R     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 1365
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1367
000C         ?C0335:
000C 22                RET     
             ; FUNCTION EnableAUXDevice (END)

             ; FUNCTION L?0520 (BEGIN)
0000 900000      R     MOV     DPTR,#index
0003         L?0521:
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 75F00D            MOV     B,#0DH
0008 A4                MUL     AB
0009 2400        R     ADD     A,#LOW asPS2Struct
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH asPS2Struct
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 FC                MOV     R4,A
0015 7401              MOV     A,#01H
0017 93                MOVC    A,@A+DPTR
0018 F582              MOV     DPL,A
001A 8C83              MOV     DPH,R4
001C 7417              MOV     A,#017H
001E F0                MOVX    @DPTR,A
             ; FUNCTION _bExtAUXTimeOutCheck (BEGIN)
                                           ; SOURCE LINE # 1372
;---- Variable 'channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1373
                                           ; SOURCE LINE # 1375
;---- Variable 'result' assigned to Register 'R6' ----
001F 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1377
0021 C28E              CLR     TR1
                                           ; SOURCE LINE # 1378
0023 C2AB              CLR     ET1
                                           ; SOURCE LINE # 1379
0025 758DA6            MOV     TH1,#0A6H
                                           ; SOURCE LINE # 1380
0028 758B21            MOV     TL1,#021H
                                           ; SOURCE LINE # 1381
002B C28F              CLR     TF1
                                           ; SOURCE LINE # 1382
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 92  

002D D28E              SETB    TR1
002F         ?C0338:
                                           ; SOURCE LINE # 1385
                                           ; SOURCE LINE # 1386
002F EF                MOV     A,R7
0030 75F00D            MOV     B,#0DH
0033 A4                MUL     AB
0034 2400        R     ADD     A,#LOW asPS2Struct+04H
0036 F582              MOV     DPL,A
0038 E4                CLR     A
0039 3400        R     ADDC    A,#HIGH asPS2Struct+04H
003B F583              MOV     DPH,A
003D E4                CLR     A
003E 93                MOVC    A,@A+DPTR
003F FC                MOV     R4,A
0040 7401              MOV     A,#01H
0042 93                MOVC    A,@A+DPTR
0043 F582              MOV     DPL,A
0045 8C83              MOV     DPH,R4
0047 E0                MOVX    A,@DPTR
0048 30E33B            JNB     ACC.3,?C0336
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1388
004B EF                MOV     A,R7
004C 75F00D            MOV     B,#0DH
004F A4                MUL     AB
0050 2400        R     ADD     A,#LOW asPS2Struct
0052 F582              MOV     DPL,A
0054 E4                CLR     A
0055 3400        R     ADDC    A,#HIGH asPS2Struct
0057 F583              MOV     DPH,A
0059 E4                CLR     A
005A 93                MOVC    A,@A+DPTR
005B FC                MOV     R4,A
005C 7401              MOV     A,#01H
005E 93                MOVC    A,@A+DPTR
005F F582              MOV     DPL,A
0061 8C83              MOV     DPH,R4
0063 7411              MOV     A,#011H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1389
0066 EF                MOV     A,R7
0067 75F00D            MOV     B,#0DH
006A A4                MUL     AB
006B 2400        R     ADD     A,#LOW asPS2Struct+06H
006D F582              MOV     DPL,A
006F E4                CLR     A
0070 3400        R     ADDC    A,#HIGH asPS2Struct+06H
0072 F583              MOV     DPH,A
0074 E4                CLR     A
0075 93                MOVC    A,@A+DPTR
0076 FC                MOV     R4,A
0077 7401              MOV     A,#01H
0079 93                MOVC    A,@A+DPTR
007A F582              MOV     DPL,A
007C 8C83              MOV     DPH,R4
007E E0                MOVX    A,@DPTR
007F 7800        E     MOV     R0,#LOW PS2IFAck
0081 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1390
0082 E4                CLR     A
0083 FE                MOV     R6,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 93  

                                           ; SOURCE LINE # 1391
0084 8003              SJMP    ?C0337
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1393
0086         ?C0336:
0086 308FA6            JNB     TF1,?C0338
0089         ?C0337:
                                           ; SOURCE LINE # 1395
0089 EF                MOV     A,R7
008A 75F00D            MOV     B,#0DH
008D A4                MUL     AB
008E 2400        R     ADD     A,#LOW asPS2Struct
0090 F582              MOV     DPL,A
0092 E4                CLR     A
0093 3400        R     ADDC    A,#HIGH asPS2Struct
0095 F583              MOV     DPH,A
0097 E4                CLR     A
0098 93                MOVC    A,@A+DPTR
0099 FC                MOV     R4,A
009A 7401              MOV     A,#01H
009C 93                MOVC    A,@A+DPTR
009D F582              MOV     DPL,A
009F 8C83              MOV     DPH,R4
00A1 7411              MOV     A,#011H
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1396
00A4 C28E              CLR     TR1
                                           ; SOURCE LINE # 1397
00A6 C28F              CLR     TF1
                                           ; SOURCE LINE # 1398
00A8 D2AB              SETB    ET1
                                           ; SOURCE LINE # 1399
00AA AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1400
00AC         ?C0340:
00AC 22                RET     
             ; FUNCTION _bExtAUXTimeOutCheck (END)

             ; FUNCTION _ConfigExtKeyboard (BEGIN)
                                           ; SOURCE LINE # 1407
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
                                           ; SOURCE LINE # 1411
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
0008         ?C0341:
0008 900000      R     MOV     DPTR,#index
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D C3                CLR     C
000E 9403              SUBB    A,#03H
0010 504A              JNC     ?C0348
                                           ; SOURCE LINE # 1412
                                           ; SOURCE LINE # 1413
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EE                MOV     A,R6
0018 900000      R     MOV     DPTR,#ConfigAUXKB
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 94  

001B 93                MOVC    A,@A+DPTR
001C FD                MOV     R5,A
001D 7B01              MOV     R3,#01H
001F 120000      R     LCALL   _Send2PortNWait
0022 EF                MOV     A,R7
0023 702F              JNZ     ?C0343
                                           ; SOURCE LINE # 1414
                                           ; SOURCE LINE # 1415
0025 900000      R     MOV     DPTR,#index
0028 E0                MOVX    A,@DPTR
0029 900000      R     MOV     DPTR,#ConfigAUXKB
002C 93                MOVC    A,@A+DPTR
002D B4F30A            CJNE    A,#0F3H,?C0345
                                           ; SOURCE LINE # 1416
                                           ; SOURCE LINE # 1417
0030 900000      R     MOV     DPTR,#portnum
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 7800        E     MOV     R0,#LOW Save_Typematic
0037 E6                MOV     A,@R0
                                           ; SOURCE LINE # 1418
0038 8014              SJMP    ?C0515
003A         ?C0345:
                                           ; SOURCE LINE # 1419
003A 900000      R     MOV     DPTR,#index
003D E0                MOVX    A,@DPTR
003E 900000      R     MOV     DPTR,#ConfigAUXKB
0041 93                MOVC    A,@A+DPTR
0042 B4ED0F            CJNE    A,#0EDH,?C0343
                                           ; SOURCE LINE # 1420
                                           ; SOURCE LINE # 1421
0045 900000      R     MOV     DPTR,#portnum
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A E500        E     MOV     A,Led_Data
004C 5407              ANL     A,#07H
004E         ?C0515:
004E FD                MOV     R5,A
004F 7B01              MOV     R3,#01H
0051 120000      R     LCALL   _Send2PortNWait
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1423
                                           ; SOURCE LINE # 1424
0054         ?C0343:
0054 900000      R     MOV     DPTR,#index
0057 E0                MOVX    A,@DPTR
0058 04                INC     A
0059 F0                MOVX    @DPTR,A
005A 80AC              SJMP    ?C0341
                                           ; SOURCE LINE # 1425
005C         ?C0348:
005C 22                RET     
             ; FUNCTION _ConfigExtKeyboard (END)

             ; FUNCTION _EnableMouse (BEGIN)
                                           ; SOURCE LINE # 1431
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1432
                                           ; SOURCE LINE # 1434
0000 7B01              MOV     R3,#01H
0002 7DF4              MOV     R5,#0F4H
0004 120000      R     LCALL   _Send2PortNWait
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 95  

0007 EF                MOV     A,R7
0008 7007              JNZ     ?C0349
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
000A 900000      R     MOV     DPTR,#resault
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1437
000F 8005              SJMP    ?C0350
0011         ?C0349:
                                           ; SOURCE LINE # 1439
                                           ; SOURCE LINE # 1440
0011 E4                CLR     A
0012 900000      R     MOV     DPTR,#resault
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1441
0016         ?C0350:
                                           ; SOURCE LINE # 1442
0016 900000      R     MOV     DPTR,#resault
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
                                           ; SOURCE LINE # 1443
001B         ?C0351:
001B 22                RET     
             ; FUNCTION _EnableMouse (END)

             ; FUNCTION _SetResolution (BEGIN)
                                           ; SOURCE LINE # 1449
0000 900000      R     MOV     DPTR,#resolution
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1450
                                           ; SOURCE LINE # 1452
000A 7B01              MOV     R3,#01H
000C 7DE8              MOV     R5,#0E8H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
0012 7010              JNZ     ?C0352
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
0014 900000      R     MOV     DPTR,#port
0017 120000      R     LCALL   L?0522
001A EF                MOV     A,R7
001B 7007              JNZ     ?C0516
                                           ; SOURCE LINE # 1455
                                           ; SOURCE LINE # 1456
001D 900000      R     MOV     DPTR,#resault
0020 04                INC     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1457
0022 8005              SJMP    ?C0355
0024         ?C0352:
                                           ; SOURCE LINE # 1464
                                           ; SOURCE LINE # 1465
0024         ?C0516:
0024 E4                CLR     A
0025 900000      R     MOV     DPTR,#resault
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1466
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 96  

0029         ?C0355:
                                           ; SOURCE LINE # 1467
0029 900000      R     MOV     DPTR,#resault
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 1468
002E         ?C0356:
002E 22                RET     
             ; FUNCTION _SetResolution (END)

             ; FUNCTION _Setsamplerate (BEGIN)
                                           ; SOURCE LINE # 1474
0000 900000      R     MOV     DPTR,#samplerate
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#port
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1475
                                           ; SOURCE LINE # 1477
000A 7B01              MOV     R3,#01H
000C 7DF3              MOV     R5,#0F3H
000E 120000      R     LCALL   _Send2PortNWait
0011 EF                MOV     A,R7
0012 7010              JNZ     ?C0357
                                           ; SOURCE LINE # 1478
                                           ; SOURCE LINE # 1479
0014 900000      R     MOV     DPTR,#port
0017 120000      R     LCALL   L?0522
001A EF                MOV     A,R7
001B 7007              JNZ     ?C0517
                                           ; SOURCE LINE # 1480
                                           ; SOURCE LINE # 1481
001D 900000      R     MOV     DPTR,#resault
0020 04                INC     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
0022 8005              SJMP    ?C0360
0024         ?C0357:
                                           ; SOURCE LINE # 1489
                                           ; SOURCE LINE # 1490
0024         ?C0517:
0024 E4                CLR     A
0025 900000      R     MOV     DPTR,#resault
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1491
0029         ?C0360:
                                           ; SOURCE LINE # 1492
0029 900000      R     MOV     DPTR,#resault
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 1493
002E         ?C0361:
002E 22                RET     
             ; FUNCTION _Setsamplerate (END)

             ; FUNCTION _vSetIntellimouse (BEGIN)
                                           ; SOURCE LINE # 1508
0000 900000      R     MOV     DPTR,#port
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#DriverType
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 97  

0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1509
                                           ; SOURCE LINE # 1512
000A 900000      R     MOV     DPTR,#result
000D 7401              MOV     A,#01H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1514
0010 EF                MOV     A,R7
0011 6403              XRL     A,#03H
0013 7029              JNZ     ?C0362
                                           ; SOURCE LINE # 1515
                                           ; SOURCE LINE # 1516
0015 900000      R     MOV     DPTR,#index
0018 F0                MOVX    @DPTR,A
0019         ?C0363:
0019 900000      R     MOV     DPTR,#index
001C E0                MOVX    A,@DPTR
001D FE                MOV     R6,A
001E C3                CLR     C
001F 9403              SUBB    A,#03H
0021 5050              JNC     ?C0367
                                           ; SOURCE LINE # 1517
                                           ; SOURCE LINE # 1518
0023 900000      R     MOV     DPTR,#port
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 900000      R     MOV     DPTR,#Intellimouse_4Byte
002C 93                MOVC    A,@A+DPTR
002D FD                MOV     R5,A
002E 120000      R     LCALL   _Setsamplerate
0031 EF                MOV     A,R7
0032 7002              JNZ     ?C0365
                                           ; SOURCE LINE # 1519
                                           ; SOURCE LINE # 1520
                                           ; SOURCE LINE # 1521
0034 802F              SJMP    ?C0518
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1523
0036         ?C0365:
0036 900000      R     MOV     DPTR,#index
0039 E0                MOVX    A,@DPTR
003A 04                INC     A
003B F0                MOVX    @DPTR,A
003C 80DB              SJMP    ?C0363
                                           ; SOURCE LINE # 1524
003E         ?C0362:
                                           ; SOURCE LINE # 1525
003E 900000      R     MOV     DPTR,#DriverType
0041 E0                MOVX    A,@DPTR
0042 6404              XRL     A,#04H
0044 702D              JNZ     ?C0367
                                           ; SOURCE LINE # 1526
                                           ; SOURCE LINE # 1527
0046 900000      R     MOV     DPTR,#index
0049 F0                MOVX    @DPTR,A
004A         ?C0369:
004A 900000      R     MOV     DPTR,#index
004D E0                MOVX    A,@DPTR
004E FE                MOV     R6,A
004F C3                CLR     C
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 98  

0050 9403              SUBB    A,#03H
0052 501F              JNC     ?C0367
                                           ; SOURCE LINE # 1528
                                           ; SOURCE LINE # 1529
0054 900000      R     MOV     DPTR,#port
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EE                MOV     A,R6
005A 900000      R     MOV     DPTR,#Intellimouse_5Byte
005D 93                MOVC    A,@A+DPTR
005E FD                MOV     R5,A
005F 120000      R     LCALL   _Setsamplerate
0062 EF                MOV     A,R7
0063 7006              JNZ     ?C0371
                                           ; SOURCE LINE # 1530
                                           ; SOURCE LINE # 1531
0065         ?C0518:
0065 900000      R     MOV     DPTR,#result
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1532
0069 8008              SJMP    ?C0367
                                           ; SOURCE LINE # 1533
                                           ; SOURCE LINE # 1534
006B         ?C0371:
006B 900000      R     MOV     DPTR,#index
006E E0                MOVX    A,@DPTR
006F 04                INC     A
0070 F0                MOVX    @DPTR,A
0071 80D7              SJMP    ?C0369
                                           ; SOURCE LINE # 1535
0073         ?C0367:
                                           ; SOURCE LINE # 1536
0073 900000      R     MOV     DPTR,#result
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
                                           ; SOURCE LINE # 1537
0078         ?C0373:
0078 22                RET     
             ; FUNCTION _vSetIntellimouse (END)

             ; FUNCTION _ReadMouseID (BEGIN)
                                           ; SOURCE LINE # 1539
;---- Variable 'port' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1540
                                           ; SOURCE LINE # 1541
0000 7B02              MOV     R3,#02H
0002 7DF2              MOV     R5,#0F2H
0004 120000      R     LCALL   _Send2PortNWait
0007 EF                MOV     A,R7
0008 7005              JNZ     ?C0374
                                           ; SOURCE LINE # 1542
                                           ; SOURCE LINE # 1543
000A 7800        E     MOV     R0,#LOW PS2IFAck
000C E6                MOV     A,@R0
000D FF                MOV     R7,A
000E 22                RET     
                                           ; SOURCE LINE # 1544
000F         ?C0374:
                                           ; SOURCE LINE # 1545
000F 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1546
0011         ?C0375:
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 99  

0011 22                RET     
             ; FUNCTION _ReadMouseID (END)

             ; FUNCTION _ConfigExtMouse (BEGIN)
                                           ; SOURCE LINE # 1551
0000 900000      R     MOV     DPTR,#portnum
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1552
                                           ; SOURCE LINE # 1554
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
0008 7800        E     MOV     R0,#LOW TPResolution
000A E6                MOV     A,@R0
000B FD                MOV     R5,A
000C 120000      R     LCALL   _SetResolution
000F EF                MOV     A,R7
0010 6011              JZ      ?C0376
                                           ; SOURCE LINE # 1557
                                           ; SOURCE LINE # 1558
0012 900000      R     MOV     DPTR,#portnum
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 120000      R     LCALL   _EnableMouse
001A EF                MOV     A,R7
001B 6006              JZ      ?C0376
                                           ; SOURCE LINE # 1559
                                           ; SOURCE LINE # 1560
001D 900000      R     MOV     DPTR,#result
0020 7401              MOV     A,#01H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1561
                                           ; SOURCE LINE # 1562
0023         ?C0376:
                                           ; SOURCE LINE # 1563
0023 900000      R     MOV     DPTR,#result
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 1564
0028         ?C0378:
0028 22                RET     
             ; FUNCTION _ConfigExtMouse (END)

             ; FUNCTION vCheckAuxMux (BEGIN)
                                           ; SOURCE LINE # 1569
                                           ; SOURCE LINE # 1570
                                           ; SOURCE LINE # 1572
;---- Variable 'current' assigned to Register 'R7' ----
0000 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1573
;---- Variable 'data_byte' assigned to Register 'R6' ----
0002 AE00        E     MOV     R6,KBHIData
                                           ; SOURCE LINE # 1574
0004 E500        E     MOV     A,KBHIData
0006 B4F009            CJNE    A,#0F0H,?C0379
                                           ; SOURCE LINE # 1575
                                           ; SOURCE LINE # 1576
0009 D200        E     SETB    MULPX_Mx_state2
                                           ; SOURCE LINE # 1577
000B C200        E     CLR     MULPX_Mx_state3
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 100 

                                           ; SOURCE LINE # 1578
000D 1F                DEC     R7
                                           ; SOURCE LINE # 1579
000E 7EF0              MOV     R6,#0F0H
                                           ; SOURCE LINE # 1580
0010 8030              SJMP    ?C0380
0012         ?C0379:
                                           ; SOURCE LINE # 1581
0012 E500        E     MOV     A,KBHIData
0014 B4560D            CJNE    A,#056H,?C0381
                                           ; SOURCE LINE # 1582
                                           ; SOURCE LINE # 1583
0017 300028      E     JNB     MULPX_Mx_state2,?C0380
                                           ; SOURCE LINE # 1584
                                           ; SOURCE LINE # 1585
001A C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 1586
001C D200        E     SETB    MULPX_Mx_state3
                                           ; SOURCE LINE # 1587
001E E4                CLR     A
001F FF                MOV     R7,A
                                           ; SOURCE LINE # 1588
0020 7E56              MOV     R6,#056H
                                           ; SOURCE LINE # 1589
                                           ; SOURCE LINE # 1590
0022 801E              SJMP    ?C0380
0024         ?C0381:
                                           ; SOURCE LINE # 1591
0024 E500        E     MOV     A,KBHIData
0026 B4A40D            CJNE    A,#0A4H,?C0384
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1593
0029 300016      E     JNB     MULPX_Mx_state3,?C0380
                                           ; SOURCE LINE # 1594
                                           ; SOURCE LINE # 1595
002C D200        E     SETB    MULPX_Multiplex
                                           ; SOURCE LINE # 1596
002E 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0030 76FA              MOV     @R0,#0FAH
                                           ; SOURCE LINE # 1597
0032 7E11              MOV     R6,#011H
                                           ; SOURCE LINE # 1598
                                           ; SOURCE LINE # 1599
0034 800C              SJMP    ?C0380
0036         ?C0384:
                                           ; SOURCE LINE # 1600
0036 E500        E     MOV     A,KBHIData
0038 B4A507            CJNE    A,#0A5H,?C0380
                                           ; SOURCE LINE # 1601
                                           ; SOURCE LINE # 1602
003B 300004      E     JNB     MULPX_Mx_state3,?C0380
                                           ; SOURCE LINE # 1603
                                           ; SOURCE LINE # 1604
003E C200        E     CLR     MULPX_Multiplex
                                           ; SOURCE LINE # 1605
0040 7E11              MOV     R6,#011H
                                           ; SOURCE LINE # 1606
                                           ; SOURCE LINE # 1607
0042         ?C0380:
                                           ; SOURCE LINE # 1609
0042 EF                MOV     A,R7
0043 6004              JZ      ?C0389
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 101 

                                           ; SOURCE LINE # 1610
                                           ; SOURCE LINE # 1611
0045 C200        E     CLR     MULPX_Mx_state2
                                           ; SOURCE LINE # 1612
0047 C200        E     CLR     MULPX_Mx_state3
                                           ; SOURCE LINE # 1613
0049         ?C0389:
                                           ; SOURCE LINE # 1614
0049 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1615
004B         ?C0390:
004B 22                RET     
             ; FUNCTION vCheckAuxMux (END)

             ; FUNCTION _OnOffPS2Channel_X (BEGIN)
                                           ; SOURCE LINE # 1624
;---- Variable 'portnum' assigned to Register 'R7' ----
;---- Variable 'active' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1625
                                           ; SOURCE LINE # 1626
0000 EF                MOV     A,R7
0001 700F              JNZ     ?C0391
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1628
0003 901638            MOV     DPTR,#01638H
0006 E0                MOVX    A,@DPTR
0007 54FB              ANL     A,#0FBH
0009 7048              JNZ     ?C0394
000B A3                INC     DPTR
000C E0                MOVX    A,@DPTR
000D 54FB              ANL     A,#0FBH
000F 6026              JZ      ?C0395
                                           ; SOURCE LINE # 1629
0011 22                RET     
                                           ; SOURCE LINE # 1631
                                           ; SOURCE LINE # 1632
0012         ?C0391:
                                           ; SOURCE LINE # 1633
0012 EF                MOV     A,R7
0013 B4010F            CJNE    A,#01H,?C0396
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1635
0016 90163A            MOV     DPTR,#0163AH
0019 E0                MOVX    A,@DPTR
001A 54FB              ANL     A,#0FBH
001C 7035              JNZ     ?C0394
001E A3                INC     DPTR
001F E0                MOVX    A,@DPTR
0020 54FB              ANL     A,#0FBH
0022 6013              JZ      ?C0395
                                           ; SOURCE LINE # 1636
0024 22                RET     
                                           ; SOURCE LINE # 1638
                                           ; SOURCE LINE # 1639
0025         ?C0396:
                                           ; SOURCE LINE # 1640
0025 EF                MOV     A,R7
0026 B4020E            CJNE    A,#02H,?C0395
                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1642
0029 90163C            MOV     DPTR,#0163CH
002C E0                MOVX    A,@DPTR
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 102 

002D 54FB              ANL     A,#0FBH
002F 7022              JNZ     ?C0394
0031 A3                INC     DPTR
0032 E0                MOVX    A,@DPTR
0033 54FB              ANL     A,#0FBH
0035 701C              JNZ     ?C0394
                                           ; SOURCE LINE # 1643
                                           ; SOURCE LINE # 1645
                                           ; SOURCE LINE # 1646
0037         ?C0395:
                                           ; SOURCE LINE # 1648
0037 ED                MOV     A,R5
0038 700A              JNZ     ?C0403
                                           ; SOURCE LINE # 1649
                                           ; SOURCE LINE # 1650
003A 7400        E     MOV     A,#LOW AuxFlags2
003C 2F                ADD     A,R7
003D F8                MOV     R0,A
003E 7401              MOV     A,#01H
0040 46                ORL     A,@R0
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1651
0042 800C              SJMP    ?C0404
0044         ?C0403:
                                           ; SOURCE LINE # 1652
0044 ED                MOV     A,R5
0045 B40108            CJNE    A,#01H,?C0404
                                           ; SOURCE LINE # 1653
                                           ; SOURCE LINE # 1654
0048 7400        E     MOV     A,#LOW AuxFlags2
004A 2F                ADD     A,R7
004B F8                MOV     R0,A
004C 7410              MOV     A,#010H
004E 46                ORL     A,@R0
004F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1655
0050         ?C0404:
                                           ; SOURCE LINE # 1656
0050 E4                CLR     A
0051 F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 1657
0053         ?C0394:
0053 22                RET     
             ; FUNCTION _OnOffPS2Channel_X (END)

             ; FUNCTION ISR_Aux_Port1 (BEGIN)
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1663
                                           ; SOURCE LINE # 1664
0000 901106            MOV     DPTR,#01106H
0003 E0                MOVX    A,@DPTR
0004 54EF              ANL     A,#0EFH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1665
0007 901102            MOV     DPTR,#01102H
000A E0                MOVX    A,@DPTR
000B 4410              ORL     A,#010H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1666
000E 90200B            MOV     DPTR,#0200BH
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 103 

                                           ; SOURCE LINE # 1667
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1668
0014 901700            MOV     DPTR,#01700H
0017 7411              MOV     A,#011H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1669
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1670
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1672
001E E4                CLR     A
001F 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1673
0022 D200        E     SETB    F_Service_PS2_IRQ
                                           ; SOURCE LINE # 1674
0024 C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 1675
0026 90170C            MOV     DPTR,#0170CH
0029 E0                MOVX    A,@DPTR
002A 7800        E     MOV     R0,#LOW PS2PortxData
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1676
002D 22                RET     
             ; FUNCTION ISR_Aux_Port1 (END)

             ; FUNCTION ISR_Aux_Port2 (BEGIN)
                                           ; SOURCE LINE # 1681
                                           ; SOURCE LINE # 1682
                                           ; SOURCE LINE # 1683
0000 901106            MOV     DPTR,#01106H
0003 E0                MOVX    A,@DPTR
0004 54F7              ANL     A,#0F7H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1684
0007 901102            MOV     DPTR,#01102H
000A E0                MOVX    A,@DPTR
000B 4408              ORL     A,#08H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1685
000E 90200B            MOV     DPTR,#0200BH
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1686
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1687
0014 901700            MOV     DPTR,#01700H
0017 7411              MOV     A,#011H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1688
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1689
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1691
001E 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0020 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1692
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 104 

0022 D200        E     SETB    F_Service_PS2_IRQ
                                           ; SOURCE LINE # 1693
0024 C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 1694
0026 90170D            MOV     DPTR,#0170DH
0029 E0                MOVX    A,@DPTR
002A 7800        E     MOV     R0,#LOW PS2PortxData+01H
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1695
002D 22                RET     
             ; FUNCTION ISR_Aux_Port2 (END)

             ; FUNCTION ISR_Aux_Port3 (BEGIN)
                                           ; SOURCE LINE # 1700
                                           ; SOURCE LINE # 1701
                                           ; SOURCE LINE # 1702
0000 901106            MOV     DPTR,#01106H
0003 E0                MOVX    A,@DPTR
0004 54FB              ANL     A,#0FBH
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1703
0007 901102            MOV     DPTR,#01102H
000A E0                MOVX    A,@DPTR
000B 4404              ORL     A,#04H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1704
000E 90200B            MOV     DPTR,#0200BH
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1705
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1706
0014 901700            MOV     DPTR,#01700H
0017 7411              MOV     A,#011H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1707
001A A3                INC     DPTR
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1708
001C A3                INC     DPTR
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1710
001E 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0020 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 1711
0022 D200        E     SETB    F_Service_PS2_IRQ
                                           ; SOURCE LINE # 1712
0024 C200        E     CLR     PS2StartBit
                                           ; SOURCE LINE # 1713
0026 90170E            MOV     DPTR,#0170EH
0029 E0                MOVX    A,@DPTR
002A 7800        E     MOV     R0,#LOW PS2PortxData+02H
002C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1714
002D 22                RET     
             ; FUNCTION ISR_Aux_Port3 (END)

             ; FUNCTION _KBCmdAckByteCunt (BEGIN)
                                           ; SOURCE LINE # 1719
;---- Variable 'ackcunt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1720
                                           ; SOURCE LINE # 1721
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 105 

0000 7800        E     MOV     R0,#LOW Main_KB_ACK_CUNT
0002 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1722
0004 22                RET     
             ; FUNCTION _KBCmdAckByteCunt (END)

             ; FUNCTION _SetOtherKBNeedUpdataFlag (BEGIN)
                                           ; SOURCE LINE # 1727
;---- Variable 'KBCmd' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1728
                                           ; SOURCE LINE # 1731
;---- Variable 'index' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
0002         ?C0410:
                                           ; SOURCE LINE # 1732
                                           ; SOURCE LINE # 1733
0002 7400        E     MOV     A,#LOW AuxFlags
0004 2E                ADD     A,R6
0005 F8                MOV     R0,A
0006 E6                MOV     A,@R0
0007 30E64E            JNB     ACC.6,?C0412
                                           ; SOURCE LINE # 1734
                                           ; SOURCE LINE # 1735
000A EE                MOV     A,R6
000B 2401              ADD     A,#01H
000D FD                MOV     R5,A
000E E4                CLR     A
000F 33                RLC     A
0010 FC                MOV     R4,A
0011 7800        E     MOV     R0,#LOW Main_KB_CHN
0013 E6                MOV     A,@R0
0014 6D                XRL     A,R5
0015 7001              JNZ     ?C0491
0017 EC                MOV     A,R4
0018         ?C0491:
0018 603E              JZ      ?C0412
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1737
001A 7400        E     MOV     A,#LOW AuxFlags
001C 2E                ADD     A,R6
001D F8                MOV     R0,A
001E E6                MOV     A,@R0
001F 20E336            JB      ACC.3,?C0412
                                           ; SOURCE LINE # 1738
                                           ; SOURCE LINE # 1739
0022 EF                MOV     A,R7
0023 B4ED0A            CJNE    A,#0EDH,?C0416
                                           ; SOURCE LINE # 1740
                                           ; SOURCE LINE # 1741
0026 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0028 2E                ADD     A,R6
0029 F8                MOV     R0,A
002A 7408              MOV     A,#08H
002C 46                ORL     A,@R0
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1742
002E 8028              SJMP    ?C0412
0030         ?C0416:
                                           ; SOURCE LINE # 1743
0030 EF                MOV     A,R7
0031 B4F30A            CJNE    A,#0F3H,?C0418
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 106 

                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1745
0034 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0036 2E                ADD     A,R6
0037 F8                MOV     R0,A
0038 7404              MOV     A,#04H
003A 46                ORL     A,@R0
003B F6                MOV     @R0,A
                                           ; SOURCE LINE # 1746
003C 801A              SJMP    ?C0412
003E         ?C0418:
                                           ; SOURCE LINE # 1747
003E EF                MOV     A,R7
003F B4F40A            CJNE    A,#0F4H,?C0420
                                           ; SOURCE LINE # 1748
                                           ; SOURCE LINE # 1749
0042 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0044 2E                ADD     A,R6
0045 F8                MOV     R0,A
0046 7402              MOV     A,#02H
0048 46                ORL     A,@R0
0049 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1750
004A 800C              SJMP    ?C0412
004C         ?C0420:
                                           ; SOURCE LINE # 1751
004C EF                MOV     A,R7
004D B4F508            CJNE    A,#0F5H,?C0412
                                           ; SOURCE LINE # 1752
                                           ; SOURCE LINE # 1753
0050 7400        E     MOV     A,#LOW AuxFlags_KB_CMD
0052 2E                ADD     A,R6
0053 F8                MOV     R0,A
0054 7401              MOV     A,#01H
0056 46                ORL     A,@R0
0057 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1754
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
                                           ; SOURCE LINE # 1757
                                           ; SOURCE LINE # 1758
0058         ?C0412:
0058 0E                INC     R6
0059 EE                MOV     A,R6
005A 6403              XRL     A,#03H
005C 70A4              JNZ     ?C0410
                                           ; SOURCE LINE # 1759
005E         ?C0423:
005E 22                RET     
             ; FUNCTION _SetOtherKBNeedUpdataFlag (END)

             ; FUNCTION SetStartScanAUXFlag (BEGIN)
                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1765
                                           ; SOURCE LINE # 1766
0000 D200        E     SETB    StartScanAUXDevice
                                           ; SOURCE LINE # 1767
0002 D200        E     SETB    StartENAUXDevice
                                           ; SOURCE LINE # 1768
0004 22                RET     
             ; FUNCTION SetStartScanAUXFlag (END)

C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 107 

             ; FUNCTION _AUXData_To_Host_nWait (BEGIN)
                                           ; SOURCE LINE # 1773
;---- Variable 'portnum' assigned to Register 'R5' ----
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1774
                                           ; SOURCE LINE # 1775
0000 AE05              MOV     R6,AR5
0002 7800        E     MOV     R0,#LOW AUXPortNum
0004 A606              MOV     @R0,AR6
                                           ; SOURCE LINE # 1776
0006 120000      R     LCALL   _SendFromAux
                                           ; SOURCE LINE # 1778
0009 C28E              CLR     TR1
                                           ; SOURCE LINE # 1779
000B C2AB              CLR     ET1
                                           ; SOURCE LINE # 1780
000D 758DB2            MOV     TH1,#0B2H
                                           ; SOURCE LINE # 1781
0010 758B19            MOV     TL1,#019H
                                           ; SOURCE LINE # 1782
0013 C28F              CLR     TF1
                                           ; SOURCE LINE # 1783
0015 D28E              SETB    TR1
0017         ?C0425:
                                           ; SOURCE LINE # 1785
0017 208F0E            JB      TF1,?C0429
                                           ; SOURCE LINE # 1786
                                           ; SOURCE LINE # 1787
001A 901304            MOV     DPTR,#01304H
001D E0                MOVX    A,@DPTR
001E 30E007            JNB     ACC.0,?C0429
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1789
                                           ; SOURCE LINE # 1790
0021         ?C0427:
                                           ; SOURCE LINE # 1791
0021 901304            MOV     DPTR,#01304H
0024 E0                MOVX    A,@DPTR
0025 30E1EF            JNB     ACC.1,?C0425
                                           ; SOURCE LINE # 1792
                                           ; SOURCE LINE # 1793
                                           ; SOURCE LINE # 1794
                                           ; SOURCE LINE # 1795
                                           ; SOURCE LINE # 1796
0028         ?C0429:
0028 22                RET     
             ; FUNCTION _AUXData_To_Host_nWait (END)

             ; FUNCTION ReSendPS2PendingData (BEGIN)
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1802
                                           ; SOURCE LINE # 1803
0000 900000      E     MOV     DPTR,#MSPendingRXCount
0003 E0                MOVX    A,@DPTR
0004 B43302            CJNE    A,#033H,?C0431
                                           ; SOURCE LINE # 1804
                                           ; SOURCE LINE # 1805
0007 D200        E     SETB    F_Service_Send_PS2
                                           ; SOURCE LINE # 1806
                                           ; SOURCE LINE # 1807
0009         ?C0431:
0009 22                RET     
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 108 

             ; FUNCTION ReSendPS2PendingData (END)

             ; FUNCTION L?0523 (BEGIN)
0000 E6                MOV     A,@R0
0001 2400        E     ADD     A,#LOW AuxFlags
0003 F8                MOV     R0,A
0004 7440              MOV     A,#040H
0006 46                ORL     A,@R0
0007 F6                MOV     @R0,A
0008 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX
000A E6                MOV     A,@R0
000B FF                MOV     R7,A
             ; FUNCTION _CheckNSetMainKBCHN (BEGIN)
                                           ; SOURCE LINE # 1812
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1813
                                           ; SOURCE LINE # 1814
000C 7800        E     MOV     R0,#LOW Main_KB_CHN
000E E6                MOV     A,@R0
000F 700D              JNZ     ?C0433
                                           ; SOURCE LINE # 1815
                                           ; SOURCE LINE # 1816
0011 7400        E     MOV     A,#LOW AuxFlags
0013 2F                ADD     A,R7
0014 F8                MOV     R0,A
0015 7410              MOV     A,#010H
0017 46                ORL     A,@R0
0018 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1817
0019 EF                MOV     A,R7
001A 04                INC     A
001B 7800        E     MOV     R0,#LOW Main_KB_CHN
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1818
                                           ; SOURCE LINE # 1819
001E         ?C0433:
001E 22                RET     
             ; FUNCTION _CheckNSetMainKBCHN (END)

             ; FUNCTION _CheckNSetMainMSCHN (BEGIN)
                                           ; SOURCE LINE # 1824
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1825
                                           ; SOURCE LINE # 1826
0000 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0002 E6                MOV     A,@R0
0003 700D              JNZ     ?C0435
                                           ; SOURCE LINE # 1827
                                           ; SOURCE LINE # 1828
0005 7400        E     MOV     A,#LOW AuxFlags
0007 2F                ADD     A,R7
0008 F8                MOV     R0,A
0009 7420              MOV     A,#020H
000B 46                ORL     A,@R0
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1829
000D EF                MOV     A,R7
000E 04                INC     A
000F 7800        E     MOV     R0,#LOW Main_MOUSE_CHN
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1830
                                           ; SOURCE LINE # 1831
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 109 

0012         ?C0435:
0012 22                RET     
             ; FUNCTION _CheckNSetMainMSCHN (END)

             ; FUNCTION ResetMSPendingData (BEGIN)
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
                                           ; SOURCE LINE # 1838
0000 900000      E     MOV     DPTR,#MSPendingRXCount
0003 7488              MOV     A,#088H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1839
0006 C200        E     CLR     F_Service_Send_PS2
                                           ; SOURCE LINE # 1840
0008 22                RET     
             ; FUNCTION ResetMSPendingData (END)

             ; FUNCTION _CheckMousePS2IFBusy (BEGIN)
                                           ; SOURCE LINE # 1847
;---- Variable 'result' assigned to Register 'R6' ----
;---- Variable 'PortNum' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1848
                                           ; SOURCE LINE # 1851
0000 EF                MOV     A,R7
0001 75F00D            MOV     B,#0DH
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW asPS2Struct+04H
0007 F582              MOV     DPL,A
0009 E4                CLR     A
000A 3400        R     ADDC    A,#HIGH asPS2Struct+04H
000C F583              MOV     DPH,A
000E E4                CLR     A
000F 93                MOVC    A,@A+DPTR
0010 FC                MOV     R4,A
0011 7401              MOV     A,#01H
0013 93                MOVC    A,@A+DPTR
0014 F582              MOV     DPL,A
0016 8C83              MOV     DPH,R4
0018 E0                MOVX    A,@DPTR
;---- Variable 'auxstatus' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1852
0019 20E315            JB      ACC.3,?C0438
001C 20E212            JB      ACC.2,?C0438
001F 300006      E     JNB     F_Service_PS2_IRQ,?C0439
0022 7800        E     MOV     R0,#LOW PS2_IRQ_Channel
0024 E6                MOV     A,@R0
0025 6F                XRL     A,R7
0026 6009              JZ      ?C0438
0028         ?C0439:
0028 30000A      E     JNB     PS2StartBit,?C0437
002B 7800        E     MOV     R0,#LOW PS2_SSIRQ_Channel
002D E6                MOV     A,@R0
002E B50704            CJNE    A,AR7,?C0437
0031         ?C0438:
                                           ; SOURCE LINE # 1856
                                           ; SOURCE LINE # 1857
0031 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 1858
0033 801D              SJMP    ?C0440
0035         ?C0437:
                                           ; SOURCE LINE # 1860
                                           ; SOURCE LINE # 1861
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 110 

0035 EF                MOV     A,R7
0036 75F00D            MOV     B,#0DH
0039 A4                MUL     AB
003A 2400        R     ADD     A,#LOW asPS2Struct
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH asPS2Struct
0041 F583              MOV     DPH,A
0043 E4                CLR     A
0044 93                MOVC    A,@A+DPTR
0045 FE                MOV     R6,A
0046 7401              MOV     A,#01H
0048 93                MOVC    A,@A+DPTR
0049 F582              MOV     DPL,A
004B 8E83              MOV     DPH,R6
004D 7411              MOV     A,#011H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1862
0050 E4                CLR     A
0051 FE                MOV     R6,A
                                           ; SOURCE LINE # 1863
0052         ?C0440:
                                           ; SOURCE LINE # 1865
0052 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 1866
0054         ?C0441:
0054 22                RET     
             ; FUNCTION _CheckMousePS2IFBusy (END)

             ; FUNCTION _KBCmdCheckMouseBusy (BEGIN)
                                           ; SOURCE LINE # 1872
;---- Variable 'KBCmd' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 1873
                                           ; SOURCE LINE # 1876
0002 300031      E     JNB     MouseDriverIn,?C0451
                                           ; SOURCE LINE # 1877
                                           ; SOURCE LINE # 1878
;---- Variable 'index' assigned to Register 'R2' ----
0005 E4                CLR     A
0006 FA                MOV     R2,A
0007         ?C0443:
                                           ; SOURCE LINE # 1879
                                           ; SOURCE LINE # 1880
0007 7800        E     MOV     R0,#LOW Main_KB_CHN
0009 E6                MOV     A,@R0
000A 14                DEC     A
000B 6A                XRL     A,R2
000C 6023              JZ      ?C0445
                                           ; SOURCE LINE # 1881
                                           ; SOURCE LINE # 1882
                                           ; SOURCE LINE # 1883
000E         ?C0446:
                                           ; SOURCE LINE # 1885
000E 7400        E     MOV     A,#LOW AuxFlags
0010 2A                ADD     A,R2
0011 F8                MOV     R0,A
0012 E6                MOV     A,@R0
0013 30E71B            JNB     ACC.7,?C0445
                                           ; SOURCE LINE # 1886
                                           ; SOURCE LINE # 1887
0016 AF02              MOV     R7,AR2
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 111 

0018 120000      R     LCALL   _CheckMousePS2IFBusy
001B BF0105            CJNE    R7,#01H,?C0448
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1889
001E 200015      E     JB      ECSendtoAUXFlag,?C0451
                                           ; SOURCE LINE # 1890
                                           ; SOURCE LINE # 1891
                                           ; SOURCE LINE # 1892
                                           ; SOURCE LINE # 1893
                                           ; SOURCE LINE # 1894
0021 8007              SJMP    ?C0519
                                           ; SOURCE LINE # 1895
0023         ?C0448:
                                           ; SOURCE LINE # 1897
0023 900000      E     MOV     DPTR,#MSPendingRXCount
0026 E0                MOVX    A,@DPTR
0027 B43307            CJNE    A,#033H,?C0445
                                           ; SOURCE LINE # 1898
                                           ; SOURCE LINE # 1899
002A         ?C0519:
002A D200        E     SETB    AUXInterfaceBusy
                                           ; SOURCE LINE # 1900
002C 7800        E     MOV     R0,#LOW PS2_KBCmd_BK
002E A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 1901
0030 22                RET     
                                           ; SOURCE LINE # 1902
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
0031         ?C0445:
0031 0A                INC     R2
0032 EA                MOV     A,R2
0033 B403D1            CJNE    A,#03H,?C0443
                                           ; SOURCE LINE # 1905
                                           ; SOURCE LINE # 1906
0036         ?C0451:
0036 22                RET     
             ; FUNCTION _KBCmdCheckMouseBusy (END)

             ; FUNCTION DisablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 1914
                                           ; SOURCE LINE # 1915
                                           ; SOURCE LINE # 1916
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 FF                MOV     R7,A
0003 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_0 (END)

             ; FUNCTION DisablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 1922
                                           ; SOURCE LINE # 1923
                                           ; SOURCE LINE # 1924
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_1 (END)

             ; FUNCTION DisablePS2Port_2 (BEGIN)
                                           ; SOURCE LINE # 1930
                                           ; SOURCE LINE # 1931
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 112 

                                           ; SOURCE LINE # 1932
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION DisablePS2Port_2 (END)

             ; FUNCTION EnablePS2Port_0 (BEGIN)
                                           ; SOURCE LINE # 1938
                                           ; SOURCE LINE # 1939
                                           ; SOURCE LINE # 1940
0000 7D01              MOV     R5,#01H
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_0 (END)

             ; FUNCTION EnablePS2Port_1 (BEGIN)
                                           ; SOURCE LINE # 1946
                                           ; SOURCE LINE # 1947
                                           ; SOURCE LINE # 1948
0000 7D01              MOV     R5,#01H
0002 7F01              MOV     R7,#01H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_1 (END)

             ; FUNCTION EnablePS2Port_2 (BEGIN)
                                           ; SOURCE LINE # 1954
                                           ; SOURCE LINE # 1955
                                           ; SOURCE LINE # 1956
0000 7D01              MOV     R5,#01H
0002 7F02              MOV     R7,#02H
0004 020000      R     LJMP    _OnOffPS2Channel_X
             ; FUNCTION EnablePS2Port_2 (END)

             ; FUNCTION PS2_PowerOff (BEGIN)
                                           ; SOURCE LINE # 1962
                                           ; SOURCE LINE # 1963
                                           ; SOURCE LINE # 1965
0000 120000      R     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 1966
0003 120000      R     LCALL   ClaerPS2IFPendingEvent
                                           ; SOURCE LINE # 1968
0006 E4                CLR     A
0007 7800        E     MOV     R0,#LOW AUX_SCAN_TIMEOUT_CUNT
0009 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1969
000A 7800        E     MOV     R0,#LOW AUX_SCAN_INDEX_HS
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1970
000D F500        E     MOV     PS2_ReTryCunt,A
                                           ; SOURCE LINE # 1971
000F C200        E     CLR     SendtoAUXFlag
                                           ; SOURCE LINE # 1972
0011 C200        E     CLR     ECSendtoAUXFlag
                                           ; SOURCE LINE # 1973
0013 7800        E     MOV     R0,#LOW AUXInactiveCounter
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1974
0016 C200        E     CLR     StartScanAUXDevice
                                           ; SOURCE LINE # 1975
0018 C200        E     CLR     StartENAUXDevice
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 113 

                                           ; SOURCE LINE # 1976
001A C200        E     CLR     AUXInterfaceBusy
                                           ; SOURCE LINE # 1978
;---- Variable 'index' assigned to Register 'R7' ----
001C FF                MOV     R7,A
001D         ?C0458:
                                           ; SOURCE LINE # 1979
                                           ; SOURCE LINE # 1980
001D 7400        E     MOV     A,#LOW AuxFlags
001F 2F                ADD     A,R7
0020 F8                MOV     R0,A
0021 E4                CLR     A
0022 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1981
0023 7400        E     MOV     A,#LOW AuxFlags2
0025 2F                ADD     A,R7
0026 F8                MOV     R0,A
0027 E4                CLR     A
0028 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1982
0029 0F                INC     R7
002A EF                MOV     A,R7
002B B403EF            CJNE    A,#03H,?C0458
002E         ?C0459:
                                           ; SOURCE LINE # 1984
002E 901638            MOV     DPTR,#01638H
0031 E0                MOVX    A,@DPTR
0032 54FB              ANL     A,#0FBH
0034 7014              JNZ     ?C0461
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 54FB              ANL     A,#0FBH
003A 700E              JNZ     ?C0461
                                           ; SOURCE LINE # 1985
                                           ; SOURCE LINE # 1986
003C 901638            MOV     DPTR,#01638H
003F 7442              MOV     A,#042H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1987
0042 A3                INC     DPTR
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1988
0044 7800        E     MOV     R0,#LOW AuxFlags2
0046 E6                MOV     A,@R0
0047 4480              ORL     A,#080H
0049 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1989
004A         ?C0461:
                                           ; SOURCE LINE # 1991
004A 90163A            MOV     DPTR,#0163AH
004D E0                MOVX    A,@DPTR
004E 54FB              ANL     A,#0FBH
0050 7014              JNZ     ?C0462
0052 A3                INC     DPTR
0053 E0                MOVX    A,@DPTR
0054 54FB              ANL     A,#0FBH
0056 700E              JNZ     ?C0462
                                           ; SOURCE LINE # 1992
                                           ; SOURCE LINE # 1993
0058 90163A            MOV     DPTR,#0163AH
005B 7442              MOV     A,#042H
005D F0                MOVX    @DPTR,A
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 114 

                                           ; SOURCE LINE # 1994
005E A3                INC     DPTR
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1995
0060 7800        E     MOV     R0,#LOW AuxFlags2+01H
0062 E6                MOV     A,@R0
0063 4480              ORL     A,#080H
0065 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1996
0066         ?C0462:
                                           ; SOURCE LINE # 1998
0066 90163C            MOV     DPTR,#0163CH
0069 E0                MOVX    A,@DPTR
006A 54FB              ANL     A,#0FBH
006C 7014              JNZ     ?C0464
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 54FB              ANL     A,#0FBH
0072 700E              JNZ     ?C0464
                                           ; SOURCE LINE # 1999
                                           ; SOURCE LINE # 2000
0074 90163C            MOV     DPTR,#0163CH
0077 7442              MOV     A,#042H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2001
007A A3                INC     DPTR
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2002
007C 7800        E     MOV     R0,#LOW AuxFlags2+02H
007E E6                MOV     A,@R0
007F 4480              ORL     A,#080H
0081 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2003
                                           ; SOURCE LINE # 2004
0082         ?C0464:
0082 22                RET     
             ; FUNCTION PS2_PowerOff (END)

             ; FUNCTION PS2_PowerOn (BEGIN)
                                           ; SOURCE LINE # 2009
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
0000 120000      R     LCALL   vPS2DeviceInactive
                                           ; SOURCE LINE # 2012
0003 7800        E     MOV     R0,#LOW AuxFlags2
0005 E6                MOV     A,@R0
0006 30E70B            JNB     ACC.7,?C0465
                                           ; SOURCE LINE # 2013
                                           ; SOURCE LINE # 2014
0009 E6                MOV     A,@R0
000A 547F              ANL     A,#07FH
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 2015
000D 901638            MOV     DPTR,#01638H
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2016
0012 A3                INC     DPTR
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2017
0014         ?C0465:
                                           ; SOURCE LINE # 2019
C51 COMPILER V7.06   CORE_PS2                                                              07/06/2010 09:59:44 PAGE 115 

0014 7800        E     MOV     R0,#LOW AuxFlags2+01H
0016 E6                MOV     A,@R0
0017 30E70B            JNB     ACC.7,?C0466
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2021
001A E6                MOV     A,@R0
001B 547F              ANL     A,#07FH
001D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2022
001E 90163A            MOV     DPTR,#0163AH
0021 E4                CLR     A
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2023
0023 A3                INC     DPTR
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2024
0025         ?C0466:
                                           ; SOURCE LINE # 2026
0025 7800        E     MOV     R0,#LOW AuxFlags2+02H
0027 E6                MOV     A,@R0
0028 30E70B            JNB     ACC.7,?C0468
                                           ; SOURCE LINE # 2027
                                           ; SOURCE LINE # 2028
002B E6                MOV     A,@R0
002C 547F              ANL     A,#07FH
002E F6                MOV     @R0,A
                                           ; SOURCE LINE # 2029
002F 90163C            MOV     DPTR,#0163CH
0032 E4                CLR     A
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2030
0034 A3                INC     DPTR
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2031
                                           ; SOURCE LINE # 2032
0036         ?C0468:
0036 22                RET     
             ; FUNCTION PS2_PowerOn (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5187    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
