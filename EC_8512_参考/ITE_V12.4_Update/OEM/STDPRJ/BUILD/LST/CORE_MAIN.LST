C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE CORE_MAIN
OBJECT MODULE PLACED IN SOURCE\CORE_MAIN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe SOURCE\CORE_MAIN.C LA WL(1) CD OT(8,SIZE) OR

stmt level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_MAIN.C - Main Program for KBC firmware.
   3           *
   4           * Main processing loop (interrupt driven) for the keyboard controller/scanner.
   5           *
   6           * Copyright (c) 1983-2009, Insyde Software Corporation. All Rights Reserved.
   7           *
   8           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   9           * transmit, broadcast, present, recite, release, license or otherwise exploit
  10           * any part of this publication in any form, by any means, without the prior
  11           * written permission of Insyde Software Corporation.
  12           *---------------------------------------------------------------------------*/
  13          #include "CORE_INCLUDE.H"
  14          #include "OEM_INCLUDE.H"
  15          
  16          /* ----------------------------------------------------------------------------
  17           * >>>----> ITE Technical Marketing Firmware Center <-----------------------<<<
  18           *
  19           *          EC Kernel Code Revision 1.1     Date: July 01, 2009 12:00:00
  20           * ------------------------------------------------------------------------- */
  21          //------------------------------------------------------------------------------
  22          // The function of disable all interrupts
  23          //------------------------------------------------------------------------------
  24          void DisableAllInterrupt(void)
  25          {
  26   1              EA = 0;
  27   1              _nop_();
  28   1              _nop_();
  29   1              _nop_();
  30   1              _nop_();
  31   1      }
  32          
  33          //------------------------------------------------------------------------------
  34          // The function of enable all interrupts
  35          //------------------------------------------------------------------------------
  36          void EnableAllInterrupt(void)
  37          {
  38   1              EA = 1;
  39   1      }
  40          
  41          /* ----------------------------------------------------------------------------
  42           *  FUNCTION: main - Main service loop.
  43           *
  44           *  Wait in idle state until an IRQ causes an exit from idle.  If the IRQ
  45           *  handler posted a service request (via bSERVICE) then dispatch control to
  46           *  the appropriate service handler.  Otherwise, go back to idle state.  After
  47           *  all service requests have been handled, return to idle state.
  48           * ------------------------------------------------------------------------- */
  49          void main(void)
  50          {
  51   1          SP = 0xD0;      // Setting Stack Pointer (Reset Pointer)
  52   1      
  53   1          #if SUPPORT_ExitRamCode_KEEP_OS
  54   1          if( (ExitRamCodeCommand==0xAA) && (CORE_PMFLAG_S0) )
  55   1          {
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 2   

  56   2              CLEAR_BIT(FBCFG,7);     // Disable scatch ROM
  57   2              #ifdef HSPI
                      HSPI_SetReloadRamCodeFlag();    // Set flag for re-load HSPI ram code function
                      #endif
  60   2              EnableAllInterrupt();   // enable global interrupt
  61   2              ExitRamCodeCommand = 0x00;
  62   2          }
  63   1          else
  64   1          #endif //SUPPORT_ExitRamCode_KEEP_OS
  65   1          {
  66   2              CLEAR_BIT(FBCFG,7);     // Disable scatch ROM
  67   2              EnableAllInterrupt();   // enable global interrupt
  68   2              ExitRamCodeCommand = 0x00;
  69   2              FPCFG = 0x3F;           // Bit7 :0 using P1[0] P1[1] as code banking
  70   2              FMSSR = _Init_FMSSR;    /*<------<< PROJECT.H */
  71   2              Reset_Initialization();
  72   2              vInitEnableInterrupt();
  73   2              #ifdef UART_Debug
                      Init_UART();
                      printf("EC Init OK !!!\n");
                      #endif
  77   2          }
  78   1      
  79   1          Init_Cache();
  80   1      
  81   1          //-- Loop Service Start ---------------------------------------------------
  82   1          //
  83   1          while(1)
  84   1          {
  85   2              main_service();
  86   2              
  87   2              #ifdef HSPI
                      if(Service_HSPI==0x01)
                      {
                          Service_HSPI = 0x00;
                          if(IsFlag1(HSPI_Misc1, HSPI_ReLoadHSPIRamCode))
                          {
                              CLEAR_MASK(HSPI_Misc1, HSPI_ReLoadHSPIRamCode);
                              LoadSPIFucnToRam(HSPI_RamCode);         // Load function to ram
                          }
                          HSPI_Process();
                      }
                      #endif
  99   2              
 100   2              EnableInterrupt();
 101   2              _nop_();
 102   2              _nop_();
 103   2              if ( vCheckChipCanSleep() )
 104   2              {
 105   3                  /* CHIP SLEEPING...*/
 106   3                  #if SUPPORT_EC_DEEP_SLEEP
                          if ( vCheckChipCanDeepSleep() )
                          {
                              InitEnterDeepSleep();
                              EnableAllInterrupt();   // enable global interrupt
                              PLLCTRL = 0x01;
                              PCON    = 0x02;         /* Enter Deep Sleep mode.  */
                              _nop_();                /* Wake-up delay.  */
                              _nop_();
                              _nop_();
                              _nop_();
                              _nop_();
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 3   

                              _nop_();
                              _nop_();
                              _nop_();
                              InitWakeFromDeepSleep();
                          }
                          else
                          #endif
 125   3                  {
 126   4                      ScanAUXDeviceStep();
 127   4                      if((Service == 0x00)&&(Service1 == 0x00))
 128   4                      {
 129   5                          PCON    = 0x01;     /* Enter idle mode */
 130   5                          _nop_();            /* Wake-up delay.  */
 131   5                          _nop_();
 132   5                          _nop_();
 133   5                          _nop_();
 134   5                          _nop_();
 135   5                          _nop_();
 136   5                          _nop_();
 137   5                          _nop_();
 138   5                      }
 139   4                  }
 140   3              }
 141   2              F_Service_UNLOCK = 1;
 142   2          }
 143   1          //
 144   1          //-- Loop Service End -----------------------------------------------------
 145   1      
 146   1      }
 147          
 148          /* ----------------------------------------------------------------------------
 149           * FUNCTION: vCheckChipCanSleep
 150           *           TRUE: Enabled idle / FALSE: skip idle entry
 151           * ------------------------------------------------------------------------- */
 152          bit vCheckChipCanSleep(void)
 153          {
 154   1          if( !OemSetWakeUpSource() || SET_EC_FULL_RUN )
 155   1          {
 156   2              return  FALSE;
 157   2          }
 158   1      
 159   1          if( ( Service > 0x00 ) || (Service1 > 0x00) )
 160   1          {
 161   2              return FALSE;
 162   2          }
 163   1      
 164   1          if( !CORE_PMFLAG_S0  )      return TRUE;
 165   1      
 166   1          return  TRUE;
 167   1      }
 168          
 169          
 170          /* ----------------------------------------------------------------------------
 171           * FUNCTION: vEnableInterrupt - Enable interrupt service
 172           *
 173           * ------------------------------------------------------------------------- */
 174          void EnableInterrupt(void)
 175          {
 176   1          IER3 |= 0x03;           // Enable IBF1,IBF2
 177   1          #if SUPPORT_CIR_DEVICE
                  IER1 |= 0x80;           // Enable CIR interrupt
                  #endif
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 4   

 180   1          
 181   1          EnableAllInterrupt();   // enable global interrupt
 182   1          //EA = 1;             // Enable global interupt
 183   1      }
 184          
 185          /* ----------------------------------------------------------------------------
 186           * FUNCTION: main_service - Check for new/more service requests.
 187           *
 188           * Check for a request flag.  The check is done according to priority.  If a
 189           * request flag is set, handle the request and loop back to get the flags
 190           * again.  Do not follow through to check the next flag.  The flags are to be
 191           * checked in order.
 192           * ------------------------------------------------------------------------- */
 193          const FUNCT_PTR_V_V code service_table[16] =
 194          {   // Hi-Level Service
 195              Service_PCI,            // Host 60/64 Command/Data service
 196              Service_UNLOCK,         // Service Unlock
 197              Service_SEND,           // Send byte from KBC
 198              Service_Send_PS2,       // Send PS2 interface data
 199              Service_PS2_IRQ,        // Process PS2 interface data
 200              Service_PCI2,           // Secondary 62/66 Host Command/Data service
 201              Service_MS_5,           // 5 millisecond elapsed for OEM
 202              Service_KEYSCAN,        // Keyboard scanner service
 203              // Lo-Level Service
 204              Service_PCI3,           // Third Host Command/Data service
 205              Service_CIR,            // Service CIR.
 206              Service_Reserved_3,     // Reserved
 207              Service_MainLoTimer,    // Service Low Level 5ms Timer
 208              Service_OEM_LoTimer,    // Service Oem Low Level 5ms Timer
 209              Service_LPCRST,         // Service LPCRST
 210              Service_Reserved_1,     // Reserved
 211              Service_Reserved_2      // Reserved
 212          };
 213          //-----------------------------------------------------------------------------
 214          void main_service(void)
 215          {
 216   1          _W1 = ( ( (WORD)Service1 << 8 ) | Service );    /* Load Service */
 217   1      
 218   1          while( _W1 != 0 )
 219   1          {
 220   2              _R1 = 0;
 221   2              /* Check Service request Flag */
 222   2              while( ( _W1 & 1 ) == 0 )
 223   2              {
 224   3                  _W1 >>= 1;
 225   3                  _R1++;
 226   3              }
 227   2      
 228   2              if ( _R1 < 0x08)
 229   2              {   /* Clear service request. */
 230   3                  Service &= Cpl_Byte_Mask( _R1 & 0x07 );
 231   3              }
 232   2              else
 233   2              {
 234   3                  /* Low Level Check */
 235   3                  /* Clear service request. */
 236   3                  Service1 &= Cpl_Byte_Mask( _R1 & 0x07 );
 237   3              }
 238   2      
 239   2              (service_table[ _R1 ])();   /* Dispatch to service handler. */
 240   2      
 241   2              if( IsFlag1(PM1STS, BIT1) )         {   F_Service_PCI2 = 1;     }
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 5   

 242   2              else if( IsFlag1(KBHISR, BIT1) )    {   F_Service_PCI  = 1;     }
 243   2      
 244   2      
 245   2              _W1 = ( ( (WORD)Service1 << 8 ) | Service );    /* Re-Load Service */
 246   2      
 247   2          }
 248   1      
 249   1      }
 250          
 251          //----------------------------------------------------------------------------
 252          // FUNCTION: Service_UNLOCK
 253          // Unlock aux devices and re-enable Host interface IRQ if it is ok to do so.
 254          //----------------------------------------------------------------------------
 255          static void Service_UNLOCK(void)
 256          {
 257   1          /* Unlock_Scan(); */
 258   1          Int_Var.Scan_Lock = 0;
 259   1      }
 260          
 261          //----------------------------------------------------------------------------
 262          // FUNCTION: Reserved
 263          //----------------------------------------------------------------------------
 264          static void Service_Reserved_1(void)
 265          {
 266   1          ;
 267   1      }
 268          
 269          //----------------------------------------------------------------------------
 270          // FUNCTION: Service polling aux device
 271          //----------------------------------------------------------------------------
 272          static void Service_Reserved_2(void)
 273          {
 274   1          ;
 275   1      }
 276          
 277          //----------------------------------------------------------------------------
 278          // FUNCTION: Reserved
 279          //----------------------------------------------------------------------------
 280          static void Service_Reserved_3(void)
 281          {
 282   1          ;
 283   1      }
 284          
 285          //-----------------------------------------------------------------------------
 286          // Core 5ms Events 
 287          //-----------------------------------------------------------------------------
 288          void Timer5msEvent(void)
 289          {         
 290   1          ReSendPS2PendingData();
 291   1          Hook_Timer5msEvent();
 292   1      }
 293          
 294          //-----------------------------------------------------------------------------
 295          // Core 10ms Events 
 296          //-----------------------------------------------------------------------------
 297          void Timer10msEvent(void)
 298          {
 299   1          SetStartScanAUXFlag();
 300   1          Hook_Timer10msEvent();
 301   1      }
 302          
 303          //-----------------------------------------------------------------------------
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 6   

 304          // Core 50ms Events 
 305          //-----------------------------------------------------------------------------
 306          void Timer50msEventA(void)
 307          {
 308   1          Hook_Timer50msEventA();
 309   1      }
 310          
 311          //-----------------------------------------------------------------------------
 312          void Timer50msEventB(void)
 313          {
 314   1          Hook_Timer50msEventB();
 315   1      }
 316          
 317          //-----------------------------------------------------------------------------
 318          void Timer50msEventC(void)
 319          {
 320   1          Hook_Timer50msEventC();
 321   1      }
 322          
 323          //-----------------------------------------------------------------------------
 324          // Core 100ms Events 
 325          //-----------------------------------------------------------------------------
 326          void Timer100msEventA(void)
 327          {
 328   1          Hook_Timer100msEventA();
 329   1      }
 330          //-----------------------------------------------------------------------------
 331          void Timer100msEventB(void)
 332          {
 333   1          Hook_Timer100msEventB();
 334   1      
 335   1      }
 336          //-----------------------------------------------------------------------------
 337          void Timer100msEventC(void)
 338          { 
 339   1          Hook_Timer100msEventC();
 340   1      }
 341          //-----------------------------------------------------------------------------
 342          // Core 125ms Events 
 343          //-----------------------------------------------------------------------------
 344          void Timer125msEvent(void)
 345          {
 346   1          Hook_Timer125msEvent();
 347   1      }
 348          //-----------------------------------------------------------------------------
 349          // Core 250ms Events 
 350          //-----------------------------------------------------------------------------
 351          void Timer250msEvent(void)
 352          {
 353   1          Hook_Timer250msEvent();
 354   1      }
 355          //-----------------------------------------------------------------------------
 356          // Core 500ms Events 
 357          //-----------------------------------------------------------------------------
 358          void Timer500msEventA(void)
 359          {
 360   1          Hook_Timer500msEventA();
 361   1      }
 362          //-----------------------------------------------------------------------------
 363          void Timer500msEventB(void)
 364          {
 365   1          Hook_Timer500msEventB();
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 7   

 366   1      }
 367          //-----------------------------------------------------------------------------
 368          void Timer500msEventC(void)
 369          {
 370   1          Hook_Timer500msEventC();
 371   1      }
 372          //-----------------------------------------------------------------------------
 373          // Core 1sec Events/Hook Here
 374          //-----------------------------------------------------------------------------
 375          void Timer1SecEventA(void)
 376          {
 377   1          Hook_Timer1SecEventA();
 378   1      }
 379          //-----------------------------------------------------------------------------
 380          void Timer1SecEventB(void)
 381          {
 382   1          Hook_Timer1SecEventB();
 383   1      }
 384          //-----------------------------------------------------------------------------
 385          void Timer1SecEventC(void)
 386          {
 387   1          Hook_Timer1SecEventC();
 388   1      }
 389          
 390          //-----------------------------------------------------------------------------
 391          // 1 min events
 392          //-----------------------------------------------------------------------------
 393          void Timer1MinEvent(void)
 394          {
 395   1          Hook_Timer1MinEvent();
 396   1      }
 397          
 398          void Service_MS_5(void)
 399          {
 400   1          #if SUPPORT_EC_WDT_RESET
                  EWDCNTLR = T_WDTMR_OEM;     // Watch Dog Timeout Values(sec)
                  #endif  //SUPPORT_EC_WDT_RESET
 403   1      
 404   1          Timer5msEvent();
 405   1          Timer5msCnt++;
 406   1          Timer125msCnt++;
 407   1          if( Timer125msCnt >= 25 )
 408   1          {
 409   2              Timer125msCnt = 0;
 410   2              Timer125msEvent();
 411   2          }
 412   1          if ( Timer5msCnt & 1 )  // 10ms events
 413   1          {
 414   2              Timer10msEvent();
 415   2              Timer250msCnt++;
 416   2              if( Timer250msCnt >= 25 )
 417   2              {
 418   3                  Timer250msCnt = 0;
 419   3                  Timer250msEvent();
 420   3              }
 421   2          }
 422   1          else
 423   1          {
 424   2              switch( Timer5msCnt )   // Share Loading Branch Control
 425   2              {
 426   3                  case 2: Timer50msEventA();
 427   3                          break;
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 8   

 428   3                  case 4: Timer50msEventB();
 429   3                          break;
 430   3                  case 6: Timer50msEventC();
 431   3                          break;
 432   3                  case 8: Timer100msCntB++;
 433   3                          if ( Timer100msCntB & 1 )
 434   3                          {
 435   4                              Timer100msEventA();
 436   4                          }
 437   3                          else
 438   3                          {
 439   4                              Timer100msEventB();
 440   4                          }
 441   3                          break;
 442   3      
 443   3                  default:    Timer5msCnt=0;
 444   3                              break;
 445   3              }
 446   2      
 447   2              if ( Timer5msCnt == 0x00 )
 448   2              {   // 50msec
 449   3                  Timer100msCnt ++;
 450   3                  if ( Timer100msCnt & 1 )
 451   3                  {
 452   4                      Timer100msEventC();
 453   4                  }
 454   3                  else
 455   3                  {   // 100msec
 456   4                      switch( Timer100msCnt )
 457   4                      {
 458   5                          case 2:     Timer500msEventA();
 459   5                                      break;
 460   5                          case 4:     Timer500msEventB();
 461   5                                      break;
 462   5                          case 6:     Timer500msEventC();
 463   5                                      break;
 464   5                          case 8:     Timer1SecEventA();
 465   5                                      break;
 466   5                          case 10:    Timer500msEventA();
 467   5                                      break;
 468   5                          case 12:    Timer500msEventB();
 469   5                                      break;
 470   5                          case 14:    Timer500msEventC();
 471   5                                      break;
 472   5                          case 16:    Timer1SecEventB();
 473   5                                      break;
 474   5                          case 18:    Timer1SecEventC();
 475   5                                      break;
 476   5                          default:    // 1 Sec
 477   5                                      Timer100msCnt = 0;
 478   5                                      Timer1SecCnt ++;
 479   5                                      if ( Timer1SecCnt == 10 )
 480   5                                      {
 481   6                                          Timer1MinEvent();
 482   6                                          Timer1SecCnt=0;
 483   6                                      }
 484   5                                      break;
 485   5      
 486   5                      }
 487   4                  }
 488   3              }
 489   2          }
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 9   

 490   1      }
 491          
 492          //-----------------------------------------------------------------------------
 493          // Data to RAM Debug function
 494          //-----------------------------------------------------------------------------
 495          void RamDebug(unsigned char dbgcode)
 496          {
 497   1          PORT_BYTE_PNTR ClearIndex;
 498   1          PORT_BYTE_PNTR byte_register_pntr;
 499   1          BYTE index;
 500   1          BYTE iLoop;
 501   1      
 502   1          byte_register_pntr = DebugRamAddr+DebugRamRange;
 503   1          index = *byte_register_pntr;
 504   1          *byte_register_pntr +=1;
 505   1      
 506   1          if ( *byte_register_pntr == DebugRamRange )
 507   1          {
 508   2              *byte_register_pntr = 0;
 509   2              ClearIndex= DebugRamAddr;
 510   2      
 511   2              for (iLoop=0x00;iLoop<DebugRamRange;iLoop++)
 512   2              {
 513   3                  *ClearIndex=0x00;
 514   3                  ClearIndex++;
 515   3              }
 516   2          }
 517   1      
 518   1          byte_register_pntr = DebugRamAddr + index;
 519   1          *byte_register_pntr = dbgcode;
 520   1      }
 521          
 522          //-----------------------------------------------------------------------------
 523          
 524          
 525          //*****************************************************************************
 526          // CORE MAIN END
 527          //*****************************************************************************
 528          
 529          /*-----------------------------------------------------------------------------
 530           * End
 531           *---------------------------------------------------------------------------*/
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DisableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 24
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 27
0002 00                NOP     
                                           ; SOURCE LINE # 28
0003 00                NOP     
                                           ; SOURCE LINE # 29
0004 00                NOP     
                                           ; SOURCE LINE # 30
0005 00                NOP     
                                           ; SOURCE LINE # 31
0006 22                RET     
             ; FUNCTION DisableAllInterrupt (END)

             ; FUNCTION L?0089 (BEGIN)
0000 901000            MOV     DPTR,#01000H
0003 E0                MOVX    A,@DPTR
0004 547F              ANL     A,#07FH
0006 F0                MOVX    @DPTR,A
             ; FUNCTION EnableAllInterrupt (BEGIN)
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 38
0007 D2AF              SETB    EA
                                           ; SOURCE LINE # 39
0009 22                RET     
             ; FUNCTION EnableAllInterrupt (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 49
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0000 7581D0            MOV     SP,#0D0H
                                           ; SOURCE LINE # 54
0003 7800        E     MOV     R0,#LOW ExitRamCodeCommand
0005 E6                MOV     A,@R0
0006 B4AA0F            CJNE    A,#0AAH,?C0003
0009 7800        E     MOV     R0,#LOW CORE_PMFLAG
000B E6                MOV     A,@R0
000C 30E009            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 60
000F 120000      R     LCALL   L?0089
                                           ; SOURCE LINE # 61
0012 E4                CLR     A
0013 7800        E     MOV     R0,#LOW ExitRamCodeCommand
0015 F6                MOV     @R0,A
                                           ; SOURCE LINE # 62
0016 8017              SJMP    ?C0004
0018         ?C0003:
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
0018 120000      R     LCALL   L?0089
                                           ; SOURCE LINE # 68
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 11  

001B E4                CLR     A
001C 7800        E     MOV     R0,#LOW ExitRamCodeCommand
001E F6                MOV     @R0,A
                                           ; SOURCE LINE # 69
001F A3                INC     DPTR
0020 743F              MOV     A,#03FH
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
0023 901007            MOV     DPTR,#01007H
0026 740F              MOV     A,#0FH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 71
0029 120000      E     LCALL   Reset_Initialization
                                           ; SOURCE LINE # 72
002C 120000      E     LCALL   vInitEnableInterrupt
                                           ; SOURCE LINE # 77
002F         ?C0004:
                                           ; SOURCE LINE # 79
002F 120000      E     LCALL   Init_Cache
0032         ?C0005:
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0032 120000      R     LCALL   main_service
                                           ; SOURCE LINE # 100
0035 120000      R     LCALL   EnableInterrupt
                                           ; SOURCE LINE # 101
0038 00                NOP     
                                           ; SOURCE LINE # 102
0039 00                NOP     
                                           ; SOURCE LINE # 103
003A 120000      R     LCALL   vCheckChipCanSleep
003D 5016              JNC     ?C0007
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
003F 120000      E     LCALL   ScanAUXDeviceStep
                                           ; SOURCE LINE # 127
0042 E500        E     MOV     A,Service
0044 700F              JNZ     ?C0007
0046 E500        E     MOV     A,Service1
0048 700B              JNZ     ?C0007
                                           ; SOURCE LINE # 128
                                           ; SOURCE LINE # 129
004A 758701            MOV     PCON,#01H
                                           ; SOURCE LINE # 130
004D 00                NOP     
                                           ; SOURCE LINE # 131
004E 00                NOP     
                                           ; SOURCE LINE # 132
004F 00                NOP     
                                           ; SOURCE LINE # 133
0050 00                NOP     
                                           ; SOURCE LINE # 134
0051 00                NOP     
                                           ; SOURCE LINE # 135
0052 00                NOP     
                                           ; SOURCE LINE # 136
0053 00                NOP     
                                           ; SOURCE LINE # 137
0054 00                NOP     
                                           ; SOURCE LINE # 138
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 12  

                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
0055         ?C0007:
                                           ; SOURCE LINE # 141
0055 D200        E     SETB    F_Service_UNLOCK
                                           ; SOURCE LINE # 142
0057 80D9              SJMP    ?C0005
             ; FUNCTION main (END)

             ; FUNCTION vCheckChipCanSleep (BEGIN)
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0000 120000      E     LCALL   OemSetWakeUpSource
0003 4002              JC      ?C0010
0005         ?C0011:
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
0005 C3                CLR     C
0006 22                RET     
                                           ; SOURCE LINE # 157
0007         ?C0010:
                                           ; SOURCE LINE # 159
0007 E500        E     MOV     A,Service
0009 D3                SETB    C
000A 9400              SUBB    A,#00H
000C 5006              JNC     ?C0014
000E E500        E     MOV     A,Service1
0010 9400              SUBB    A,#00H
0012 4002              JC      ?C0013
0014         ?C0014:
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
0014 C3                CLR     C
0015 22                RET     
                                           ; SOURCE LINE # 162
0016         ?C0013:
                                           ; SOURCE LINE # 164
0016 7800        E     MOV     R0,#LOW CORE_PMFLAG
0018 E6                MOV     A,@R0
0019         ?C0015:
                                           ; SOURCE LINE # 166
0019 D3                SETB    C
                                           ; SOURCE LINE # 167
001A         ?C0012:
001A 22                RET     
             ; FUNCTION vCheckChipCanSleep (END)

             ; FUNCTION EnableInterrupt (BEGIN)
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
0000 901107            MOV     DPTR,#01107H
0003 E0                MOVX    A,@DPTR
0004 4403              ORL     A,#03H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0007 020000      R     LJMP    EnableAllInterrupt
             ; FUNCTION EnableInterrupt (END)

             ; FUNCTION main_service (BEGIN)
                                           ; SOURCE LINE # 214
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 13  

                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0000 807D              SJMP    ?C0085
0002         ?C0017:
                                           ; SOURCE LINE # 218
0002 E500        E     MOV     A,_W1+01H
0004 4500        E     ORL     A,_W1
0006 7003              JNZ     $ + 5H
0008 020000      R     LJMP    ?C0026
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
000B E4                CLR     A
000C F500        E     MOV     _R1,A
000E         ?C0019:
                                           ; SOURCE LINE # 222
000E E500        E     MOV     A,_W1+01H
0010 20E00F            JB      ACC.0,?C0020
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0013 E500        E     MOV     A,_W1
0015 C3                CLR     C
0016 13                RRC     A
0017 F500        E     MOV     _W1,A
0019 E500        E     MOV     A,_W1+01H
001B 13                RRC     A
001C F500        E     MOV     _W1+01H,A
                                           ; SOURCE LINE # 225
001E 0500        E     INC     _R1
                                           ; SOURCE LINE # 226
0020 80EC              SJMP    ?C0019
0022         ?C0020:
                                           ; SOURCE LINE # 228
0022 E500        E     MOV     A,_R1
0024 C3                CLR     C
0025 9408              SUBB    A,#08H
0027 5015              JNC     ?C0021
                                           ; SOURCE LINE # 229
                                           ; SOURCE LINE # 230
0029 E500        E     MOV     A,_R1
002B 5407              ANL     A,#07H
002D FF                MOV     R7,A
002E 7401              MOV     A,#01H
0030 A807              MOV     R0,AR7
0032 08                INC     R0
0033 8002              SJMP    ?C0082
0035         ?C0081:
0035 C3                CLR     C
0036 33                RLC     A
0037         ?C0082:
0037 D8FC              DJNZ    R0,?C0081
0039 F4                CPL     A
003A 5200        E     ANL     Service,A
                                           ; SOURCE LINE # 231
003C 8013              SJMP    ?C0022
003E         ?C0021:
                                           ; SOURCE LINE # 233
                                           ; SOURCE LINE # 236
003E E500        E     MOV     A,_R1
0040 5407              ANL     A,#07H
0042 FF                MOV     R7,A
0043 7401              MOV     A,#01H
0045 A807              MOV     R0,AR7
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 14  

0047 08                INC     R0
0048 8002              SJMP    ?C0084
004A         ?C0083:
004A C3                CLR     C
004B 33                RLC     A
004C         ?C0084:
004C D8FC              DJNZ    R0,?C0083
004E F4                CPL     A
004F 5200        E     ANL     Service1,A
                                           ; SOURCE LINE # 237
0051         ?C0022:
                                           ; SOURCE LINE # 239
0051 AF00        E     MOV     R7,_R1
0053 EF                MOV     A,R7
0054 25E0              ADD     A,ACC
0056 2400        R     ADD     A,#LOW service_table
0058 F582              MOV     DPL,A
005A E4                CLR     A
005B 3400        R     ADDC    A,#HIGH service_table
005D F583              MOV     DPH,A
005F E4                CLR     A
0060 93                MOVC    A,@A+DPTR
0061 FE                MOV     R6,A
0062 7401              MOV     A,#01H
0064 93                MOVC    A,@A+DPTR
0065 AA06              MOV     R2,AR6
0067 F9                MOV     R1,A
0068 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 241
006B 901500            MOV     DPTR,#01500H
006E E0                MOVX    A,@DPTR
006F 30E104            JNB     ACC.1,?C0023
0072 D200        E     SETB    F_Service_PCI2
0074 8009              SJMP    ?C0024
0076         ?C0023:
                                           ; SOURCE LINE # 242
0076 901304            MOV     DPTR,#01304H
0079 E0                MOVX    A,@DPTR
007A 30E102            JNB     ACC.1,?C0024
007D D200        E     SETB    F_Service_PCI
007F         ?C0024:
                                           ; SOURCE LINE # 245
007F         ?C0085:
007F AF00        E     MOV     R7,Service1
0081 EF                MOV     A,R7
0082 AD00        E     MOV     R5,Service
0084 F500        E     MOV     _W1,A
0086 ED                MOV     A,R5
0087 F500        E     MOV     _W1+01H,A
                                           ; SOURCE LINE # 247
0089 020000      R     LJMP    ?C0017
                                           ; SOURCE LINE # 249
008C         ?C0026:
008C 22                RET     
             ; FUNCTION main_service (END)

             ; FUNCTION Service_UNLOCK (BEGIN)
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 258
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 15  

0003 547F              ANL     A,#07FH
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 259
0006 22                RET     
             ; FUNCTION Service_UNLOCK (END)

             ; FUNCTION Service_Reserved_1 (BEGIN)
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 267
0000 22                RET     
             ; FUNCTION Service_Reserved_1 (END)

             ; FUNCTION Service_Reserved_2 (BEGIN)
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 275
0000 22                RET     
             ; FUNCTION Service_Reserved_2 (END)

             ; FUNCTION Service_Reserved_3 (BEGIN)
                                           ; SOURCE LINE # 280
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 283
0000 22                RET     
             ; FUNCTION Service_Reserved_3 (END)

             ; FUNCTION Timer5msEvent (BEGIN)
                                           ; SOURCE LINE # 288
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0000 120000      E     LCALL   ReSendPS2PendingData
                                           ; SOURCE LINE # 291
0003 020000      E     LJMP    Hook_Timer5msEvent
             ; FUNCTION Timer5msEvent (END)

             ; FUNCTION Timer10msEvent (BEGIN)
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
                                           ; SOURCE LINE # 299
0000 120000      E     LCALL   SetStartScanAUXFlag
                                           ; SOURCE LINE # 300
0003 020000      E     LJMP    Hook_Timer10msEvent
             ; FUNCTION Timer10msEvent (END)

             ; FUNCTION Timer50msEventA (BEGIN)
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0000 020000      E     LJMP    Hook_Timer50msEventA
             ; FUNCTION Timer50msEventA (END)

             ; FUNCTION Timer50msEventB (BEGIN)
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
                                           ; SOURCE LINE # 314
0000 020000      E     LJMP    Hook_Timer50msEventB
             ; FUNCTION Timer50msEventB (END)

             ; FUNCTION Timer50msEventC (BEGIN)
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 319
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 16  

                                           ; SOURCE LINE # 320
0000 020000      E     LJMP    Hook_Timer50msEventC
             ; FUNCTION Timer50msEventC (END)

             ; FUNCTION Timer100msEventA (BEGIN)
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0000 020000      E     LJMP    Hook_Timer100msEventA
             ; FUNCTION Timer100msEventA (END)

             ; FUNCTION Timer100msEventB (BEGIN)
                                           ; SOURCE LINE # 331
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
0000 020000      E     LJMP    Hook_Timer100msEventB
             ; FUNCTION Timer100msEventB (END)

             ; FUNCTION Timer100msEventC (BEGIN)
                                           ; SOURCE LINE # 337
                                           ; SOURCE LINE # 338
                                           ; SOURCE LINE # 339
0000 020000      E     LJMP    Hook_Timer100msEventC
             ; FUNCTION Timer100msEventC (END)

             ; FUNCTION Timer125msEvent (BEGIN)
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
0000 020000      E     LJMP    Hook_Timer125msEvent
             ; FUNCTION Timer125msEvent (END)

             ; FUNCTION Timer250msEvent (BEGIN)
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 353
0000 020000      E     LJMP    Hook_Timer250msEvent
             ; FUNCTION Timer250msEvent (END)

             ; FUNCTION Timer500msEventA (BEGIN)
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0000 020000      E     LJMP    Hook_Timer500msEventA
             ; FUNCTION Timer500msEventA (END)

             ; FUNCTION Timer500msEventB (BEGIN)
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
                                           ; SOURCE LINE # 365
0000 020000      E     LJMP    Hook_Timer500msEventB
             ; FUNCTION Timer500msEventB (END)

             ; FUNCTION Timer500msEventC (BEGIN)
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
0000 020000      E     LJMP    Hook_Timer500msEventC
             ; FUNCTION Timer500msEventC (END)

             ; FUNCTION Timer1SecEventA (BEGIN)
                                           ; SOURCE LINE # 375
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 17  

                                           ; SOURCE LINE # 376
                                           ; SOURCE LINE # 377
0000 020000      E     LJMP    Hook_Timer1SecEventA
             ; FUNCTION Timer1SecEventA (END)

             ; FUNCTION Timer1SecEventB (BEGIN)
                                           ; SOURCE LINE # 380
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
0000 020000      E     LJMP    Hook_Timer1SecEventB
             ; FUNCTION Timer1SecEventB (END)

             ; FUNCTION Timer1SecEventC (BEGIN)
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0000 020000      E     LJMP    Hook_Timer1SecEventC
             ; FUNCTION Timer1SecEventC (END)

             ; FUNCTION Timer1MinEvent (BEGIN)
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
                                           ; SOURCE LINE # 395
0000 020000      E     LJMP    Hook_Timer1MinEvent
             ; FUNCTION Timer1MinEvent (END)

             ; FUNCTION Service_MS_5 (BEGIN)
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 404
0000 120000      R     LCALL   Timer5msEvent
                                           ; SOURCE LINE # 405
0003 900000      E     MOV     DPTR,#Timer5msCnt
0006 E0                MOVX    A,@DPTR
0007 04                INC     A
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 406
0009 900000      E     MOV     DPTR,#Timer125msCnt
000C E0                MOVX    A,@DPTR
000D 04                INC     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
000F E0                MOVX    A,@DPTR
0010 C3                CLR     C
0011 9419              SUBB    A,#019H
0013 4005              JC      ?C0048
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0015 E4                CLR     A
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
0017 120000      R     LCALL   Timer125msEvent
                                           ; SOURCE LINE # 411
001A         ?C0048:
                                           ; SOURCE LINE # 412
001A 900000      E     MOV     DPTR,#Timer5msCnt
001D E0                MOVX    A,@DPTR
001E 30E017            JNB     ACC.0,?C0049
                                           ; SOURCE LINE # 413
                                           ; SOURCE LINE # 414
0021 120000      R     LCALL   Timer10msEvent
                                           ; SOURCE LINE # 415
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 18  

0024 900000      E     MOV     DPTR,#Timer250msCnt
0027 E0                MOVX    A,@DPTR
0028 04                INC     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
002A E0                MOVX    A,@DPTR
002B C3                CLR     C
002C 9419              SUBB    A,#019H
002E 5003              JNC     $ + 5H
0030 020000      R     LJMP    ?C0075
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0035 020000      R     LJMP    Timer250msEvent
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0038         ?C0049:
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
0038 900000      E     MOV     DPTR,#Timer5msCnt
003B E0                MOVX    A,@DPTR
003C 24FC              ADD     A,#0FCH
003E 6011              JZ      ?C0054
0040 24FE              ADD     A,#0FEH
0042 6012              JZ      ?C0055
0044 24FE              ADD     A,#0FEH
0046 6013              JZ      ?C0056
0048 2406              ADD     A,#06H
004A 7023              JNZ     ?C0059
                                           ; SOURCE LINE # 425
                                           ; SOURCE LINE # 426
004C         ?C0053:
004C 120000      R     LCALL   Timer50msEventA
                                           ; SOURCE LINE # 427
004F 8023              SJMP    ?C0052
                                           ; SOURCE LINE # 428
0051         ?C0054:
0051 120000      R     LCALL   Timer50msEventB
                                           ; SOURCE LINE # 429
0054 801E              SJMP    ?C0052
                                           ; SOURCE LINE # 430
0056         ?C0055:
0056 120000      R     LCALL   Timer50msEventC
                                           ; SOURCE LINE # 431
0059 8019              SJMP    ?C0052
                                           ; SOURCE LINE # 432
005B         ?C0056:
005B 900000      E     MOV     DPTR,#Timer100msCntB
005E E0                MOVX    A,@DPTR
005F 04                INC     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 433
0061 E0                MOVX    A,@DPTR
0062 30E005            JNB     ACC.0,?C0057
                                           ; SOURCE LINE # 434
                                           ; SOURCE LINE # 435
0065 120000      R     LCALL   Timer100msEventA
                                           ; SOURCE LINE # 436
0068 800A              SJMP    ?C0052
006A         ?C0057:
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 19  

                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
006A 120000      R     LCALL   Timer100msEventB
                                           ; SOURCE LINE # 440
                                           ; SOURCE LINE # 441
006D 8005              SJMP    ?C0052
                                           ; SOURCE LINE # 443
006F         ?C0059:
006F E4                CLR     A
0070 900000      E     MOV     DPTR,#Timer5msCnt
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 445
0074         ?C0052:
                                           ; SOURCE LINE # 447
0074 900000      E     MOV     DPTR,#Timer5msCnt
0077 E0                MOVX    A,@DPTR
0078 7062              JNZ     ?C0075
                                           ; SOURCE LINE # 448
                                           ; SOURCE LINE # 449
007A 900000      E     MOV     DPTR,#Timer100msCnt
007D E0                MOVX    A,@DPTR
007E 04                INC     A
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0080 E0                MOVX    A,@DPTR
0081 30E003            JNB     ACC.0,?C0061
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 452
0084 020000      R     LJMP    Timer100msEventC
                                           ; SOURCE LINE # 453
0087         ?C0061:
                                           ; SOURCE LINE # 455
                                           ; SOURCE LINE # 456
0087 900000      E     MOV     DPTR,#Timer100msCnt
008A E0                MOVX    A,@DPTR
008B 120000      E     LCALL   ?C?CCASE
008E 0000        R     DW      ?C0064
0090 02                DB      02H
0091 0000        R     DW      ?C0065
0093 04                DB      04H
0094 0000        R     DW      ?C0066
0096 06                DB      06H
0097 0000        R     DW      ?C0067
0099 08                DB      08H
009A 0000        R     DW      ?C0068
009C 0A                DB      0AH
009D 0000        R     DW      ?C0069
009F 0C                DB      0CH
00A0 0000        R     DW      ?C0066
00A2 0E                DB      0EH
00A3 0000        R     DW      ?C0071
00A5 10                DB      010H
00A6 0000        R     DW      ?C0072
00A8 12                DB      012H
00A9 0000              DW      00H
00AB 0000        R     DW      ?C0073
                                           ; SOURCE LINE # 457
                                           ; SOURCE LINE # 458
00AD         ?C0064:
                                           ; SOURCE LINE # 459
00AD 8007              SJMP    ?C0086
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 20  

                                           ; SOURCE LINE # 460
00AF         ?C0065:
                                           ; SOURCE LINE # 461
00AF 8008              SJMP    ?C0087
                                           ; SOURCE LINE # 462
00B1         ?C0066:
                                           ; SOURCE LINE # 463
00B1 8009              SJMP    ?C0088
                                           ; SOURCE LINE # 464
00B3         ?C0067:
00B3 020000      R     LJMP    Timer1SecEventA
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
00B6         ?C0068:
00B6         ?C0086:
00B6 020000      R     LJMP    Timer500msEventA
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
00B9         ?C0069:
00B9         ?C0087:
00B9 020000      R     LJMP    Timer500msEventB
                                           ; SOURCE LINE # 469
                                           ; SOURCE LINE # 470
00BC         ?C0088:
00BC 020000      R     LJMP    Timer500msEventC
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
00BF         ?C0071:
00BF 020000      R     LJMP    Timer1SecEventB
                                           ; SOURCE LINE # 473
                                           ; SOURCE LINE # 474
00C2         ?C0072:
00C2 020000      R     LJMP    Timer1SecEventC
                                           ; SOURCE LINE # 475
                                           ; SOURCE LINE # 476
00C5         ?C0073:
                                           ; SOURCE LINE # 477
00C5 E4                CLR     A
00C6 900000      E     MOV     DPTR,#Timer100msCnt
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
00CA 900000      E     MOV     DPTR,#Timer1SecCnt
00CD E0                MOVX    A,@DPTR
00CE 04                INC     A
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 479
00D0 E0                MOVX    A,@DPTR
00D1 B40A08            CJNE    A,#0AH,?C0075
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
00D4 120000      R     LCALL   Timer1MinEvent
                                           ; SOURCE LINE # 482
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#Timer1SecCnt
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
                                           ; SOURCE LINE # 484
                                           ; SOURCE LINE # 486
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
                                           ; SOURCE LINE # 490
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 21  

00DC         ?C0075:
00DC 22                RET     
             ; FUNCTION Service_MS_5 (END)

             ; FUNCTION _RamDebug (BEGIN)
                                           ; SOURCE LINE # 495
;---- Variable 'dbgcode' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 496
                                           ; SOURCE LINE # 502
;---- Variable 'byte_register_pntr' assigned to Register 'R4/R5' ----
0000 7DFF              MOV     R5,#0FFH
0002 7C06              MOV     R4,#06H
                                           ; SOURCE LINE # 503
0004 8D82              MOV     DPL,R5
0006 8C83              MOV     DPH,R4
0008 E0                MOVX    A,@DPTR
;---- Variable 'index' assigned to Register 'R1' ----
0009 F9                MOV     R1,A
                                           ; SOURCE LINE # 504
000A E0                MOVX    A,@DPTR
000B 04                INC     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
000D E0                MOVX    A,@DPTR
000E B4FF27            CJNE    A,#0FFH,?C0076
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0011 E4                CLR     A
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0013 900000      R     MOV     DPTR,#ClearIndex
0016 7406              MOV     A,#06H
0018 F0                MOVX    @DPTR,A
0019 A3                INC     DPTR
001A E4                CLR     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
;---- Variable 'iLoop' assigned to Register 'R6' ----
001C FE                MOV     R6,A
001D         ?C0077:
                                           ; SOURCE LINE # 512
                                           ; SOURCE LINE # 513
001D 900000      R     MOV     DPTR,#ClearIndex
0020 E0                MOVX    A,@DPTR
0021 FA                MOV     R2,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 F582              MOV     DPL,A
0026 8A83              MOV     DPH,R2
0028 E4                CLR     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
002A 900000      R     MOV     DPTR,#ClearIndex
002D 75F001            MOV     B,#01H
0030 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 515
0033 0E                INC     R6
0034 EE                MOV     A,R6
0035 B4FFE5            CJNE    A,#0FFH,?C0077
                                           ; SOURCE LINE # 516
0038         ?C0076:
                                           ; SOURCE LINE # 518
C51 COMPILER V7.06   CORE_MAIN                                                             07/06/2010 09:59:43 PAGE 22  

0038 AE01              MOV     R6,AR1
003A E9                MOV     A,R1
003B 2400              ADD     A,#00H
003D FD                MOV     R5,A
003E E4                CLR     A
003F 3406              ADDC    A,#06H
                                           ; SOURCE LINE # 519
0041 8D82              MOV     DPL,R5
0043 F583              MOV     DPH,A
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
0047 22                RET     
             ; FUNCTION _RamDebug (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    644    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
