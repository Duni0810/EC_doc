C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE CORE_SCAN
OBJECT MODULE PLACED IN SOURCE\CORE_SCAN.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe SOURCE\CORE_SCAN.C LA WL(1) CD OT(8,SIZE) OR

stmt level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_SCN.C - code to handle local keyboard scanning.
   3           *
   4           * Copyright (c) 1983-2009, Insyde Software Corporation. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of Insyde Software Corporation.
  10           *---------------------------------------------------------------------------*/
  11          #include "CORE_INCLUDE.H"
  12          #include "OEM_INCLUDE.H"
  13          
  14          /*-----------------------------------------------------------------------------
  15           * Local Parameter Definition
  16           *---------------------------------------------------------------------------*/
  17          #define _KBSCAN_DELAY               1
  18          
  19          /*-----------------------------------------------------------------------------
  20           * Local xdata Definition
  21           *---------------------------------------------------------------------------*/
  22          const BYTE xdata *Ext_Hotkey_Pntr;
  23          
  24          /* ----------------------------------------------------------------------------
  25           * FUNCTION:   scan_keys
  26           *
  27           * Scan key matrix once.
  28           *
  29           * Return: value != 0, scan activity detected, scan again later.
  30           *         value  = 0, no scan activity detected.
  31           * ------------------------------------------------------------------------- */
  32          BYTE scan_keys(void)
  33          {
  34   1          BYTE    SCAN_Flag = FALSE;
  35   1          BYTE    SCAN_Cnt;
  36   1          BYTE    SCAN_Val;
  37   1      
  38   1          scan.saf_make  = 0;
  39   1          scan.saf_break = 0;
  40   1          scan.saf_keys  = 0;
  41   1      
  42   1          if (typematic.byte)
  43   1          {
  44   2              check_tm(typematic);    // Check typematic.
  45   2          }
  46   1      
  47   1          if (new_keyh.byte)          // Exist Debounce key?
  48   1          {   // Yes, bounding.
  49   2              scan.saf_make = 1;      // Set debounce make bit.
  50   2              debounce_key();
  51   2              SCAN_Flag = TRUE;
  52   2          }
  53   1      
  54   1          if( !SCAN_Flag )    // Otherwise, scan all.
  55   1          {
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 2   

  56   2              for (SCAN_Cnt=0;SCAN_Cnt<16;SCAN_Cnt++)
  57   2              {
  58   3                  Write_Strobe(SCAN_Cnt);
  59   3                  #if ( _KBSCAN_DELAY > 0 )
  60   3                  Microsecond_Delay(_KBSCAN_DELAY);
  61   3                  #endif
  62   3                  SCAN_Val = KSI;     // Read in KI 0 - 7 sense line data. */
  63   3                  SCAN_Val = (~SCAN_Val) ^ bscan_matrix[SCAN_Cnt];
  64   3      
  65   3                  if (SCAN_Val != 0)
  66   3                  {
  67   4                      check_scan(SCAN_Val, SCAN_Cnt);
  68   4                  }
  69   3      
  70   3                  if (bscan_matrix[SCAN_Cnt])
  71   3                  {   // Here, if current still active.
  72   4                      scan.saf_keys = 1;      // Set keys active bits. Check all key release.
  73   4                  }
  74   3      
  75   3                  KSOL  = 0xFF;
  76   3                  KSOH1 = 0xFF;
  77   3                  KSOH2 = 0xFF;
  78   3      
  79   3                  #if (ExternMatrixGPO)
                          GPOKeyPin1_HI();
                          #endif
  82   3              }
  83   2      
  84   2              // If ghost exist, make key clear.
  85   2              if (new_keyl.field.ghost == 1)
  86   2              {
  87   3                  new_keyl.field.ghost = 0;   // Ghost flag is set. Clear it.
  88   3                  SCAN_Val = new_keyl.byte & 7;
  89   3                  if (SCAN_Val == 0)
  90   3                  {
  91   4                      SCAN_Val = Byte_Mask((BYTE) (new_keyh.field.input));
  92   4                      SCAN_Val = SCAN_Val & diode_key;
  93   4                  }
  94   3      
  95   3                  if (SCAN_Val == 0)
  96   3                  {
  97   4                      new_keyh.byte = 0;  // Clear new key.
  98   4                      new_keyl.byte = 0;
  99   4                  }
 100   3              }
 101   2          }
 102   1      
 103   1          return((BYTE) (scan.saf_make + scan.saf_break + scan.saf_keys));
 104   1      }
 105          
 106          /* ----------------------------------------------------------------------------
 107           * FUNCTION: Write_Strobe
 108           *
 109           * Writes the scan matrix KSO[15:0] lines based on Scan Line bit number.
 110           *
 111           * KSO[15:0] will be all floats or open except for the bit corresponding to
 112           * the Scan Line number.  This bit will be low to be detected by the sense
 113           * line input port later.
 114           *
 115           * Config.Msk_Strobe_H and Config.Msk_Strobe_L specify which of the 16 bits on
 116           * the port are used for the scanner.  (1 = Scanner, 0 = Other OEM function).
 117           * This allows port pins which are not used for the scanner output lines to be
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 3   

 118           * used for something else.
 119           *
 120           * Input: Scan line number.
 121           * ------------------------------------------------------------------------- */
 122          void Write_Strobe(BYTE scan_line_num)
 123          {
 124   1          if (scan_line_num < 8)
 125   1          {
 126   2              KSOL  =~ (0x01 << scan_line_num);
 127   2              KSOH1 = 0xFF;
 128   2              KSOH2 = 0xFF;
 129   2      
 130   2              #if (ExternMatrixGPO)
                      GPOKeyPin1_HI();
                      #endif
 133   2          }
 134   1          else
 135   1          {
 136   2              KSOL  = 0xFF;
 137   2              KSOH1 =~ (0x01<<(scan_line_num-0x08));
 138   2              KSOH2 = 0xFF;
 139   2      
 140   2              #if (ExternMatrixGPO)
                      GPOKeyPin1_HI();
                      #endif
 143   2          }
 144   1      }
 145          
 146          /* ----------------------------------------------------------------------------
 147           * FUNCTION: check_scan
 148           *
 149           * Input:
 150           *     changes = Any bit set indicates there is a difference in state from
 151           *         last KSI to this KSI.
 152           *     scan_address = Address of strobe line that was low when changes was
 153           *         computed.
 154           *
 155           * NOTE:  For the shift and bit test of "changes" to work, "changes" MUST be
 156           * unsigned.  (Right shifting an unsigned quantity fills vacated bits with
 157           * zeros.  Right shifting a signed quantity will fill vacated bits with sign
 158           * bits on some machines and zero bits on others.)
 159           * ------------------------------------------------------------------------- */
 160          static void check_scan(BYTE changes, BYTE scan_address)
 161          {
 162   1          BYTE flag;
 163   1          BYTE change_make_key;
 164   1          BYTE bit_num;
 165   1      
 166   1          flag = FALSE;                   // Simple Matrix.
 167   1          if (new_keyl.field.ghost == 1)
 168   1          {
 169   2              flag = TRUE;
 170   2          }
 171   1          else
 172   1          {   /* Find 0 -> 1 's. */
 173   2              change_make_key = changes & ~bscan_matrix[scan_address];
 174   2              if (change_make_key == 0)
 175   2              {
 176   3                  flag = FALSE;
 177   3              }
 178   2              else if (find_paths(change_make_key, scan_address))
 179   2              {
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 4   

 180   3                  flag = TRUE;    /* TRUE if ghost keys. */
 181   3              }
 182   2          }
 183   1      
 184   1          if (flag)
 185   1          {   /* Ghost exists. */
 186   2              new_keyl.field.ghost = 1;  /* Set ghost flag. */
 187   2      
 188   2              /* Only look at 1 -> 0 transition & diode key always no ghost. */
 189   2              changes &= bscan_matrix[scan_address] | diode_key;
 190   2          }
 191   1      
 192   1          bit_num = 0;
 193   1          while (changes != 0)
 194   1          {
 195   2              if (changes & 0x01)     /* Look at changes 1 bit at a time. */
 196   2              {
 197   3                  cscfnd(bit_num, scan_address);
 198   3              }
 199   2              bit_num++;
 200   2              changes = changes >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
 201   2          }
 202   1      }
 203          
 204          /* ----------------------------------------------------------------------------
 205           * FUNCTION:   cscfnd
 206           *
 207           * Find changed bit.  This subroutine is called for each bit in this KSI that
 208           * is different from last KSI.
 209           * ------------------------------------------------------------------------- */
 210          static void cscfnd(BYTE bit_num, BYTE scan_address)
 211          {
 212   1          if (bscan_matrix[scan_address] & Byte_Mask(bit_num))
 213   1          {
 214   2              if (scan.saf_break == 0)
 215   2              {
 216   3                  scan.saf_break = 1;
 217   3                  setup_debounce(bit_num, scan_address, BREAK_EVENT);
 218   3              }
 219   2          }
 220   1          else
 221   1          {
 222   2              if (scan.saf_make == 0)
 223   2              {
 224   3                  scan.saf_make = 1;
 225   3                  setup_debounce(bit_num, scan_address, MAKE_EVENT);
 226   3              }
 227   2          }
 228   1      }
 229          
 230          /* ----------------------------------------------------------------------------
 231           * FUNCTION:   setup_debounce
 232           *
 233           * Input:
 234           *     scan_address = number of bit of KO.
 235           *     bit_num = number of bit that changed from last KI to this KI for KO.
 236           *     event = contact event (MAKE_EVENT or BREAK_EVENT).
 237           * ------------------------------------------------------------------------- */
 238          static void setup_debounce(BYTE bit_num, BYTE scan_address, BYTE event)
 239          {
 240   1          new_keyh.field.output = scan_address;
 241   1          new_keyh.field.input  = bit_num;
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 5   

 242   1          new_keyh.field.debounce_status = 1;
 243   1          new_keyl.field.state = 0;  /* Debounce has not counted out. */
 244   1          new_keyl.field.same  = 0;   /* Key activity indication. */
 245   1      
 246   1          if (event == MAKE_EVENT)
 247   1          {   /* For MAKE key (key pressed). */
 248   2              new_keyl.field.trans = 0;
 249   2              new_keyl.field.count = Ext_Cb2.field.Break_Count; /* Shouldn't this be Make_Count? */
 250   2          }
 251   1          else
 252   1          {   /* For BREAK key (key released). */
 253   2              new_keyl.field.trans = 1;
 254   2              new_keyl.field.count = Ext_Cb2.field.Make_Count; /* Shouldn't this be Break_Count? */
 255   2          }
 256   1      }
 257          
 258          /* ----------------------------------------------------------------------------
 259           * FUNCTION: find_paths
 260           *
 261           * Input:  DOWN_STATE  scan_address
 262           *         change_make_key
 263           *
 264           * Return: FALSE if no paths found, Otherwise returns TRUE.
 265           * ------------------------------------------------------------------------- */
 266          static FLAG find_paths(BYTE change_make_key, BYTE scan_address)
 267          {
 268   1          FLAG paths_found, done;
 269   1          BYTE paths, temp, bits;
 270   1          BYTE first_address;
 271   1      
 272   1          /* For the shift and bit test to work, "bits" MUST be unsigned.  (Right
 273   1             shifting an unsigned quantity fills vacated bits with zeros.  Right
 274   1             shifting a signed quantity will fill vacated bits with sign bits on some
 275   1             machines and zero bits on others.) */
 276   1          done = FALSE;
 277   1          paths_found = FALSE;
 278   1          first_address = scan_address;
 279   1      
 280   1          change_make_key &= ~(diode_key); /* Ignore diode key. */
 281   1          /* change_make_key = bKO_BITS. */
 282   1      
 283   1          if (change_make_key == 0)
 284   1          {
 285   2              done = TRUE; /* paths_found == FALSE */
 286   2          }
 287   1      
 288   1          if (!done)
 289   1          {
 290   2              paths = bscan_matrix[scan_address] | change_make_key;
 291   2              paths &= ~(diode_key);  /* Ignore diode key. */
 292   2              /* paths = bKO_PATHS. */
 293   2              if (paths == 0)
 294   2              {
 295   3                  done = TRUE;  /* paths_found == FALSE */
 296   3              }
 297   2          }
 298   1      
 299   1          while (!done)
 300   1          {
 301   2              scan_address++;
 302   2      
 303   2              //if(scan_address >= STANDARD_SCAN_LINES)
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 6   

 304   2              if (scan_address >= MAX_SCAN_LINES)
 305   2              {
 306   3                  scan_address = 0;   /* Wrap around */
 307   3              }
 308   2      
 309   2              if (scan_address == first_address)
 310   2              {
 311   3                  done = TRUE;        /* No scan lines left.  paths_found == FALSE */
 312   3              }
 313   2      
 314   2              if (!done)
 315   2              {   /* Check Path */
 316   3                  temp  = bscan_matrix[scan_address]; /* Any paths? */
 317   3                  temp &= ~(diode_key);               /* Ignore diode key */
 318   3      
 319   3                  if (temp != 0)
 320   3                  {    /* Paths found */
 321   4                      temp &= paths;  /* Do paths line up? */
 322   4                  }
 323   3      
 324   3                  if (temp != 0)
 325   3                  {   /* Paths line up */
 326   4                      if (change_make_key != temp)  /* Only 1 bit set? */
 327   4                      {   /* No, ghost exists. */
 328   5                          paths_found = TRUE;
 329   5                          done = TRUE;
 330   5                      }
 331   4      
 332   4                      if (!done)
 333   4                      {   /* The following checks if more than one bit is set to 1.
 334   5                          Because "bits" is unsigned, each shift moves the bit
 335   5                          under test out and a 0 bit in.  When the first 1 bit is
 336   5                          found, if "bits" == 0, this indicates that there is only
 337   5                          one bit set. */
 338   5                          bits = paths;  /* Only 1 bit set? */
 339   5                          temp = FALSE;
 340   5      
 341   5                          do
 342   5                          {
 343   6                              if (bits & 0x01)
 344   6                              {
 345   7                                  temp = TRUE;
 346   7                              }
 347   6      
 348   6                              /* Shift bit out (and a zero bit in) to check next bit. */
 349   6                              bits = bits >> 1;
 350   6                          } while (temp == FALSE);
 351   5      
 352   5                          if (bits != 0)
 353   5                          {   /* No, more than 1 bit set. */
 354   6                              paths_found = TRUE;
 355   6                              done = TRUE;
 356   6                          }
 357   5                      } /* if (!done) */
 358   4                  } /* if (temp != 0) */
 359   3              } /* if (!done) */
 360   2          } /* while (!done) */
 361   1      
 362   1          return (paths_found);
 363   1      }
 364          
 365          /* ----------------------------------------------------------------------------
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 7   

 366           * FUNCTION: debounce_key
 367           * ------------------------------------------------------------------------- */
 368          static void debounce_key(void)
 369          {
 370   1          BYTE    SCAN_Val;
 371   1      
 372   1          scan.scan_line = new_keyh.field.output;
 373   1          Write_Strobe(scan.scan_line);
 374   1      
 375   1          SCAN_Val = Byte_Mask((BYTE) (new_keyh.field.input));
 376   1          SCAN_Val &= ~Read_Scan_Lines();
 377   1      
 378   1          if (SCAN_Val != 0)
 379   1          {
 380   2              if (new_keyl.field.trans == 0)
 381   2              {
 382   3                  new_keyl.field.same = 1;    // last key detected as a MAKE,  same = 1.
 383   3              }
 384   2              else
 385   2              {
 386   3                  new_keyl.field.same = 0;    // last key detected as a BREAK, same = 0.
 387   3              }
 388   2          }
 389   1          else
 390   1          {
 391   2              if (new_keyl.field.trans == 0)
 392   2              {
 393   3                  new_keyl.field.same = 0;    // last key detected as a MAKE,  same = 0.
 394   3              }
 395   2              else
 396   2              {
 397   3                  new_keyl.field.same = 1;    // last key detected as a BREAK, same = 1.
 398   3              }
 399   2          }
 400   1      
 401   1          if (new_keyl.field.state == 0)
 402   1          {
 403   2              if (new_keyl.field.count != 0)
 404   2              {
 405   3                  new_keyl.field.count--;
 406   3              }
 407   2              else
 408   2              {
 409   3                  if (new_keyl.field.same == 0)
 410   3                  {
 411   4                      new_keyh.byte = 0;  // Debounce failed, so claer all data
 412   4                      new_keyl.byte = 0;
 413   4                  }
 414   3                  else
 415   3                  {
 416   4                      new_keyl.field.state = 1;
 417   4                  }
 418   3              }
 419   2          }
 420   1          else
 421   1          {
 422   2              if (new_keyl.field.same == 0)
 423   2              {
 424   3                  new_keyh.byte = 0;  // Debounce failed.
 425   3                  new_keyl.byte = 0;
 426   3              }
 427   2              else
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 8   

 428   2              {
 429   3                  change_valid();     // Debounce OK
 430   3              }
 431   2          }
 432   1      }
 433          
 434          /* ----------------------------------------------------------------
 435           * FUNCTION: Read_Scan_Lines - Read KSI[7:0] of the scan matrix
 436           *
 437           * Return: Data from sense lines that are enabled.
 438           *         The lines that are disabled return 1s.
 439           *
 440           * C prototype: BYTE Read_Scan_Lines();
 441           * ---------------------------------------------------------------- */
 442          BYTE Read_Scan_Lines(void)
 443          {
 444   1          return (KSI);
 445   1      }
 446          
 447          /* ---------------------------------------------------------------
 448           * FUNCTION: change_valid
 449           * --------------------------------------------------------------- */
 450          void change_valid(void)
 451          {
 452   1          BYTE temp, mask, event;
 453   1      
 454   1          mask = Byte_Mask((BYTE) (new_keyh.field.input));
 455   1          temp = bscan_matrix[new_keyh.field.output];
 456   1          temp = temp ^ mask;
 457   1          bscan_matrix[new_keyh.field.output] = temp;
 458   1      
 459   1          event = BREAK_EVENT;            // Ready for BREAK indication.
 460   1          if ((mask & temp) != 0)
 461   1          {
 462   2              event = MAKE_EVENT;
 463   2              typematic.byte = new_keyh.byte; // Set New Typematic Key.
 464   2              scan.TMscale = TM_SCALE;
 465   2              bTMcount = bTMdelay;
 466   2      
 467   2              ex_typematic.byte = 0x00;
 468   2          }
 469   1      
 470   1          Send_Scan2(new_keyh, event);
 471   1          new_keyh.byte = 0;
 472   1          new_keyl.byte = 0;
 473   1      }
 474          
 475          /* ----------------------------------------------------------------------------
 476           * FUNCTION: check_tm - Handle typematic function.
 477           *
 478           * Input: Typematic key
 479           * ------------------------------------------------------------------------- */
 480          static void check_tm(union KEY key)
 481          {
 482   1          BYTE    SCAN_flag = FALSE;
 483   1          BYTE    SACN_Val;
 484   1          SACN_Val = Byte_Mask((BYTE) (key.field.input));
 485   1          SACN_Val &= bscan_matrix[key.field.output];
 486   1      
 487   1          if (SACN_Val == 0)      // Release Typematic key?
 488   1          {
 489   2              typematic.byte = 0; // Clear Typematic.
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 9   

 490   2              SCAN_flag = TRUE;
 491   2          }
 492   1      
 493   1          if (!SCAN_flag)
 494   1          {
 495   2              scan.TMscale--;         // Count down Prescale.
 496   2              if (scan.TMscale != 0)
 497   2              {
 498   3                  SCAN_flag = TRUE;
 499   3              }
 500   2          }
 501   1      
 502   1          if (!SCAN_flag)
 503   1          {
 504   2              scan.TMscale = TM_SCALE;    // Reload prescale counter.
 505   2              bTMcount--;         // Count down TMcount.
 506   2              if (bTMcount != 0)
 507   2              {
 508   3                  SCAN_flag = TRUE;
 509   3              }
 510   2          }
 511   1      
 512   1          if (!SCAN_flag)
 513   1          {
 514   2              bTMcount = bTMrepeat;   // Reload TMcount.
 515   2              Send_Scan2(key, REPEAT_EVENT);
 516   2          }
 517   1      }
 518          
 519          /* ----------------------------------------------------------------
 520           * FUNCTION: Scan_Init - Initialize internal keyboard (scanner)
 521           * ---------------------------------------------------------------- */
 522          void Scan_Init(void)        // Lower all KSO lines for scan matrix
 523          {
 524   1          KSOL  = 0x00;
 525   1          KSOH1 = 0x00;
 526   1      
 527   1          #if ExtendMatrix    // The function of extend keys
                  KSOH2 = 0x00;
                  #endif
 530   1          #if (ExternMatrixGPO)
                  GPOKeyPin1Ctl = 0x40;   // output and pull high
                  GPOKeyPin1_LO();        // default low
                  #endif
 534   1      }
 535          
 536          /* ----------------------------------------------------------------
 537           * FUNCTION: Enable_Any_Key_Irq
 538           *
 539           * Setup for any key from scanner to generate an interrupt.
 540           *
 541           * Lower the "strobe" lines so that when any key is pressed at least one input
 542           * line will go low.  Any bits (out of the possible 16) that are not used for
 543           * the internal keyboard (scanner) are left alone.  This is done using
 544           * Config.Msk_Strobe_H and Config.Msk_Strobe_L.
 545           *
 546           * Then, if the internal keyboard (scanner) is enabled, allow the interrupt to
 547           * occur when a key is pressed on the scanner.
 548           * -------------------------------------------------------------- */
 549          void Enable_Any_Key_Irq(void)   // Lower all KSO lines for scan matrix
 550          {
 551   1          KSOL  = 0x00;
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 10  

 552   1          KSOH1 = 0x00;
 553   1      
 554   1          if (ExtendMatrix)
 555   1          {
 556   2              KSOH2=0x00;
 557   2      
 558   2              #if (ExternMatrixGPO)
                      GPOKeyPin1_LO();
                      #endif
 561   2          }
 562   1      
 563   1          IER1 |= 0x08;             // enable KSI interrupt
 564   1      }
 565          
 566          /* ----------------------------------------------------------------------------
 567           * FUNCTION:   Start_Scan_Transmission
 568           *
 569           * Lock out other devices so scanner can transmit data to Host, and start
 570           * Timer B with event "SEND_ENABLE".  When the "RESPONSE_TIME" has expired,
 571           * the Timer B interrupt handler will post a "SEND" service request to be
 572           * dispatched by the main service loop.  At that time the data will be sent to
 573           * the Host via the "SEND" service handler.
 574           * ------------------------------------------------------------------------- */
 575          void Start_Scan_Transmission(void)
 576          {
 577   1          EnableSendToHostTimer();
 578   1      }
 579          
 580          /* ----------------------------------------------------------------------------
 581           * FUNCTION:   Check_Scan_Transmission
 582           *
 583           * See if the scanner keyboard data transmission (to Host) should be allowed.
 584           *
 585           * Return: Transmission status indication.  TRUE if ok to transmit.
 586           * ------------------------------------------------------------------------- */
 587          FLAG Check_Scan_Transmission(void)
 588          {
 589   1          FLAG allow_transmission = FALSE;
 590   1      
 591   1          if ((Int_Var.Scan_Lock == 0) && (Flag.SCAN_INH == 0))
 592   1          {       /* Scanner transmission is locked and inhibited. */
 593   2              if (scan.kbf_head != scan.kbf_tail)
 594   2              {
 595   3                  /* Data available in local keyboard buffer */
 596   3                  allow_transmission = TRUE;  /* Allow transmission */
 597   3              }
 598   2          }
 599   1      
 600   1          return (allow_transmission);
 601   1      }
 602          
 603          /* ----------------------------------------------------------------
 604           * FUNCTION: Setup_Scanner_Pntr - to define the possible scanner tables
 605           *
 606           *     0   Rc_RAM_Table
 607           *     1   ROM Table 1
 608           *     ...
 609           * -------------------------------------------------------------- */
 610          void Setup_Scanner_Pntr(void)
 611          {
 612   1          switch( KeyboardMatrixID )
 613   1          {
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 11  

 614   2              #if SUPPORT_KB_MATRIX_ID1
                      case 0x01:
                              Scanner_Table_Pntr = &Rc_ROM_Table1;
                              #if ExtendMatrix
                              Extendkey_Table_Pntr = &EtKey_ROM_Table1;
                              #endif
                              break;
                      #endif
 622   2              #if SUPPORT_KB_MATRIX_ID2
                      case 0x02:
                              Scanner_Table_Pntr = &Rc_ROM_Table2;
                              #if ExtendMatrix
                              Extendkey_Table_Pntr = &EtKey_ROM_Table2;
                              #endif
                              break;
                      #endif
 630   2              #if SUPPORT_KB_MATRIX_ID3
                      case 0x03:
                              Scanner_Table_Pntr = &Rc_ROM_Table3;
                              #if ExtendMatrix
                              Extendkey_Table_Pntr = &EtKey_ROM_Table3;
                              #endif
                              break;
                      #endif
 638   2              default:
 639   2                      Scanner_Table_Pntr = &Rc_ROM_Tables;
 640   2                      #if ExtendMatrix
                              Extendkey_Table_Pntr = &EtKey_ROM_Tables;
                              #endif
 643   2                      break;
 644   2          }
 645   1      }
 646          
 647          /* ----------------------------------------------------------------
 648           * FUNCTION: Get_Kbd_Type
 649           *
 650           * Returns the type of the internal keyboard.
 651           *
 652           * Returns: 0 = U.S. keyboard, 1 = Japanese keyboard.
 653           * -------------------------------------------------------------- */
 654          FLAG Get_Kbd_Type(void)
 655          {
 656   1          return(0);
 657   1      }
 658          
 659          /* ----------------------------------------------------------------
 660           * FUNCTION: Setup_Ext_Hotkey_Pntr - to define the possible scanner tables.
 661           *
 662           *      0   Rc_RAM_Table
 663           *      1   ROM Table 1
 664           *      ...
 665           *
 666           * The external keyboard hotkeys are located in the end (the higher addresses)
 667           * of the Custom Key Table.  After the custom key table is a byte that holds
 668           * the number of external keyboard hotkeys.  Bits 0 - 3 of this byte defines
 669           * the number of hotkeys.
 670           *
 671           * The first hotkey definition is at the end (the higher addresses) of the
 672           * Custom Key Table.  The other definitions follow in the lower value
 673           * addresses.  The order of the hotkey scan code and hotkey function are setup
 674           * so the hotkey function is at an even address.
 675           *
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 12  

 676           * The table looks like:
 677           *
 678           *      ...
 679           *      WORD holding the hotkey function for  hotkey #4
 680           *      BYTE holding the hotkey scan code for hotkey #4
 681           *      BYTE holding the hotkey scan code for hotkey #3
 682           *      WORD holding the hotkey function for  hotkey #3
 683           *      WORD holding the hotkey function for  hotkey #2
 684           *      BYTE holding the hotkey scan code for hotkey #2
 685           *      BYTE holding the hotkey scan code for hotkey #1
 686           *      WORD holding the hotkey function for  hotkey #1
 687           *
 688           * BYTE with bits 0 - 3 holding the number of hotkeys.
 689           *
 690           * The WORDs hold the System Control Function with the high byte of the
 691           * function in the lower address and the low byte of the function in the
 692           * higher address.
 693           *
 694           * The Ext_Hotkey_Pntr will be set to point to the byte past the end of the
 695           * Custom Key Table to allow the number of hotkeys to be accessed.
 696           * -------------------------------------------------------------- */
 697          void Setup_Ext_Hotkey_Pntr(void)
 698          {
 699   1          BYTE table_number;
 700   1          const BYTE code *cpntr;
 701   1      
 702   1          //table_number = (Wakeup3.byte >> shiftSCAN_SELECT) & maskSCAN_SELECT;
 703   1      
 704   1          Ext_Hotkey_Pntr = Hookc_Get_Ext_Hotkey_Pntr();
 705   1      
 706   1          if (Ext_Hotkey_Pntr == (BYTE *)0)
 707   1          {   /* If hook set the pointer to NULL, point to the end of external
 708   2                 keyboard hotkey table table here.
 709   2                 If the RAM_SCAN_TABLE option is not used, 4 tables can be in ROM */
 710   2      //#if RAM_SCAN_TABLE
 711   2      //      if (table_number == 0)
 712   2      //      {
 713   2      //          Ext_Hotkey_Pntr = Rc_RAM_Table + (MAX_SCAN_TABLE_SIZE - 1);
 714   2      //      }
 715   2      //      else
 716   2      //#endif /* RAM_SCAN_TABLE */
 717   2              {   /* Point to start of ROM tables. */
 718   3                  cpntr = (BYTE *) &Rc_ROM_Tables;
 719   3      
 720   3                  while (table_number > LAST_SCAN_TBL_CNT)
 721   3                  /* E-MCHT, 04/10/04 */
 722   3                  {   /* Move pointer past first ROM table. */
 723   4                      cpntr += 1 +            /* past size of Custom Table, */
 724   4                      CUSTOM_KEY_TABLE_INDEX +    /* up to start of Custom Table, */
 725   4                      cpntr[0] +          /* past Custom Table, */
 726   4                      1;              /* past internal keyboard type and number of external keyboard hotkeys byt
             -e. */
 727   4                      table_number--;         /* Bump table number. */
 728   4                  } /* while (table_number > LAST_SCAN_TBL_CNT) */
 729   3      
 730   3                  /* Move pointer to end of table. */
 731   3                  cpntr +=                /* Move pointer */
 732   3                  1 +                 /* past size of Custom Table, */
 733   3                  CUSTOM_KEY_TABLE_INDEX +        /* up to start of Custom Table, */
 734   3                  cpntr[0];               /* past Custom Table. */
 735   3                  Ext_Hotkey_Pntr = (BYTE *) &cpntr;
 736   3              } /* if (table_number == 0) */
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 13  

 737   2          } /* if (Ext_Hotkey_Pntr == (BYTE *)0) */
 738   1      }
 739          
 740          /* ----------------------------------------------------------------------------
 741           * FUNCTION: Lock_Scan
 742           *
 743           * Lock out the scanner via "Scan_Lock" and clear pending scanner "SEND"
 744           * events.
 745           * ------------------------------------------------------------------------- */
 746          void Lock_Scan(void)
 747          {
 748   1          Int_Var.Scan_Lock = 1;
 749   1      }
 750          
 751          /* ----------------------------------------------------------------------------
 752           * FUNCTION: Unlock_Scan - Unlock Scanner Keyboard Function
 753           * ------------------------------------------------------------------------- */
 754          void Unlock_Scan(void)
 755          {
 756   1          Int_Var.Scan_Lock = 0;
 757   1      }
 758          
 759          /* ----------------------------------------------------------------------------
 760           * FUNCTION: Init_Kbd - Scanner Keyboard Initialization.
 761           * ------------------------------------------------------------------------- */
 762          void Init_Kbd(void)
 763          {
 764   1          Setup_Scanner_Pntr();
 765   1          Setup_Ext_Hotkey_Pntr();
 766   1          //Scanner_Strobe_Delay = Calculate_Microsecond_Delay(Config.Scan_Read_Delay);
 767   1          Setup_Diode_Key();
 768   1      
 769   1          /* Clear debounce logic */
 770   1      
 771   1          new_keyh.byte = 0;
 772   1          new_keyl.byte = 0;
 773   1      
 774   1          //vClearExtendKeys();   // for extend keys
 775   1      
 776   1          Clear_Fn_Keys();
 777   1          Clear_Key();        /* Clear key matrix/buffer */
 778   1          ex_Clear_Key();     // for extend keys
 779   1          Clear_Typematic();
 780   1      
 781   1          Ccb42 = 0x38;
 782   1      }
 783          
 784          /* ----------------------------------------------------------------------------
 785           * FUNCTION:   Setup_Diode_Key
 786           * ------------------------------------------------------------------------- */
 787          void Setup_Diode_Key(void)
 788          {
 789   1          if(1)
 790   1          {
 791   2              //if (Ext_Cb3_DISABLE_NKEY) { /* Simple matrix (NO diodes) */
 792   2              diode_key = 0x00;
 793   2          }
 794   1          else
 795   1          {                      /* N-key (diodes in keyboard) */
 796   2              diode_key = 0xFF;
 797   2          }
 798   1      }
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 14  

 799          
 800          
 801          /* ----------------------------------------------------------------------------
 802           * FUNCTION: Clear_Key - Clear local keyboard buffer and related variables.
 803           * ------------------------------------------------------------------------- */
 804          void Clear_Key(void)
 805          {
 806   1          BYTE i;
 807   1          WORD msk_strobe;
 808   1      
 809   1          /* Clear scan matrix. */
 810   1          for(i = 0; i < MAX_SCAN_LINES; i++)
 811   1          {
 812   2              bscan_matrix[i] = 0;
 813   2          }
 814   1      
 815   1          /* Clear key buffer. */
 816   1          for(i = 0; i < KBF_SIZE; i++)
 817   1          {
 818   2              bKEY_BUFF[i] = 0;
 819   2          }
 820   1      
 821   1          scan.kbf_head = 0;
 822   1          scan.kbf_tail = 0;
 823   1      
 824   1          typematic.byte = 0;
 825   1      
 826   1          scan.saf_make = 0;
 827   1          scan.saf_break = 0;
 828   1          scan.saf_keys = 0;
 829   1      
 830   1          /* Initialize scan.scan_line variable */
 831   1          //   msk_strobe = (Config.Msk_Strobe_H << 8) | Config.Msk_Strobe_L;
 832   1          msk_strobe = 0xFFFF;
 833   1      
 834   1          /* msk_strobe contains a flag for each of the valid scanner output lines.
 835   1          Flag set = output line is used. */
 836   1          scan.scan_line = 0;
 837   1      
 838   1          while ((msk_strobe & 0x0001) == 0)
 839   1          {   /* Loop until valid scan line found */
 840   2              scan.scan_line++;
 841   2              msk_strobe = msk_strobe >> 1;
 842   2          }
 843   1      }
 844          
 845          
 846          /* ----------------------------------------------------------------------------
 847           * FUNCTION: Clear_Typematic - Set default typematic delay and clear type-matic action.
 848           * ------------------------------------------------------------------------- */
 849          void Clear_Typematic(void)
 850          {
 851   1          typematic.byte = 0;
 852   1          bTMdelay = TM_DELAY;
 853   1          bTMrepeat = TM_REPEAT;
 854   1          PS2KB_Typematic = 0x6F;
 855   1      }
 856          
 857          /* ----------------------------------------------------------------------------
 858           * FUNCTION: Set_Typematic - Set the typematic rate.
 859           *
 860           * Input: typematic rate
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 15  

 861           *        Bit[4:0] Typematic repeat interval
 862           *        Bit[6:5] Delay time
 863           * ------------------------------------------------------------------------- */
 864          const BYTE code repeat_tbl[] =
 865          {
 866               3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  9, 10, 11, 12, 13, 14,
 867              15, 16, 18, 20, 22, 24, 25, 27, 30, 33, 37, 41, 44, 48, 52, 55
 868          };
 869          
 870          const BYTE code delay_tbl[] = {27, 55, 83, 111};
 871          
 872          void Set_Typematic(BYTE type_rate)
 873          {
 874   1          KB_Typematic = type_rate;   /* Save for suspend/resume. */
 875   1      
 876   1          /* Bit 4 - 0 typematic repeat interval index. */
 877   1          bTMrepeat = repeat_tbl[type_rate & 0x1F];
 878   1      
 879   1          /* Bit 6 - 5 delay time index. */
 880   1          bTMdelay = delay_tbl[(type_rate >> 5) & 0x03];
 881   1      }
 882          
 883          
 884          /* ----------------------------------------------------------------------------
 885           * FUNCTION: Handle_Scan - Service the local keyboard in response to a key press.
 886           * ------------------------------------------------------------------------- */
 887          void Service_KEYSCAN(void)
 888          {
 889   1          BYTE scan_activity;
 890   1      
 891   1          #if SUPPORT_KB_MATRIX_SCAN
 892   1          if (Timer_A.fbit.TMR_SCAN == 0)
 893   1          {
 894   2              Timer_A.fbit.TMR_SCAN = 1;  // Activate scan timer.
 895   2          }
 896   1      
 897   1          #if ExtendMatrix    // extend keys
                  scan_activity = scan_keys()|ex_scan_keys();
                  #else
 900   1          scan_activity = scan_keys();    // Scan keyboard matrix one time.
 901   1          #endif
 902   1      
 903   1          if (scan_activity)  // There is scan activity.
 904   1          {
 905   2              bKB_MATRIX_SENSE = 1;
 906   2              Oem_ScanActivity();
 907   2          }
 908   1          else            // No scan activity
 909   1          {
 910   2              Timer_A.fbit.TMR_SCAN = 0;  // Disable the scan timer.
 911   2              F_Service_KEYSCAN = 0;      // Clear any pending service request.
 912   2              Enable_Any_Key_Irq();       // Enable Any Key interrupt.
 913   2          }
 914   1          #endif
 915   1      
 916   1      }
 917          
 918          
 919          /*****************************************************************************/
 920          /********** SCANNER KEY BUFFER ROUTINES **************************************/
 921          /*****************************************************************************/
 922          
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 16  

 923          /* ----------------------------------------------------------------------------
 924           * FUNCTION:   Get_Buffer
 925           *
 926           * Get data byte from keyboard buffer (if not empty) and update "scan.kbf_head"
 927           * with new index into keyboard buffer.
 928           *
 929           * Return: Data from buffer (WORD of all 1's if buffer is empty).
 930           * ------------------------------------------------------------------------- */
 931          WORD Get_Buffer(void)
 932          {
 933   1          WORD buffer_data;
 934   1      
 935   1          if (scan.kbf_head != scan.kbf_tail)
 936   1          {
 937   2              buffer_data = (WORD) bKEY_BUFF[scan.kbf_head++];
 938   2              if (scan.kbf_head >= KBF_SIZE)
 939   2              {
 940   3                  scan.kbf_head = 0;
 941   3              }
 942   2          }
 943   1          else
 944   1          {
 945   2              /* Buffer is empty. */
 946   2              buffer_data = (WORD) ~0;
 947   2          }
 948   1      
 949   1          return (buffer_data);
 950   1      }
 951          
 952          /* ----------------------------------------------------------------------------
 953           * FUNCTION:   Buffer_Mark - Mark local keyboard buffer tail.
 954           * ------------------------------------------------------------------------- */
 955          void Buffer_Mark(void)
 956          {
 957   1          scan.kbf_mark = scan.kbf_tail;   /* Copy scan.kbf_tail to scan.kbf_mark. */
 958   1      }
 959          
 960          /* ----------------------------------------------------------------------------
 961           * FUNCTION:   Buffer_Key
 962           *
 963           * Input:  Row/Column (0iii,oooo) to put in buffer.
 964           * Return: TRUE operation successful, FALSE unsuccessful.
 965           * ------------------------------------------------------------------------- */
 966          FLAG Buffer_Key(BYTE row_column)
 967          {
 968   1          FLAG ready = TRUE;  /* Ready for successful operation */
 969   1      
 970   1          bKEY_BUFF[scan.kbf_tail] = row_column;  /* Store Data to Buffer Tail */
 971   1          scan.kbf_tail++;                        /* Increment Buffer Tail (pointer) */
 972   1      
 973   1          if (scan.kbf_tail >= KBF_SIZE)
 974   1          {
 975   2              scan.kbf_tail = 0;  /* Wrap pointer if too large. */
 976   2          }
 977   1      
 978   1          /* Check Overflow */
 979   1          if (scan.kbf_tail == scan.kbf_head)
 980   1          {
 981   2              /* Overflow */
 982   2              scan.kbf_tail = scan.kbf_mark;  /* Restore buffer marker. */
 983   2              bKEY_BUFF[scan.kbf_tail] = 0;   /* Set OverFlow Mark. */
 984   2              ready = FALSE;                  /* Overflow Indication !!! */
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 17  

 985   2          }
 986   1      
 987   1          return (ready);
 988   1      }
 989          
 990          //-----------------------------------------------------------------------------
 991          //
 992          //-----------------------------------------------------------------------------
 993          bit Is_Key_Buffer_Ready(void)
 994          {
 995   1          BYTE CheckTail;
 996   1          CheckTail = scan.kbf_tail;
 997   1          CheckTail++;
 998   1          if (CheckTail >= KBF_SIZE)
 999   1          {
1000   2              CheckTail = 0;  /* Check pointer if too large. */
1001   2          }
1002   1          /* Check Overflow */
1003   1          if ( CheckTail == scan.kbf_head )
1004   1          {
1005   2              return FALSE;   /* Overflow Indication !!! */
1006   2          }
1007   1          return TRUE;
1008   1      
1009   1      }
1010          
1011          /* ----------------------------------------------------------------------------
1012           * FUNCTION:   Buffer_String
1013           *
1014           * Places a string in the local keyboard buffer (without a terminating NULL).
1015           * Call Buffer_Key to place data in key buffer.
1016           *
1017           * Input:  Pointer to null terminated string.
1018           * Return: 0x80 if buffer overflow error, else 0.
1019           * ------------------------------------------------------------------------- */
1020          BYTE Buffer_String(const BYTE *pntr)
1021          {
1022   1          register BYTE error = 0;
1023   1      
1024   1          while ((*pntr != 0) && (error == 0))
1025   1          {
1026   2              if (Buffer_Key(*pntr++) == 0)
1027   2              {
1028   3              error = 0x80;   /* Indicate Overflow */
1029   3              }
1030   2          }
1031   1      
1032   1          return (error);
1033   1      }
1034          
1035          /* ----------------------------------------------------------------
1036           * FUNCTION:   Hookc_Get_Kbd_Type
1037           *
1038           * Return: 0 for a U.S. keyboard, 1 for a Japanese keyboard,
1039           *         anything else to allow CORE to determine keyboard type.
1040           * -------------------------------------------------------------- */
1041          BYTE Hookc_Get_Kbd_Type(void)
1042          {
1043   1          return(0xFF);
1044   1      }
1045          
1046          //=============================================================================
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 18  

1047          // FUNCTION: Hookc_Get_Ext_Hotkey_Pntr
1048          //-----------------------------------------------------------------
1049          BYTE *Hookc_Get_Ext_Hotkey_Pntr(void)
1050          {
1051   1          return((void *) 0);
1052   1      }
1053          
1054          //=============================================================================
1055          
1056          //*****************************************************************
1057          // The functions of extend keys
1058          //*****************************************************************
1059          //-----------------------------------------------------------------
1060          // The function of Scaning extend keys
1061          //-----------------------------------------------------------------
1062          BYTE ex_scan_keys(void)
1063          {
1064   1          BYTE    SCAN_Flag = FALSE;
1065   1          BYTE    SCAN_Cnt;
1066   1          BYTE    SCAN_Val;
1067   1      
1068   1          ex_scan.saf_make= 0;
1069   1          ex_scan.saf_break = 0;
1070   1          ex_scan.saf_keys= 0;
1071   1      
1072   1          if (ex_typematic.byte)
1073   1          {
1074   2              ex_check_tm(ex_typematic);  // Check typematic.
1075   2          }
1076   1      
1077   1          if(ex_new_keyh.byte)
1078   1          {
1079   2              // Yes, bounding.
1080   2              ex_scan.saf_make = 1;
1081   2              ex_debounce_key();
1082   2              SCAN_Flag = TRUE;
1083   2          }
1084   1      
1085   1          if(!SCAN_Flag)
1086   1          {
1087   2              for(SCAN_Cnt=0; SCAN_Cnt<ExtendScanPin; SCAN_Cnt++)
1088   2              {
1089   3                  ex_Write_Strobe(SCAN_Cnt);
1090   3                  SCAN_Val = KSI;
1091   3                  SCAN_Val = (~SCAN_Val)^bscan_matrix[SCAN_Cnt + STANDARD_SCAN_LINES];
1092   3      
1093   3                  if (SCAN_Val != 0)
1094   3                  {
1095   4                      ex_check_scan(SCAN_Val, (SCAN_Cnt + STANDARD_SCAN_LINES));
1096   4                  }
1097   3      
1098   3                  if (bscan_matrix[SCAN_Cnt + STANDARD_SCAN_LINES])
1099   3                  {   // Here, if current still active.
1100   4                      ex_scan.saf_keys = 1;       // Set keys active bits. Check all key release.
1101   4                  }
1102   3              }
1103   2          }
1104   1      
1105   1          if (ex_new_keyl.field.ghost == 1)
1106   1          {
1107   2              ex_new_keyl.field.ghost = 0;    // Ghost flag is set.
1108   2              SCAN_Val = ex_new_keyl.byte & 7;
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 19  

1109   2              if (SCAN_Val == 0)
1110   2              {
1111   3                  SCAN_Val = Byte_Mask((BYTE)(ex_new_keyh.field.input));
1112   3                  SCAN_Val &= diode_key;
1113   3              }
1114   2              if (SCAN_Val == 0)
1115   2              {
1116   3                  ex_new_keyh.byte = 0;       // Clear new key.
1117   3                  ex_new_keyl.byte = 0;
1118   3              }
1119   2          }
1120   1          KSOH2 = 0x03;
1121   1      
1122   1          return((BYTE) (ex_scan.saf_make + ex_scan.saf_break + ex_scan.saf_keys));
1123   1      }
1124          
1125          //-----------------------------------------------------------------
1126          // The function of Setting extend scan lines
1127          //-----------------------------------------------------------------
1128          void ex_Write_Strobe(BYTE scan_line)
1129          {
1130   1          if(scan_line < 0x02)
1131   1          {
1132   2              KSOL  = 0xFF;
1133   2              KSOH1 = 0xFF;
1134   2              KSOH2 = ~(0x01<<scan_line);
1135   2              #if (ExternMatrixGPO)
                      GPOKeyPin1_HI();
                      #endif
1138   2          }
1139   1          else
1140   1          {
1141   2              KSOL  = 0xFF;
1142   2              KSOH1 = 0xFF;
1143   2              KSOH2 = 0xFF;
1144   2              #if (ExternMatrixGPO)
                      GPOKeyPin1_LO();
                      #endif
1147   2          }
1148   1      }
1149          
1150          //-----------------------------------------------------------------
1151          // The function of Setting extend scan lines
1152          //-----------------------------------------------------------------
1153          void ex_check_scan(BYTE KSI_bit_num, BYTE scan_address)
1154          {
1155   1          BYTE    flag;
1156   1          BYTE    change_make_key;
1157   1          BYTE    SCAN_Cnt;
1158   1      
1159   1          flag = FALSE;
1160   1          if (ex_new_keyl.field.ghost == 1)
1161   1          {
1162   2              flag = TRUE;
1163   2          }
1164   1          else
1165   1          {   // Find 0 -> 1 's.
1166   2              change_make_key = KSI_bit_num & ~bscan_matrix[scan_address];
1167   2              if (change_make_key == 0)
1168   2              {
1169   3                  flag = FALSE;
1170   3              }
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 20  

1171   2              else if (find_paths(change_make_key, scan_address))
1172   2              {
1173   3                  flag = TRUE;                // TRUE if ghost keys.
1174   3              }
1175   2          }
1176   1      
1177   1          if (flag)
1178   1          {   // Ghost exists.
1179   2              ex_new_keyl.field.ghost = 1;    // Set ghost flag.
1180   2              KSI_bit_num &= bscan_matrix[scan_address] | diode_key;
1181   2          }
1182   1      
1183   1          SCAN_Cnt = 0x00;
1184   1          while (KSI_bit_num != 0)
1185   1          {
1186   2              if (KSI_bit_num & 0x01)
1187   2              {
1188   3                  ex_cscfnd(SCAN_Cnt, scan_address);
1189   3              }
1190   2              SCAN_Cnt++;
1191   2              KSI_bit_num = KSI_bit_num >> 1; /* Shift bit out (and a zero bit in) to check next bit. */
1192   2          }
1193   1      }
1194          
1195          //=============================================================================
1196          void ex_cscfnd(BYTE SCAN_Cnt, BYTE scan_address)
1197          {
1198   1          if (bscan_matrix[scan_address] & Byte_Mask(SCAN_Cnt))
1199   1          {
1200   2              if (ex_scan.saf_break == 0)
1201   2              {
1202   3                  ex_scan.saf_break = 1;
1203   3                  ex_setup_debounce(SCAN_Cnt, scan_address, BREAK_EVENT);
1204   3              }
1205   2          }
1206   1          else
1207   1          {
1208   2              if (ex_scan.saf_make == 0)
1209   2              {
1210   3                  ex_scan.saf_make = 1;
1211   3                  ex_setup_debounce(SCAN_Cnt, scan_address, MAKE_EVENT);
1212   3              }
1213   2          }
1214   1      }
1215          
1216          //-----------------------------------------------------------------
1217          // The function of extend keys debounce
1218          //-----------------------------------------------------------------
1219          void ex_setup_debounce(BYTE KSI_bit_num, BYTE scan_address, BYTE event)
1220          {
1221   1          ex_new_keyh.field.output = scan_address-STANDARD_SCAN_LINES;
1222   1          ex_new_keyh.field.input = KSI_bit_num;
1223   1          ex_new_keyh.field.debounce_status = 1;
1224   1          ex_new_keyl.field.state = 0;        // Debounce has not counted out. */
1225   1          ex_new_keyl.field.same = 0;     // Key activity indication. */
1226   1      
1227   1          if (event == MAKE_EVENT)
1228   1          {
1229   2              ex_new_keyl.field.trans = 0;
1230   2              ex_new_keyl.field.count = 1;    //Ext_Cb2.field.Break_Count;
1231   2          }
1232   1          else
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 21  

1233   1          {
1234   2              ex_new_keyl.field.trans = 1;
1235   2              ex_new_keyl.field.count = 1;    //Ext_Cb2.field.Make_Count;
1236   2          }
1237   1      }
1238          
1239          //=============================================================================
1240          void ex_debounce_key(void)
1241          {
1242   1          BYTE    SCAN_Val, SCAN_Tmp;
1243   1      
1244   1          ex_Write_Strobe(ex_new_keyh.field.output);
1245   1      
1246   1          SCAN_Tmp = ~Read_Scan_Lines();
1247   1          SCAN_Val = Byte_Mask((BYTE)(ex_new_keyh.field.input));
1248   1          SCAN_Val = SCAN_Val & SCAN_Tmp;
1249   1      
1250   1          if (SCAN_Val != 0)
1251   1          {
1252   2              if (ex_new_keyl.field.trans == 0)   // key make
1253   2              {
1254   3                  ex_new_keyl.field.same = 1;     // last key detected as a MAKE, same = 1.
1255   3              }
1256   2              else
1257   2              {
1258   3                  ex_new_keyl.field.same = 0;    // last key detected as a BREAK, same = 0.
1259   3              }
1260   2          }
1261   1          else
1262   1          {
1263   2              if (ex_new_keyl.field.trans == 0)
1264   2              {
1265   3                  ex_new_keyl.field.same = 0;    // last key detected as a MAKE, same = 0.
1266   3              }
1267   2              else
1268   2              {
1269   3                  ex_new_keyl.field.same = 1;    // last key detected as a BREAK, same = 1.
1270   3              }
1271   2          }
1272   1      
1273   1          if (ex_new_keyl.field.state == 0)   // 1 means debounce counted out.
1274   1          {
1275   2              if (ex_new_keyl.field.count != 0)
1276   2              {
1277   3                  ex_new_keyl.field.count--;
1278   3              }
1279   2              else
1280   2              {
1281   3                  if (ex_new_keyl.field.same == 0)
1282   3                  {
1283   4                      ex_new_keyh.byte = 0;   // Debounce failed, so claer all data
1284   4                      ex_new_keyl.byte = 0;
1285   4                  }
1286   3                  else
1287   3                  {
1288   4                      ex_new_keyl.field.state = 1;
1289   4                  }
1290   3              }
1291   2          }
1292   1          else
1293   1          {
1294   2              if (ex_new_keyl.field.same == 0)
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 22  

1295   2              {
1296   3                  ex_new_keyh.byte = 0;   /* Debounce failed. */
1297   3                  ex_new_keyl.byte = 0;
1298   3              }
1299   2              else
1300   2              {
1301   3                  ex_change_valid();
1302   3              }
1303   2          }
1304   1      }
1305          
1306          //-----------------------------------------------------------------
1307          // The function of checking extend key valid
1308          //-----------------------------------------------------------------
1309          void ex_change_valid(void)
1310          {
1311   1          BYTE    temp, mask, event;
1312   1      
1313   1          mask = Byte_Mask((BYTE) (ex_new_keyh.field.input));
1314   1          temp = bscan_matrix[(ex_new_keyh.field.output + STANDARD_SCAN_LINES)];
1315   1          temp = temp ^ mask;
1316   1          bscan_matrix[(ex_new_keyh.field.output + STANDARD_SCAN_LINES)] = temp;
1317   1      
1318   1          event = BREAK_EVENT;
1319   1          if ((mask & temp) != 0)
1320   1          {
1321   2              event = MAKE_EVENT;
1322   2              ex_typematic.byte = ex_new_keyh.byte;
1323   2              ex_scan.TMscale = TM_SCALE;
1324   2              bTMcount = bTMdelay;
1325   2      
1326   2              typematic.byte = 0x00;
1327   2          }
1328   1      
1329   1          ex_Send_Scan2(ex_new_keyh, event);
1330   1          ex_new_keyh.byte = 0;
1331   1          ex_new_keyl.byte = 0;
1332   1      }
1333          
1334          //-----------------------------------------------------------------
1335          // The function of
1336          //-----------------------------------------------------------------
1337          void ex_Send_Scan2(union KEY key, BYTE event)
1338          {
1339   1          BYTE    table_entry;
1340   1          BYTE    temp;
1341   1      
1342   1          #if SUPPORT_MATRIX_UTILITY
1343   1          if(IsFlag1(UtilityFlag,KBDebug))
1344   1          {
1345   2                      if(KeyScanACK==0xFF)
1346   2                      {
1347   3                              if(event==MAKE_EVENT)
1348   3                              {
1349   4                                      KeyScanKSI = key.field.input;
1350   4                                      KeyScanKSO = key.field.output;
1351   4                                      KeyScanACK = 0x44;
1352   4                              }
1353   3                      }
1354   2              return;
1355   2          }
1356   1          #endif
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 23  

1357   1      
1358   1          temp = (key.field.input * 3) + key.field.output;
1359   1          table_entry = *(Extendkey_Table_Pntr + temp);
1360   1          Send_Key(table_entry, event);
1361   1      }
1362          
1363          //-----------------------------------------------------------------
1364          // The function of clearing extend keys
1365          //-----------------------------------------------------------------
1366          void ex_Clear_Key(void)
1367          {
1368   1          ex_new_keyh.byte = 0;
1369   1          ex_new_keyl.byte = 0;
1370   1          ex_typematic.byte = 0;
1371   1      }
1372          
1373          //-----------------------------------------------------------------
1374          // The function of checking extend keys Typematic
1375          //-----------------------------------------------------------------
1376          void ex_check_tm(union KEY key)
1377          {
1378   1          BYTE    SCAN_flag = FALSE;
1379   1          BYTE    SCAN_Val;
1380   1          SCAN_Val = Byte_Mask((BYTE) (key.field.input));
1381   1          SCAN_Val = SCAN_Val & bscan_matrix[key.field.output+STANDARD_SCAN_LINES];
1382   1      
1383   1          if (SCAN_Val == 0)
1384   1          {
1385   2              ex_typematic.byte = 0;
1386   2              SCAN_flag = TRUE;
1387   2          }
1388   1      
1389   1          if (!SCAN_flag)
1390   1          {
1391   2              ex_scan.TMscale--;
1392   2              if (ex_scan.TMscale != 0)
1393   2              {
1394   3                  SCAN_flag = TRUE;
1395   3              }
1396   2          }
1397   1      
1398   1          if (!SCAN_flag)
1399   1          {
1400   2              ex_scan.TMscale = TM_SCALE;
1401   2              bTMcount--;
1402   2              if (bTMcount != 0)
1403   2              {
1404   3                  SCAN_flag = TRUE;
1405   3              }
1406   2          }
1407   1      
1408   1          if (!SCAN_flag)
1409   1          {
1410   2              bTMcount = bTMrepeat;
1411   2              ex_Send_Scan2(key, REPEAT_EVENT);
1412   2          }
1413   1      }
1414          
1415          //=============================================================================
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 24  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION scan_keys (BEGIN)
                                           ; SOURCE LINE # 32
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 34
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#SCAN_Flag
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0005 E500        E     MOV     A,scan+02H
0007 54EF              ANL     A,#0EFH
0009 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 39
000B 54DF              ANL     A,#0DFH
000D F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 40
000F 54BF              ANL     A,#0BFH
0011 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 42
0013 E500        E     MOV     A,typematic
0015 6016              JZ      ?C0001
                                           ; SOURCE LINE # 43
                                           ; SOURCE LINE # 44
0017 7800        R     MOV     R0,#LOW ?check_tm?BYTE
0019 7C00        R     MOV     R4,#HIGH ?check_tm?BYTE
001B 7D01              MOV     R5,#01H
001D 7B00              MOV     R3,#00H
001F 7A00        E     MOV     R2,#HIGH typematic
0021 7900        E     MOV     R1,#LOW typematic
0023 7E00              MOV     R6,#00H
0025 7F01              MOV     R7,#01H
0027 120000      E     LCALL   ?C?COPY
002A 120000      R     LCALL   check_tm
                                           ; SOURCE LINE # 45
002D         ?C0001:
                                           ; SOURCE LINE # 47
002D E500        E     MOV     A,new_keyh
002F 600F              JZ      ?C0002
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0031 E500        E     MOV     A,scan+02H
0033 4410              ORL     A,#010H
0035 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 50
0037 120000      R     LCALL   debounce_key
                                           ; SOURCE LINE # 51
003A 900000      R     MOV     DPTR,#SCAN_Flag
003D 7401              MOV     A,#01H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
0040         ?C0002:
                                           ; SOURCE LINE # 54
0040 900000      R     MOV     DPTR,#SCAN_Flag
0043 E0                MOVX    A,@DPTR
0044 6003              JZ      $ + 5H
0046 020000      R     LJMP    ?C0003
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 56
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 25  

004B         ?C0004:
004B 900000      R     MOV     DPTR,#SCAN_Cnt
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 C3                CLR     C
0051 9410              SUBB    A,#010H
0053 504C              JNC     ?C0005
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0055 120000      R     LCALL   _Write_Strobe
                                           ; SOURCE LINE # 60
0058 7F01              MOV     R7,#01H
005A 7E00              MOV     R6,#00H
005C 120000      E     LCALL   _Microsecond_Delay
                                           ; SOURCE LINE # 62
005F 901D04            MOV     DPTR,#01D04H
0062 E0                MOVX    A,@DPTR
0063 900000      R     MOV     DPTR,#SCAN_Val
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0067 900000      R     MOV     DPTR,#SCAN_Cnt
006A E0                MOVX    A,@DPTR
006B FD                MOV     R5,A
006C 2400        E     ADD     A,#LOW bscan_matrix
006E F8                MOV     R0,A
006F E6                MOV     A,@R0
0070 FF                MOV     R7,A
0071 A3                INC     DPTR
0072 E0                MOVX    A,@DPTR
0073 F4                CPL     A
0074 6F                XRL     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 6003              JZ      ?C0007
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 67
007A 120000      R     LCALL   _check_scan
                                           ; SOURCE LINE # 68
007D         ?C0007:
                                           ; SOURCE LINE # 70
007D 900000      R     MOV     DPTR,#SCAN_Cnt
0080 E0                MOVX    A,@DPTR
0081 2400        E     ADD     A,#LOW bscan_matrix
0083 F8                MOV     R0,A
0084 E6                MOV     A,@R0
0085 6006              JZ      ?C0008
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
0087 E500        E     MOV     A,scan+02H
0089 4440              ORL     A,#040H
008B F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 73
008D         ?C0008:
                                           ; SOURCE LINE # 75
008D 901D00            MOV     DPTR,#01D00H
0090 74FF              MOV     A,#0FFH
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0093 A3                INC     DPTR
0094 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 26  

                                           ; SOURCE LINE # 77
0095 901D03            MOV     DPTR,#01D03H
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
0099 900000      R     MOV     DPTR,#SCAN_Cnt
009C E0                MOVX    A,@DPTR
009D 04                INC     A
009E F0                MOVX    @DPTR,A
009F 80AA              SJMP    ?C0004
00A1         ?C0005:
                                           ; SOURCE LINE # 85
00A1 AF00        E     MOV     R7,new_keyl
00A3 EF                MOV     A,R7
00A4 13                RRC     A
00A5 13                RRC     A
00A6 13                RRC     A
00A7 541F              ANL     A,#01FH
00A9 30E03E            JNB     ACC.0,?C0003
                                           ; SOURCE LINE # 86
                                           ; SOURCE LINE # 87
00AC AF00        E     MOV     R7,new_keyl
00AE EF                MOV     A,R7
00AF 54F7              ANL     A,#0F7H
00B1 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 88
00B3 E500        E     MOV     A,new_keyl
00B5 5407              ANL     A,#07H
00B7 900000      R     MOV     DPTR,#SCAN_Val
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
00BB E0                MOVX    A,@DPTR
00BC 7022              JNZ     ?C0010
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
00BE AF00        E     MOV     R7,new_keyh
00C0 EF                MOV     A,R7
00C1 5407              ANL     A,#07H
00C3 FF                MOV     R7,A
00C4 7401              MOV     A,#01H
00C6 A807              MOV     R0,AR7
00C8 08                INC     R0
00C9 8002              SJMP    ?C0193
00CB         ?C0192:
00CB C3                CLR     C
00CC 33                RLC     A
00CD         ?C0193:
00CD D8FC              DJNZ    R0,?C0192
00CF 900000      R     MOV     DPTR,#SCAN_Val
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 92
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 900000      E     MOV     DPTR,#diode_key
00D8 E0                MOVX    A,@DPTR
00D9 FE                MOV     R6,A
00DA EF                MOV     A,R7
00DB 5E                ANL     A,R6
00DC 900000      R     MOV     DPTR,#SCAN_Val
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
00E0         ?C0010:
                                           ; SOURCE LINE # 95
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 27  

00E0 900000      R     MOV     DPTR,#SCAN_Val
00E3 E0                MOVX    A,@DPTR
00E4 7004              JNZ     ?C0003
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
00E6 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 98
00E8 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 101
00EA         ?C0003:
                                           ; SOURCE LINE # 103
00EA AF00        E     MOV     R7,scan+02H
00EC EF                MOV     A,R7
00ED C4                SWAP    A
00EE 13                RRC     A
00EF 5401              ANL     A,#01H
00F1 FF                MOV     R7,A
00F2 AE00        E     MOV     R6,scan+02H
00F4 EE                MOV     A,R6
00F5 C4                SWAP    A
00F6 5401              ANL     A,#01H
00F8 2F                ADD     A,R7
00F9 FF                MOV     R7,A
00FA AE00        E     MOV     R6,scan+02H
00FC EE                MOV     A,R6
00FD C4                SWAP    A
00FE 13                RRC     A
00FF 13                RRC     A
0100 5401              ANL     A,#01H
0102 2F                ADD     A,R7
0103 FF                MOV     R7,A
                                           ; SOURCE LINE # 104
0104         ?C0012:
0104 22                RET     
             ; FUNCTION scan_keys (END)

             ; FUNCTION _Write_Strobe (BEGIN)
                                           ; SOURCE LINE # 122
;---- Variable 'scan_line_num' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 123
                                           ; SOURCE LINE # 124
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9408              SUBB    A,#08H
0004 5019              JNC     ?C0013
                                           ; SOURCE LINE # 125
                                           ; SOURCE LINE # 126
0006 7401              MOV     A,#01H
0008 A807              MOV     R0,AR7
000A 08                INC     R0
000B 8002              SJMP    ?C0195
000D         ?C0194:
000D C3                CLR     C
000E 33                RLC     A
000F         ?C0195:
000F D8FC              DJNZ    R0,?C0194
0011 F4                CPL     A
0012 901D00            MOV     DPTR,#01D00H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 28  

0016 A3                INC     DPTR
0017 74FF              MOV     A,#0FFH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 128
001A 901D03            MOV     DPTR,#01D03H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 133
001E 22                RET     
001F         ?C0013:
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
001F 901D00            MOV     DPTR,#01D00H
0022 74FF              MOV     A,#0FFH
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0025 EF                MOV     A,R7
0026 24F8              ADD     A,#0F8H
0028 FF                MOV     R7,A
0029 7401              MOV     A,#01H
002B A807              MOV     R0,AR7
002D 08                INC     R0
002E 8002              SJMP    ?C0197
0030         ?C0196:
0030 C3                CLR     C
0031 33                RLC     A
0032         ?C0197:
0032 D8FC              DJNZ    R0,?C0196
0034 F4                CPL     A
0035 901D01            MOV     DPTR,#01D01H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0039 901D03            MOV     DPTR,#01D03H
003C 74FF              MOV     A,#0FFH
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
003F         ?C0015:
003F 22                RET     
             ; FUNCTION _Write_Strobe (END)

             ; FUNCTION _check_scan (BEGIN)
                                           ; SOURCE LINE # 160
0000 900000      R     MOV     DPTR,#changes
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 166
0008 E4                CLR     A
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 167
000B AF00        E     MOV     R7,new_keyl
000D EF                MOV     A,R7
000E 13                RRC     A
000F 13                RRC     A
0010 13                RRC     A
0011 541F              ANL     A,#01FH
0013 30E002            JNB     ACC.0,?C0016
                                           ; SOURCE LINE # 168
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 29  

                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
0016 8022              SJMP    ?C0220
0018         ?C0016:
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0018 900000      R     MOV     DPTR,#scan_address
001B E0                MOVX    A,@DPTR
001C FD                MOV     R5,A
001D 2400        E     ADD     A,#LOW bscan_matrix
001F F8                MOV     R0,A
0020 E6                MOV     A,@R0
0021 F4                CPL     A
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#changes
0026 E0                MOVX    A,@DPTR
0027 5F                ANL     A,R7
0028 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 174
0029 7006              JNZ     ?C0018
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
002B 900000      R     MOV     DPTR,#flag
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
002F 800C              SJMP    ?C0017
0031         ?C0018:
                                           ; SOURCE LINE # 178
0031 120000      R     LCALL   _find_paths
0034 EF                MOV     A,R7
0035 6006              JZ      ?C0017
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0037 900000      R     MOV     DPTR,#flag
003A         ?C0220:
003A 7401              MOV     A,#01H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
003D         ?C0017:
                                           ; SOURCE LINE # 184
003D 900000      R     MOV     DPTR,#flag
0040 E0                MOVX    A,@DPTR
0041 601F              JZ      ?C0021
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
0043 AF00        E     MOV     R7,new_keyl
0045 EF                MOV     A,R7
0046 4408              ORL     A,#08H
0048 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 189
004A 900000      R     MOV     DPTR,#changes
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 2400        E     ADD     A,#LOW bscan_matrix
0053 F8                MOV     R0,A
0054 E6                MOV     A,@R0
0055 FE                MOV     R6,A
0056 900000      E     MOV     DPTR,#diode_key
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 30  

0059 E0                MOVX    A,@DPTR
005A 4E                ORL     A,R6
005B FE                MOV     R6,A
005C EF                MOV     A,R7
005D 5E                ANL     A,R6
005E 900000      R     MOV     DPTR,#changes
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
0062         ?C0021:
                                           ; SOURCE LINE # 192
0062 E4                CLR     A
0063 900000      R     MOV     DPTR,#bit_num
0066 F0                MOVX    @DPTR,A
0067         ?C0022:
                                           ; SOURCE LINE # 193
0067 900000      R     MOV     DPTR,#changes
006A E0                MOVX    A,@DPTR
006B 601F              JZ      ?C0025
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
006D 30E00D            JNB     ACC.0,?C0024
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
0070 900000      R     MOV     DPTR,#bit_num
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 900000      R     MOV     DPTR,#scan_address
0078 E0                MOVX    A,@DPTR
0079 FD                MOV     R5,A
007A 120000      R     LCALL   _cscfnd
                                           ; SOURCE LINE # 198
007D         ?C0024:
                                           ; SOURCE LINE # 199
007D 900000      R     MOV     DPTR,#bit_num
0080 E0                MOVX    A,@DPTR
0081 04                INC     A
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0083 900000      R     MOV     DPTR,#changes
0086 E0                MOVX    A,@DPTR
0087 C3                CLR     C
0088 13                RRC     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 201
008A 80DB              SJMP    ?C0022
                                           ; SOURCE LINE # 202
008C         ?C0025:
008C 22                RET     
             ; FUNCTION _check_scan (END)

             ; FUNCTION _cscfnd (BEGIN)
                                           ; SOURCE LINE # 210
0000 900000      R     MOV     DPTR,#bit_num
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 212
0008 E0                MOVX    A,@DPTR
0009 FD                MOV     R5,A
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 31  

000A 2400        E     ADD     A,#LOW bscan_matrix
000C F8                MOV     R0,A
000D E6                MOV     A,@R0
000E FB                MOV     R3,A
000F 7A00              MOV     R2,#00H
0011 900000      R     MOV     DPTR,#bit_num
0014 E0                MOVX    A,@DPTR
0015 FC                MOV     R4,A
0016 7401              MOV     A,#01H
0018 7E00              MOV     R6,#00H
001A A804              MOV     R0,AR4
001C 08                INC     R0
001D 8005              SJMP    ?C0199
001F         ?C0198:
001F C3                CLR     C
0020 33                RLC     A
0021 CE                XCH     A,R6
0022 33                RLC     A
0023 CE                XCH     A,R6
0024         ?C0199:
0024 D8F9              DJNZ    R0,?C0198
0026 FF                MOV     R7,A
0027 EE                MOV     A,R6
0028 5A                ANL     A,R2
0029 FE                MOV     R6,A
002A EF                MOV     A,R7
002B 5B                ANL     A,R3
002C 4E                ORL     A,R6
002D 6015              JZ      ?C0026
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
002F AF00        E     MOV     R7,scan+02H
0031 EF                MOV     A,R7
0032 C4                SWAP    A
0033 13                RRC     A
0034 5407              ANL     A,#07H
0036 20E026            JB      ACC.0,?C0030
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
0039 EF                MOV     A,R7
003A 4420              ORL     A,#020H
003C F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 217
003E AF04              MOV     R7,AR4
0040 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
0042 8018              SJMP    ?C0221
0044         ?C0026:
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
0044 AF00        E     MOV     R7,scan+02H
0046 EF                MOV     A,R7
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 20E012            JB      ACC.0,?C0030
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
004D EF                MOV     A,R7
004E 4410              ORL     A,#010H
0050 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 225
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 32  

0052 900000      R     MOV     DPTR,#bit_num
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A E4                CLR     A
005B FB                MOV     R3,A
005C         ?C0221:
005C 120000      R     LCALL   _setup_debounce
                                           ; SOURCE LINE # 226
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 228
005F         ?C0030:
005F 22                RET     
             ; FUNCTION _cscfnd (END)

             ; FUNCTION _setup_debounce (BEGIN)
                                           ; SOURCE LINE # 238
;---- Variable 'bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0000 ED                MOV     A,R5
0001 540F              ANL     A,#0FH
0003 C4                SWAP    A
0004 54F0              ANL     A,#0F0H
0006 FE                MOV     R6,A
0007 AD00        E     MOV     R5,new_keyh
0009 ED                MOV     A,R5
000A 540F              ANL     A,#0FH
000C 4E                ORL     A,R6
000D F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 241
000F EF                MOV     A,R7
0010 5407              ANL     A,#07H
0012 FF                MOV     R7,A
0013 AE00        E     MOV     R6,new_keyh
0015 EE                MOV     A,R6
0016 54F8              ANL     A,#0F8H
0018 4F                ORL     A,R7
0019 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 242
001B AF00        E     MOV     R7,new_keyh
001D EF                MOV     A,R7
001E 4408              ORL     A,#08H
0020 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 243
0022 AF00        E     MOV     R7,new_keyl
0024 EF                MOV     A,R7
0025 54FE              ANL     A,#0FEH
0027 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 244
0029 AF00        E     MOV     R7,new_keyl
002B EF                MOV     A,R7
002C 54EF              ANL     A,#0EFH
002E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 246
0030 EB                MOV     A,R3
0031 AF00        E     MOV     R7,new_keyl
0033 700F              JNZ     ?C0031
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 33  

                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0035 EF                MOV     A,R7
0036 54FD              ANL     A,#0FDH
0038 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 249
003A 7800        E     MOV     R0,#LOW Ext_Cb2
003C E6                MOV     A,@R0
003D 540E              ANL     A,#0EH
003F C4                SWAP    A
0040 54F0              ANL     A,#0F0H
                                           ; SOURCE LINE # 250
0042 800A              SJMP    ?C0222
0044         ?C0031:
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0044 EF                MOV     A,R7
0045 4402              ORL     A,#02H
0047 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 254
0049 7800        E     MOV     R0,#LOW Ext_Cb2
004B E6                MOV     A,@R0
004C 54E0              ANL     A,#0E0H
004E         ?C0222:
004E FF                MOV     R7,A
004F AE00        E     MOV     R6,new_keyl
0051 EE                MOV     A,R6
0052 541F              ANL     A,#01FH
0054 4F                ORL     A,R7
0055 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 255
                                           ; SOURCE LINE # 256
0057         ?C0033:
0057 22                RET     
             ; FUNCTION _setup_debounce (END)

             ; FUNCTION _find_paths (BEGIN)
                                           ; SOURCE LINE # 266
;---- Variable 'temp' assigned to Register 'R6' ----
;---- Variable 'paths' assigned to Register 'R4' ----
;---- Variable 'bits' assigned to Register 'R1' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 276
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#done
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0005 900000      R     MOV     DPTR,#paths_found
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0009 900000      R     MOV     DPTR,#first_address
000C ED                MOV     A,R5
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
000E 900000      E     MOV     DPTR,#diode_key
0011 E0                MOVX    A,@DPTR
0012 F4                CPL     A
0013 5F                ANL     A,R7
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 283
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 34  

0015 7005              JNZ     ?C0034
                                           ; SOURCE LINE # 284
                                           ; SOURCE LINE # 285
0017 900000      R     MOV     DPTR,#done
001A 04                INC     A
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
001C         ?C0034:
                                           ; SOURCE LINE # 288
001C 900000      R     MOV     DPTR,#done
001F E0                MOVX    A,@DPTR
0020 7015              JNZ     ?C0037
                                           ; SOURCE LINE # 289
                                           ; SOURCE LINE # 290
0022 7400        E     MOV     A,#LOW bscan_matrix
0024 2D                ADD     A,R5
0025 F8                MOV     R0,A
0026 E6                MOV     A,@R0
0027 4F                ORL     A,R7
0028 FC                MOV     R4,A
                                           ; SOURCE LINE # 291
0029 900000      E     MOV     DPTR,#diode_key
002C E0                MOVX    A,@DPTR
002D F4                CPL     A
002E 5C                ANL     A,R4
002F FC                MOV     R4,A
                                           ; SOURCE LINE # 293
0030 7005              JNZ     ?C0037
                                           ; SOURCE LINE # 294
                                           ; SOURCE LINE # 295
0032 900000      R     MOV     DPTR,#done
0035 04                INC     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
0037         ?C0037:
                                           ; SOURCE LINE # 299
0037 900000      R     MOV     DPTR,#done
003A E0                MOVX    A,@DPTR
003B 705E              JNZ     ?C0038
                                           ; SOURCE LINE # 300
                                           ; SOURCE LINE # 301
003D 0D                INC     R5
                                           ; SOURCE LINE # 304
003E ED                MOV     A,R5
003F C3                CLR     C
0040 9413              SUBB    A,#013H
0042 4002              JC      ?C0039
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0044 E4                CLR     A
0045 FD                MOV     R5,A
                                           ; SOURCE LINE # 307
0046         ?C0039:
                                           ; SOURCE LINE # 309
0046 900000      R     MOV     DPTR,#first_address
0049 E0                MOVX    A,@DPTR
004A B50506            CJNE    A,AR5,?C0040
                                           ; SOURCE LINE # 310
                                           ; SOURCE LINE # 311
004D 900000      R     MOV     DPTR,#done
0050 7401              MOV     A,#01H
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 35  

0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0053         ?C0040:
                                           ; SOURCE LINE # 314
0053 900000      R     MOV     DPTR,#done
0056 E0                MOVX    A,@DPTR
0057 70DE              JNZ     ?C0037
                                           ; SOURCE LINE # 315
                                           ; SOURCE LINE # 316
0059 7400        E     MOV     A,#LOW bscan_matrix
005B 2D                ADD     A,R5
005C F8                MOV     R0,A
005D E6                MOV     A,@R0
005E FE                MOV     R6,A
                                           ; SOURCE LINE # 317
005F 900000      E     MOV     DPTR,#diode_key
0062 E0                MOVX    A,@DPTR
0063 F4                CPL     A
0064 5E                ANL     A,R6
0065 FE                MOV     R6,A
                                           ; SOURCE LINE # 319
0066 6002              JZ      ?C0042
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 321
0068 5C                ANL     A,R4
0069 FE                MOV     R6,A
                                           ; SOURCE LINE # 322
006A         ?C0042:
                                           ; SOURCE LINE # 324
006A EE                MOV     A,R6
006B 60CA              JZ      ?C0037
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 326
006D 6F                XRL     A,R7
006E 6008              JZ      ?C0044
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0070 900000      R     MOV     DPTR,#paths_found
0073 7401              MOV     A,#01H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
0076 A3                INC     DPTR
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 330
0078         ?C0044:
                                           ; SOURCE LINE # 332
0078 900000      R     MOV     DPTR,#done
007B E0                MOVX    A,@DPTR
007C 70B9              JNZ     ?C0037
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 338
007E A904              MOV     R1,AR4
                                           ; SOURCE LINE # 339
0080 FE                MOV     R6,A
0081         ?C0048:
                                           ; SOURCE LINE # 342
                                           ; SOURCE LINE # 343
0081 E9                MOV     A,R1
0082 30E002            JNB     ACC.0,?C0049
                                           ; SOURCE LINE # 344
                                           ; SOURCE LINE # 345
0085 7E01              MOV     R6,#01H
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 36  

                                           ; SOURCE LINE # 346
0087         ?C0049:
                                           ; SOURCE LINE # 349
0087 E9                MOV     A,R1
0088 C3                CLR     C
0089 13                RRC     A
008A F9                MOV     R1,A
                                           ; SOURCE LINE # 350
008B EE                MOV     A,R6
008C 60F3              JZ      ?C0048
                                           ; SOURCE LINE # 352
008E E9                MOV     A,R1
008F 60A6              JZ      ?C0037
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
0091 900000      R     MOV     DPTR,#paths_found
0094 7401              MOV     A,#01H
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0097 A3                INC     DPTR
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0099 809C              SJMP    ?C0037
009B         ?C0038:
                                           ; SOURCE LINE # 362
009B 900000      R     MOV     DPTR,#paths_found
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
                                           ; SOURCE LINE # 363
00A0         ?C0051:
00A0 22                RET     
             ; FUNCTION _find_paths (END)

             ; FUNCTION debounce_key (BEGIN)
                                           ; SOURCE LINE # 368
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 372
0000 AF00        E     MOV     R7,new_keyh
0002 EF                MOV     A,R7
0003 54F0              ANL     A,#0F0H
0005 C4                SWAP    A
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
0009 E500        E     MOV     A,scan+02H
000B 54F0              ANL     A,#0F0H
000D 4F                ORL     A,R7
000E F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 373
0010 540F              ANL     A,#0FH
0012 FF                MOV     R7,A
0013 120000      R     LCALL   _Write_Strobe
                                           ; SOURCE LINE # 375
0016 AF00        E     MOV     R7,new_keyh
0018 EF                MOV     A,R7
0019 5407              ANL     A,#07H
001B FF                MOV     R7,A
001C 7401              MOV     A,#01H
001E A807              MOV     R0,AR7
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 37  

0020 08                INC     R0
0021 8002              SJMP    ?C0201
0023         ?C0200:
0023 C3                CLR     C
0024 33                RLC     A
0025         ?C0201:
0025 D8FC              DJNZ    R0,?C0200
0027 900000      R     MOV     DPTR,#SCAN_Val
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D C007              PUSH    AR7
002F 120000      R     LCALL   Read_Scan_Lines
0032 EF                MOV     A,R7
0033 F4                CPL     A
0034 FE                MOV     R6,A
0035 D0E0              POP     ACC
0037 5E                ANL     A,R6
0038 900000      R     MOV     DPTR,#SCAN_Val
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
003C 600C              JZ      ?C0052
                                           ; SOURCE LINE # 379
                                           ; SOURCE LINE # 380
003E AF00        E     MOV     R7,new_keyl
0040 EF                MOV     A,R7
0041 C3                CLR     C
0042 13                RRC     A
0043 AF00        E     MOV     R7,new_keyl
0045 20E00C            JB      ACC.0,?C0224
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0048 8011              SJMP    ?C0223
004A         ?C0052:
                                           ; SOURCE LINE # 390
                                           ; SOURCE LINE # 391
004A AF00        E     MOV     R7,new_keyl
004C EF                MOV     A,R7
004D C3                CLR     C
004E 13                RRC     A
004F AF00        E     MOV     R7,new_keyl
0051 20E007            JB      ACC.0,?C0056
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
0054         ?C0224:
0054 EF                MOV     A,R7
0055 54EF              ANL     A,#0EFH
0057 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 394
0059 8005              SJMP    ?C0055
005B         ?C0056:
                                           ; SOURCE LINE # 396
                                           ; SOURCE LINE # 397
005B         ?C0223:
005B EF                MOV     A,R7
005C 4410              ORL     A,#010H
005E F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0060         ?C0055:
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 38  

                                           ; SOURCE LINE # 401
0060 AF00        E     MOV     R7,new_keyl
0062 EF                MOV     A,R7
0063 20E034            JB      ACC.0,?C0058
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
0066 AF00        E     MOV     R7,new_keyl
0068 EF                MOV     A,R7
0069 C4                SWAP    A
006A 13                RRC     A
006B 5407              ANL     A,#07H
006D 6018              JZ      ?C0059
                                           ; SOURCE LINE # 404
                                           ; SOURCE LINE # 405
006F AF00        E     MOV     R7,new_keyl
0071 EF                MOV     A,R7
0072 C4                SWAP    A
0073 13                RRC     A
0074 5407              ANL     A,#07H
0076 FE                MOV     R6,A
0077 EF                MOV     A,R7
0078 541F              ANL     A,#01FH
007A FF                MOV     R7,A
007B EE                MOV     A,R6
007C 14                DEC     A
007D 5407              ANL     A,#07H
007F C4                SWAP    A
0080 33                RLC     A
0081 54E0              ANL     A,#0E0H
0083 4F                ORL     A,R7
0084 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 406
0086 22                RET     
0087         ?C0059:
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0087 AF00        E     MOV     R7,new_keyl
0089 EF                MOV     A,R7
008A C4                SWAP    A
008B 540F              ANL     A,#0FH
008D 20E002            JB      ACC.0,?C0061
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 411
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 413
0090 8011              SJMP    ?C0225
0092         ?C0061:
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
0092 AF00        E     MOV     R7,new_keyl
0094 EF                MOV     A,R7
0095 4401              ORL     A,#01H
0097 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
0099 22                RET     
009A         ?C0058:
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
009A AF00        E     MOV     R7,new_keyl
009C EF                MOV     A,R7
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 39  

009D C4                SWAP    A
009E 540F              ANL     A,#0FH
00A0 20E006            JB      ACC.0,?C0064
                                           ; SOURCE LINE # 423
                                           ; SOURCE LINE # 424
00A3         ?C0225:
00A3 E4                CLR     A
00A4 F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 425
00A6 F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 426
00A8 22                RET     
00A9         ?C0064:
                                           ; SOURCE LINE # 428
                                           ; SOURCE LINE # 429
00A9 120000      R     LCALL   change_valid
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
00AC         ?C0066:
00AC 22                RET     
             ; FUNCTION debounce_key (END)

             ; FUNCTION Read_Scan_Lines (BEGIN)
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 444
0000 901D04            MOV     DPTR,#01D04H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 445
0005         ?C0067:
0005 22                RET     
             ; FUNCTION Read_Scan_Lines (END)

             ; FUNCTION change_valid (BEGIN)
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
                                           ; SOURCE LINE # 454
0000 AF00        E     MOV     R7,new_keyh
0002 EF                MOV     A,R7
0003 5407              ANL     A,#07H
0005 FF                MOV     R7,A
0006 7401              MOV     A,#01H
0008 A807              MOV     R0,AR7
000A 08                INC     R0
000B 8002              SJMP    ?C0203
000D         ?C0202:
000D C3                CLR     C
000E 33                RLC     A
000F         ?C0203:
000F D8FC              DJNZ    R0,?C0202
0011 FF                MOV     R7,A
;---- Variable 'mask' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 455
0012 AE00        E     MOV     R6,new_keyh
0014 EE                MOV     A,R6
0015 C4                SWAP    A
0016 540F              ANL     A,#0FH
0018 2400        E     ADD     A,#LOW bscan_matrix
001A F8                MOV     R0,A
001B E6                MOV     A,@R0
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 40  

;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 456
001C 6F                XRL     A,R7
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 457
001E AD00        E     MOV     R5,new_keyh
0020 ED                MOV     A,R5
0021 C4                SWAP    A
0022 540F              ANL     A,#0FH
0024 2400        E     ADD     A,#LOW bscan_matrix
0026 F8                MOV     R0,A
0027 A606              MOV     @R0,AR6
                                           ; SOURCE LINE # 459
0029 900000      R     MOV     DPTR,#event
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
002F EF                MOV     A,R7
0030 5E                ANL     A,R6
0031 6018              JZ      ?C0068
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0035 850000      E     MOV     typematic,new_keyh
                                           ; SOURCE LINE # 464
0038 E500        E     MOV     A,scan+01H
003A 540F              ANL     A,#0FH
003C 4440              ORL     A,#040H
003E F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 465
0040 900000      E     MOV     DPTR,#bTMdelay
0043 E0                MOVX    A,@DPTR
0044 900000      E     MOV     DPTR,#bTMcount
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0048 E4                CLR     A
0049 F500        E     MOV     ex_typematic,A
                                           ; SOURCE LINE # 468
004B         ?C0068:
                                           ; SOURCE LINE # 470
004B 7800        E     MOV     R0,#LOW ?Send_Scan2?BYTE
004D 7C00        E     MOV     R4,#HIGH ?Send_Scan2?BYTE
004F 7D01              MOV     R5,#01H
0051 7B00              MOV     R3,#00H
0053 7A00        E     MOV     R2,#HIGH new_keyh
0055 7900        E     MOV     R1,#LOW new_keyh
0057 7E00              MOV     R6,#00H
0059 7F01              MOV     R7,#01H
005B 120000      E     LCALL   ?C?COPY
005E 900000      R     MOV     DPTR,#event
0061 E0                MOVX    A,@DPTR
0062 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
0065 F0                MOVX    @DPTR,A
0066 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 471
0069 E4                CLR     A
006A F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 472
006C F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 473
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 41  

006E 22                RET     
             ; FUNCTION change_valid (END)

             ; FUNCTION check_tm (BEGIN)
                                           ; SOURCE LINE # 480
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 482
;---- Variable 'SCAN_flag' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 484
0002 900000      R     MOV     DPTR,#key
0005 E0                MOVX    A,@DPTR
0006 5407              ANL     A,#07H
0008 FE                MOV     R6,A
0009 7401              MOV     A,#01H
000B A806              MOV     R0,AR6
000D 08                INC     R0
000E 8002              SJMP    ?C0205
0010         ?C0204:
0010 C3                CLR     C
0011 33                RLC     A
0012         ?C0205:
0012 D8FC              DJNZ    R0,?C0204
0014 FE                MOV     R6,A
;---- Variable 'SACN_Val' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 485
0015 900000      R     MOV     DPTR,#key
0018 E0                MOVX    A,@DPTR
0019 C4                SWAP    A
001A 540F              ANL     A,#0FH
001C 2400        E     ADD     A,#LOW bscan_matrix
001E F8                MOV     R0,A
001F E6                MOV     A,@R0
0020 5E                ANL     A,R6
                                           ; SOURCE LINE # 487
0021 7004              JNZ     ?C0070
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
0023 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 490
0025 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 491
0027         ?C0070:
                                           ; SOURCE LINE # 493
0027 EF                MOV     A,R7
0028 701C              JNZ     ?C0071
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
002A AE00        E     MOV     R6,scan+01H
002C EE                MOV     A,R6
002D C4                SWAP    A
002E 540F              ANL     A,#0FH
0030 FD                MOV     R5,A
0031 EE                MOV     A,R6
0032 540F              ANL     A,#0FH
0034 FE                MOV     R6,A
0035 ED                MOV     A,R5
0036 14                DEC     A
0037 540F              ANL     A,#0FH
0039 C4                SWAP    A
003A 54F0              ANL     A,#0F0H
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 42  

003C 4E                ORL     A,R6
003D F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 496
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 6002              JZ      ?C0071
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
0044 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
0046         ?C0071:
                                           ; SOURCE LINE # 502
0046 EF                MOV     A,R7
0047 7013              JNZ     ?C0073
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 504
0049 E500        E     MOV     A,scan+01H
004B 540F              ANL     A,#0FH
004D 4440              ORL     A,#040H
004F F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 505
0051 900000      E     MOV     DPTR,#bTMcount
0054 E0                MOVX    A,@DPTR
0055 14                DEC     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 506
0057 E0                MOVX    A,@DPTR
0058 6002              JZ      ?C0073
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
005A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 509
                                           ; SOURCE LINE # 510
005C         ?C0073:
                                           ; SOURCE LINE # 512
005C EF                MOV     A,R7
005D 7024              JNZ     ?C0076
                                           ; SOURCE LINE # 513
                                           ; SOURCE LINE # 514
005F 900000      E     MOV     DPTR,#bTMrepeat
0062 E0                MOVX    A,@DPTR
0063 900000      E     MOV     DPTR,#bTMcount
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
0067 7800        E     MOV     R0,#LOW ?Send_Scan2?BYTE
0069 7C00        E     MOV     R4,#HIGH ?Send_Scan2?BYTE
006B 7D01              MOV     R5,#01H
006D 7B01              MOV     R3,#01H
006F 7A00        R     MOV     R2,#HIGH key
0071 7900        R     MOV     R1,#LOW key
0073 7E00              MOV     R6,#00H
0075 7F01              MOV     R7,#01H
0077 120000      E     LCALL   ?C?COPY
007A 900000      E     MOV     DPTR,#?Send_Scan2?BYTE+01H
007D 7402              MOV     A,#02H
007F F0                MOVX    @DPTR,A
0080 120000      E     LCALL   Send_Scan2
                                           ; SOURCE LINE # 516
                                           ; SOURCE LINE # 517
0083         ?C0076:
0083 22                RET     
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 43  

             ; FUNCTION check_tm (END)

             ; FUNCTION Scan_Init (BEGIN)
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
                                           ; SOURCE LINE # 524
0000 901D00            MOV     DPTR,#01D00H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 534
0007 22                RET     
             ; FUNCTION Scan_Init (END)

             ; FUNCTION Enable_Any_Key_Irq (BEGIN)
                                           ; SOURCE LINE # 549
                                           ; SOURCE LINE # 550
                                           ; SOURCE LINE # 551
0000 901D00            MOV     DPTR,#01D00H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 552
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 555
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 561
0007         ?C0078:
                                           ; SOURCE LINE # 563
0007 901105            MOV     DPTR,#01105H
000A E0                MOVX    A,@DPTR
000B 4408              ORL     A,#08H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
000E 22                RET     
             ; FUNCTION Enable_Any_Key_Irq (END)

             ; FUNCTION Start_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 576
                                           ; SOURCE LINE # 577
0000 020000      E     LJMP    EnableSendToHostTimer
             ; FUNCTION Start_Scan_Transmission (END)

             ; FUNCTION Check_Scan_Transmission (BEGIN)
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#allow_transmission
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 591
0005 7800        E     MOV     R0,#LOW Int_Var
0007 E6                MOV     A,@R0
0008 C4                SWAP    A
0009 13                RRC     A
000A 13                RRC     A
000B 13                RRC     A
000C 5401              ANL     A,#01H
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 44  

000E 20E017            JB      ACC.0,?C0081
0011 7800        E     MOV     R0,#LOW Flag
0013 E6                MOV     A,@R0
0014 20E011            JB      ACC.0,?C0081
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0017 AF00        E     MOV     R7,scan
0019 EF                MOV     A,R7
001A C4                SWAP    A
001B 540F              ANL     A,#0FH
001D FF                MOV     R7,A
001E E500        E     MOV     A,scan
0020 540F              ANL     A,#0FH
0022 6F                XRL     A,R7
0023 6003              JZ      ?C0081
                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 596
0025 7401              MOV     A,#01H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 598
0028         ?C0081:
                                           ; SOURCE LINE # 600
0028 900000      R     MOV     DPTR,#allow_transmission
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
                                           ; SOURCE LINE # 601
002D         ?C0083:
002D 22                RET     
             ; FUNCTION Check_Scan_Transmission (END)

             ; FUNCTION Setup_Scanner_Pntr (BEGIN)
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
                                           ; SOURCE LINE # 612
0000 900000      E     MOV     DPTR,#KeyboardMatrixID
0003 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 613
                                           ; SOURCE LINE # 638
0004         ?C0085:
                                           ; SOURCE LINE # 639
0004 900000      E     MOV     DPTR,#Scanner_Table_Pntr
0007 7400        E     MOV     A,#HIGH Rc_ROM_Tables
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B 7400        E     MOV     A,#LOW Rc_ROM_Tables
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
000E         ?C0086:
000E 22                RET     
             ; FUNCTION Setup_Scanner_Pntr (END)

             ; FUNCTION Get_Kbd_Type (BEGIN)
                                           ; SOURCE LINE # 654
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0000 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 657
0002         ?C0087:
0002 22                RET     
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 45  

             ; FUNCTION Get_Kbd_Type (END)

             ; FUNCTION Setup_Ext_Hotkey_Pntr (BEGIN)
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
                                           ; SOURCE LINE # 704
0000 120000      R     LCALL   Hookc_Get_Ext_Hotkey_Pntr
0003 AE02              MOV     R6,AR2
0005 AF01              MOV     R7,AR1
0007 900000      R     MOV     DPTR,#Ext_Hotkey_Pntr
000A EE                MOV     A,R6
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 706
000F 4E                ORL     A,R6
0010 7057              JNZ     ?C0091
                                           ; SOURCE LINE # 707
                                           ; SOURCE LINE # 717
                                           ; SOURCE LINE # 718
0012 900000      R     MOV     DPTR,#cpntr
0015 7400        E     MOV     A,#HIGH Rc_ROM_Tables
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 7400        E     MOV     A,#LOW Rc_ROM_Tables
001B F0                MOVX    @DPTR,A
001C         ?C0089:
                                           ; SOURCE LINE # 720
001C 900000      R     MOV     DPTR,#table_number
001F E0                MOVX    A,@DPTR
0020 D3                SETB    C
0021 9400              SUBB    A,#00H
0023 4020              JC      ?C0090
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 723
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A F582              MOV     DPL,A
002C 8E83              MOV     DPH,R6
002E E4                CLR     A
002F 93                MOVC    A,@A+DPTR
0030 2492              ADD     A,#092H
0032 FF                MOV     R7,A
0033 E4                CLR     A
0034 33                RLC     A
0035 900000      R     MOV     DPTR,#cpntr
0038 8FF0              MOV     B,R7
003A 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 727
003D 900000      R     MOV     DPTR,#table_number
0040 E0                MOVX    A,@DPTR
0041 14                DEC     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
0043 80D7              SJMP    ?C0089
0045         ?C0090:
                                           ; SOURCE LINE # 731
0045 900000      R     MOV     DPTR,#cpntr
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 46  

0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C F582              MOV     DPL,A
004E 8E83              MOV     DPH,R6
0050 E4                CLR     A
0051 93                MOVC    A,@A+DPTR
0052 2491              ADD     A,#091H
0054 FF                MOV     R7,A
0055 E4                CLR     A
0056 33                RLC     A
0057 900000      R     MOV     DPTR,#cpntr
005A 8FF0              MOV     B,R7
005C 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 735
005F 900000      R     MOV     DPTR,#Ext_Hotkey_Pntr
0062 7400        R     MOV     A,#HIGH cpntr
0064 F0                MOVX    @DPTR,A
0065 A3                INC     DPTR
0066 7400        R     MOV     A,#LOW cpntr
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 736
                                           ; SOURCE LINE # 737
                                           ; SOURCE LINE # 738
0069         ?C0091:
0069 22                RET     
             ; FUNCTION Setup_Ext_Hotkey_Pntr (END)

             ; FUNCTION Lock_Scan (BEGIN)
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
                                           ; SOURCE LINE # 748
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 4480              ORL     A,#080H
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 749
0006 22                RET     
             ; FUNCTION Lock_Scan (END)

             ; FUNCTION Unlock_Scan (BEGIN)
                                           ; SOURCE LINE # 754
                                           ; SOURCE LINE # 755
                                           ; SOURCE LINE # 756
0000 7800        E     MOV     R0,#LOW Int_Var
0002 E6                MOV     A,@R0
0003 547F              ANL     A,#07FH
0005 F6                MOV     @R0,A
                                           ; SOURCE LINE # 757
0006 22                RET     
             ; FUNCTION Unlock_Scan (END)

             ; FUNCTION Init_Kbd (BEGIN)
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 763
                                           ; SOURCE LINE # 764
0000 120000      R     LCALL   Setup_Scanner_Pntr
                                           ; SOURCE LINE # 765
0003 120000      R     LCALL   Setup_Ext_Hotkey_Pntr
                                           ; SOURCE LINE # 767
0006 120000      R     LCALL   Setup_Diode_Key
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 47  

                                           ; SOURCE LINE # 771
0009 E4                CLR     A
000A F500        E     MOV     new_keyh,A
                                           ; SOURCE LINE # 772
000C F500        E     MOV     new_keyl,A
                                           ; SOURCE LINE # 776
000E 120000      E     LCALL   Clear_Fn_Keys
                                           ; SOURCE LINE # 777
0011 120000      R     LCALL   Clear_Key
                                           ; SOURCE LINE # 778
0014 120000      R     LCALL   ex_Clear_Key
                                           ; SOURCE LINE # 779
0017 120000      R     LCALL   Clear_Typematic
                                           ; SOURCE LINE # 781
001A 750038      E     MOV     Ccb42,#038H
                                           ; SOURCE LINE # 782
001D 22                RET     
             ; FUNCTION Init_Kbd (END)

             ; FUNCTION Setup_Diode_Key (BEGIN)
                                           ; SOURCE LINE # 787
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 792
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#diode_key
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
0005         ?C0097:
0005 22                RET     
             ; FUNCTION Setup_Diode_Key (END)

             ; FUNCTION Clear_Key (BEGIN)
                                           ; SOURCE LINE # 804
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 810
;---- Variable 'i' assigned to Register 'R7' ----
0000         ?C0098:
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
0000 7F13              MOV     R7,#013H
0002 7800        E     MOV     R0,#LOW bscan_matrix
0004 E4                CLR     A
0005         ?C0206:
0005 F6                MOV     @R0,A
0006 08                INC     R0
0007 DFFC              DJNZ    R7,?C0206
                                           ; SOURCE LINE # 813
0009         ?C0099:
                                           ; SOURCE LINE # 816
0009         ?C0101:
                                           ; SOURCE LINE # 817
                                           ; SOURCE LINE # 818
0009 7F10              MOV     R7,#010H
000B 900000      E     MOV     DPTR,#bKEY_BUFF
000E E4                CLR     A
000F         ?C0207:
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 48  

000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 DFFC              DJNZ    R7,?C0207
                                           ; SOURCE LINE # 819
0013         ?C0102:
                                           ; SOURCE LINE # 821
0013 E500        E     MOV     A,scan
0015 54F0              ANL     A,#0F0H
0017 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 822
0019 540F              ANL     A,#0FH
001B F500        E     MOV     scan,A
                                           ; SOURCE LINE # 824
001D E4                CLR     A
001E F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 826
0020 E500        E     MOV     A,scan+02H
0022 54EF              ANL     A,#0EFH
0024 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 827
0026 54DF              ANL     A,#0DFH
0028 F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 828
002A 54BF              ANL     A,#0BFH
002C F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 832
002E 74FF              MOV     A,#0FFH
0030 900000      R     MOV     DPTR,#msk_strobe
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 836
0036 E500        E     MOV     A,scan+02H
0038 54F0              ANL     A,#0F0H
003A F500        E     MOV     scan+02H,A
003C         ?C0104:
                                           ; SOURCE LINE # 838
003C 900000      R     MOV     DPTR,#msk_strobe+01H
003F E0                MOVX    A,@DPTR
0040 20E01A            JB      ACC.0,?C0106
                                           ; SOURCE LINE # 839
                                           ; SOURCE LINE # 840
0043 AF00        E     MOV     R7,scan+02H
0045 EF                MOV     A,R7
0046 54F0              ANL     A,#0F0H
0048 FE                MOV     R6,A
0049 EF                MOV     A,R7
004A 04                INC     A
004B 540F              ANL     A,#0FH
004D 4E                ORL     A,R6
004E F500        E     MOV     scan+02H,A
                                           ; SOURCE LINE # 841
0050 900000      R     MOV     DPTR,#msk_strobe
0053 E0                MOVX    A,@DPTR
0054 C3                CLR     C
0055 13                RRC     A
0056 F0                MOVX    @DPTR,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 13                RRC     A
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 49  

005B 80DF              SJMP    ?C0104
                                           ; SOURCE LINE # 843
005D         ?C0106:
005D 22                RET     
             ; FUNCTION Clear_Key (END)

             ; FUNCTION Clear_Typematic (BEGIN)
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
0000 E4                CLR     A
0001 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 852
0003 900000      E     MOV     DPTR,#bTMdelay
0006 741E              MOV     A,#01EH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 853
0009 900000      E     MOV     DPTR,#bTMrepeat
000C 7404              MOV     A,#04H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
000F 7800        E     MOV     R0,#LOW PS2KB_Typematic
0011 766F              MOV     @R0,#06FH
                                           ; SOURCE LINE # 855
0013 22                RET     
             ; FUNCTION Clear_Typematic (END)

             ; FUNCTION _Set_Typematic (BEGIN)
                                           ; SOURCE LINE # 872
;---- Variable 'type_rate' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 873
                                           ; SOURCE LINE # 874
0000 7800        E     MOV     R0,#LOW KB_Typematic
0002 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 877
0004 EF                MOV     A,R7
0005 541F              ANL     A,#01FH
0007 900000      R     MOV     DPTR,#repeat_tbl
000A 93                MOVC    A,@A+DPTR
000B 900000      E     MOV     DPTR,#bTMrepeat
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
000F EF                MOV     A,R7
0010 C4                SWAP    A
0011 13                RRC     A
0012 5407              ANL     A,#07H
0014 7E00              MOV     R6,#00H
0016 5403              ANL     A,#03H
0018 2400        R     ADD     A,#LOW delay_tbl
001A F582              MOV     DPL,A
001C EE                MOV     A,R6
001D 3400        R     ADDC    A,#HIGH delay_tbl
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 900000      E     MOV     DPTR,#bTMdelay
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 881
0027 22                RET     
             ; FUNCTION _Set_Typematic (END)

             ; FUNCTION Service_KEYSCAN (BEGIN)
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 50  

                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 892
0000 AF00        E     MOV     R7,Timer_A
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 20E007            JB      ACC.0,?C0109
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 894
0009 AF00        E     MOV     R7,Timer_A
000B EF                MOV     A,R7
000C 4410              ORL     A,#010H
000E F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 895
0010         ?C0109:
                                           ; SOURCE LINE # 900
0010 120000      R     LCALL   scan_keys
;---- Variable 'scan_activity' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 903
0013 EF                MOV     A,R7
0014 6005              JZ      ?C0110
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
0016 D200        E     SETB    bKB_MATRIX_SENSE
                                           ; SOURCE LINE # 906
0018 020000      E     LJMP    Oem_ScanActivity
                                           ; SOURCE LINE # 907
001B         ?C0110:
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
001B AF00        E     MOV     R7,Timer_A
001D EF                MOV     A,R7
001E 54EF              ANL     A,#0EFH
0020 F500        E     MOV     Timer_A,A
                                           ; SOURCE LINE # 911
0022 C200        E     CLR     F_Service_KEYSCAN
                                           ; SOURCE LINE # 912
0024 120000      R     LCALL   Enable_Any_Key_Irq
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 916
0027         ?C0112:
0027 22                RET     
             ; FUNCTION Service_KEYSCAN (END)

             ; FUNCTION Get_Buffer (BEGIN)
                                           ; SOURCE LINE # 931
                                           ; SOURCE LINE # 932
                                           ; SOURCE LINE # 935
0000 AF00        E     MOV     R7,scan
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 FF                MOV     R7,A
0007 E500        E     MOV     A,scan
0009 540F              ANL     A,#0FH
000B FE                MOV     R6,A
000C 6F                XRL     A,R7
000D 6031              JZ      ?C0113
                                           ; SOURCE LINE # 936
                                           ; SOURCE LINE # 937
000F E500        E     MOV     A,scan
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 51  

0011 54F0              ANL     A,#0F0H
0013 FF                MOV     R7,A
0014 EE                MOV     A,R6
0015 04                INC     A
0016 540F              ANL     A,#0FH
0018 4F                ORL     A,R7
0019 F500        E     MOV     scan,A
001B 7400        E     MOV     A,#LOW bKEY_BUFF
001D 2E                ADD     A,R6
001E F582              MOV     DPL,A
0020 E4                CLR     A
0021 3400        E     ADDC    A,#HIGH bKEY_BUFF
0023 F583              MOV     DPH,A
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 900000      R     MOV     DPTR,#buffer_data
002A E4                CLR     A
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
002F E500        E     MOV     A,scan
0031 540F              ANL     A,#0FH
0033 C3                CLR     C
0034 9410              SUBB    A,#010H
0036 4010              JC      ?C0115
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
0038 E500        E     MOV     A,scan
003A 54F0              ANL     A,#0F0H
003C F500        E     MOV     scan,A
                                           ; SOURCE LINE # 941
                                           ; SOURCE LINE # 942
003E 8008              SJMP    ?C0115
0040         ?C0113:
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 946
0040 74FF              MOV     A,#0FFH
0042 900000      R     MOV     DPTR,#buffer_data
0045 F0                MOVX    @DPTR,A
0046 A3                INC     DPTR
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 947
0048         ?C0115:
                                           ; SOURCE LINE # 949
0048 900000      R     MOV     DPTR,#buffer_data
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D A3                INC     DPTR
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
                                           ; SOURCE LINE # 950
0050         ?C0116:
0050 22                RET     
             ; FUNCTION Get_Buffer (END)

             ; FUNCTION Buffer_Mark (BEGIN)
                                           ; SOURCE LINE # 955
                                           ; SOURCE LINE # 956
                                           ; SOURCE LINE # 957
0000 E500        E     MOV     A,scan
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 52  

0002 54F0              ANL     A,#0F0H
0004 C4                SWAP    A
0005 540F              ANL     A,#0FH
0007 FF                MOV     R7,A
0008 E500        E     MOV     A,scan+01H
000A 54F0              ANL     A,#0F0H
000C 4F                ORL     A,R7
000D F500        E     MOV     scan+01H,A
                                           ; SOURCE LINE # 958
000F 22                RET     
             ; FUNCTION Buffer_Mark (END)

             ; FUNCTION _Buffer_Key (BEGIN)
                                           ; SOURCE LINE # 966
;---- Variable 'row_column' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
0000 900000      R     MOV     DPTR,#ready
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 970
0006 AE00        E     MOV     R6,scan
0008 EE                MOV     A,R6
0009 C4                SWAP    A
000A 540F              ANL     A,#0FH
000C FE                MOV     R6,A
000D 540F              ANL     A,#0FH
000F 2400        E     ADD     A,#LOW bKEY_BUFF
0011 F582              MOV     DPL,A
0013 E4                CLR     A
0014 3400        E     ADDC    A,#HIGH bKEY_BUFF
0016 F583              MOV     DPH,A
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 971
001A E500        E     MOV     A,scan
001C 540F              ANL     A,#0FH
001E FF                MOV     R7,A
001F EE                MOV     A,R6
0020 04                INC     A
0021 540F              ANL     A,#0FH
0023 C4                SWAP    A
0024 54F0              ANL     A,#0F0H
0026 4F                ORL     A,R7
0027 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 973
0029 C4                SWAP    A
002A 540F              ANL     A,#0FH
002C C3                CLR     C
002D 9410              SUBB    A,#010H
002F 4006              JC      ?C0118
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 975
0031 E500        E     MOV     A,scan
0033 540F              ANL     A,#0FH
0035 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 976
0037         ?C0118:
                                           ; SOURCE LINE # 979
0037 E500        E     MOV     A,scan
0039 540F              ANL     A,#0FH
003B FF                MOV     R7,A
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 53  

003C AE00        E     MOV     R6,scan
003E EE                MOV     A,R6
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 B50721            CJNE    A,AR7,?C0119
                                           ; SOURCE LINE # 980
                                           ; SOURCE LINE # 982
0045 E500        E     MOV     A,scan+01H
0047 540F              ANL     A,#0FH
0049 C4                SWAP    A
004A 54F0              ANL     A,#0F0H
004C FF                MOV     R7,A
004D E500        E     MOV     A,scan
004F 540F              ANL     A,#0FH
0051 4F                ORL     A,R7
0052 F500        E     MOV     scan,A
                                           ; SOURCE LINE # 983
0054 C4                SWAP    A
0055 540F              ANL     A,#0FH
0057 2400        E     ADD     A,#LOW bKEY_BUFF
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH bKEY_BUFF
005E F583              MOV     DPH,A
0060 E4                CLR     A
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 984
0062 900000      R     MOV     DPTR,#ready
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 985
0066         ?C0119:
                                           ; SOURCE LINE # 987
0066 900000      R     MOV     DPTR,#ready
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
                                           ; SOURCE LINE # 988
006B         ?C0120:
006B 22                RET     
             ; FUNCTION _Buffer_Key (END)

             ; FUNCTION Is_Key_Buffer_Ready (BEGIN)
                                           ; SOURCE LINE # 993
                                           ; SOURCE LINE # 994
                                           ; SOURCE LINE # 996
0000 AF00        E     MOV     R7,scan
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 FF                MOV     R7,A
;---- Variable 'CheckTail' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 997
0007 0F                INC     R7
                                           ; SOURCE LINE # 998
0008 EF                MOV     A,R7
0009 C3                CLR     C
000A 9410              SUBB    A,#010H
000C 4002              JC      ?C0121
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1000
000E E4                CLR     A
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 1001
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 54  

0010         ?C0121:
                                           ; SOURCE LINE # 1003
0010 E500        E     MOV     A,scan
0012 540F              ANL     A,#0FH
0014 B50702            CJNE    A,AR7,?C0122
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0017 C3                CLR     C
0018 22                RET     
                                           ; SOURCE LINE # 1006
0019         ?C0122:
                                           ; SOURCE LINE # 1007
0019 D3                SETB    C
                                           ; SOURCE LINE # 1009
001A         ?C0123:
001A 22                RET     
             ; FUNCTION Is_Key_Buffer_Ready (END)

             ; FUNCTION _Buffer_String (BEGIN)
                                           ; SOURCE LINE # 1020
0000 900000      R     MOV     DPTR,#pntr
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1021
                                           ; SOURCE LINE # 1022
;---- Variable 'error' assigned to Register 'R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008         ?C0124:
                                           ; SOURCE LINE # 1024
0008 900000      R     MOV     DPTR,#pntr
000B 120000      E     LCALL   ?C?PLDXDATA
000E 120000      E     LCALL   ?C?CLDPTR
0011 601A              JZ      ?C0125
0013 ED                MOV     A,R5
0014 7017              JNZ     ?C0125
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
0016 900000      R     MOV     DPTR,#pntr
0019 75F001            MOV     B,#01H
001C 120000      E     LCALL   ?C?PLDIXDATA
001F 120000      E     LCALL   ?C?CLDPTR
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _Buffer_Key
0026 EF                MOV     A,R7
0027 70DF              JNZ     ?C0124
                                           ; SOURCE LINE # 1027
                                           ; SOURCE LINE # 1028
0029 7D80              MOV     R5,#080H
                                           ; SOURCE LINE # 1029
                                           ; SOURCE LINE # 1030
002B 80DB              SJMP    ?C0124
002D         ?C0125:
                                           ; SOURCE LINE # 1032
002D AF05              MOV     R7,AR5
                                           ; SOURCE LINE # 1033
002F         ?C0127:
002F 22                RET     
             ; FUNCTION _Buffer_String (END)

             ; FUNCTION Hookc_Get_Kbd_Type (BEGIN)
                                           ; SOURCE LINE # 1041
                                           ; SOURCE LINE # 1042
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 55  

                                           ; SOURCE LINE # 1043
0000 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 1044
0002         ?C0128:
0002 22                RET     
             ; FUNCTION Hookc_Get_Kbd_Type (END)

             ; FUNCTION Hookc_Get_Ext_Hotkey_Pntr (BEGIN)
                                           ; SOURCE LINE # 1049
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
0000 7B00              MOV     R3,#00H
0002 7A00              MOV     R2,#00H
0004 7900              MOV     R1,#00H
                                           ; SOURCE LINE # 1052
0006         ?C0129:
0006 22                RET     
             ; FUNCTION Hookc_Get_Ext_Hotkey_Pntr (END)

             ; FUNCTION ex_scan_keys (BEGIN)
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#SCAN_Flag
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1068
0005 E500        E     MOV     A,ex_scan+02H
0007 54EF              ANL     A,#0EFH
0009 F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1069
000B 54DF              ANL     A,#0DFH
000D F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1070
000F 54BF              ANL     A,#0BFH
0011 F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1072
0013 E500        E     MOV     A,ex_typematic
0015 6016              JZ      ?C0130
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1074
0017 7800        R     MOV     R0,#LOW ?ex_check_tm?BYTE
0019 7C00        R     MOV     R4,#HIGH ?ex_check_tm?BYTE
001B 7D01              MOV     R5,#01H
001D 7B00              MOV     R3,#00H
001F 7A00        E     MOV     R2,#HIGH ex_typematic
0021 7900        E     MOV     R1,#LOW ex_typematic
0023 7E00              MOV     R6,#00H
0025 7F01              MOV     R7,#01H
0027 120000      E     LCALL   ?C?COPY
002A 120000      R     LCALL   ex_check_tm
                                           ; SOURCE LINE # 1075
002D         ?C0130:
                                           ; SOURCE LINE # 1077
002D E500        E     MOV     A,ex_new_keyh
002F 600F              JZ      ?C0131
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1080
0031 E500        E     MOV     A,ex_scan+02H
0033 4410              ORL     A,#010H
0035 F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1081
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 56  

0037 120000      R     LCALL   ex_debounce_key
                                           ; SOURCE LINE # 1082
003A 900000      R     MOV     DPTR,#SCAN_Flag
003D 7401              MOV     A,#01H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
0040         ?C0131:
                                           ; SOURCE LINE # 1085
0040 900000      R     MOV     DPTR,#SCAN_Flag
0043 E0                MOVX    A,@DPTR
0044 7049              JNZ     ?C0132
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
0046 A3                INC     DPTR
0047 F0                MOVX    @DPTR,A
0048         ?C0133:
0048 900000      R     MOV     DPTR,#SCAN_Cnt
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D C3                CLR     C
004E 9400              SUBB    A,#00H
0050 503D              JNC     ?C0132
                                           ; SOURCE LINE # 1088
                                           ; SOURCE LINE # 1089
0052 120000      R     LCALL   _ex_Write_Strobe
                                           ; SOURCE LINE # 1090
0055 901D04            MOV     DPTR,#01D04H
0058 E0                MOVX    A,@DPTR
0059 900000      R     MOV     DPTR,#SCAN_Val
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1091
005D 900000      R     MOV     DPTR,#SCAN_Cnt
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 2400        E     ADD     A,#LOW bscan_matrix+010H
0064 F8                MOV     R0,A
0065 E6                MOV     A,@R0
0066 FF                MOV     R7,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 F4                CPL     A
006A 6F                XRL     A,R7
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 6007              JZ      ?C0136
                                           ; SOURCE LINE # 1094
                                           ; SOURCE LINE # 1095
0070 EE                MOV     A,R6
0071 2410              ADD     A,#010H
0073 FD                MOV     R5,A
0074 120000      R     LCALL   _ex_check_scan
                                           ; SOURCE LINE # 1096
0077         ?C0136:
                                           ; SOURCE LINE # 1098
0077 900000      R     MOV     DPTR,#SCAN_Cnt
007A E0                MOVX    A,@DPTR
007B 2400        E     ADD     A,#LOW bscan_matrix+010H
007D F8                MOV     R0,A
007E E6                MOV     A,@R0
007F 6006              JZ      ?C0135
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 57  

                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1100
0081 E500        E     MOV     A,ex_scan+02H
0083 4440              ORL     A,#040H
0085 F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1101
                                           ; SOURCE LINE # 1102
0087         ?C0135:
0087 900000      R     MOV     DPTR,#SCAN_Cnt
008A E0                MOVX    A,@DPTR
008B 04                INC     A
008C F0                MOVX    @DPTR,A
008D 80B9              SJMP    ?C0133
                                           ; SOURCE LINE # 1103
008F         ?C0132:
                                           ; SOURCE LINE # 1105
008F AF00        E     MOV     R7,ex_new_keyl
0091 EF                MOV     A,R7
0092 13                RRC     A
0093 13                RRC     A
0094 13                RRC     A
0095 541F              ANL     A,#01FH
0097 30E03E            JNB     ACC.0,?C0138
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
009A AF00        E     MOV     R7,ex_new_keyl
009C EF                MOV     A,R7
009D 54F7              ANL     A,#0F7H
009F F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1108
00A1 E500        E     MOV     A,ex_new_keyl
00A3 5407              ANL     A,#07H
00A5 900000      R     MOV     DPTR,#SCAN_Val
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
00A9 E0                MOVX    A,@DPTR
00AA 7022              JNZ     ?C0139
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
00AC AF00        E     MOV     R7,ex_new_keyh
00AE EF                MOV     A,R7
00AF 5407              ANL     A,#07H
00B1 FF                MOV     R7,A
00B2 7401              MOV     A,#01H
00B4 A807              MOV     R0,AR7
00B6 08                INC     R0
00B7 8002              SJMP    ?C0209
00B9         ?C0208:
00B9 C3                CLR     C
00BA 33                RLC     A
00BB         ?C0209:
00BB D8FC              DJNZ    R0,?C0208
00BD 900000      R     MOV     DPTR,#SCAN_Val
00C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1112
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 900000      E     MOV     DPTR,#diode_key
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 EF                MOV     A,R7
00C9 5E                ANL     A,R6
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 58  

00CA 900000      R     MOV     DPTR,#SCAN_Val
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1113
00CE         ?C0139:
                                           ; SOURCE LINE # 1114
00CE 900000      R     MOV     DPTR,#SCAN_Val
00D1 E0                MOVX    A,@DPTR
00D2 7004              JNZ     ?C0138
                                           ; SOURCE LINE # 1115
                                           ; SOURCE LINE # 1116
00D4 F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1117
00D6 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1118
                                           ; SOURCE LINE # 1119
00D8         ?C0138:
                                           ; SOURCE LINE # 1120
00D8 901D03            MOV     DPTR,#01D03H
00DB 7403              MOV     A,#03H
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
00DE AF00        E     MOV     R7,ex_scan+02H
00E0 EF                MOV     A,R7
00E1 C4                SWAP    A
00E2 13                RRC     A
00E3 5401              ANL     A,#01H
00E5 FF                MOV     R7,A
00E6 AE00        E     MOV     R6,ex_scan+02H
00E8 EE                MOV     A,R6
00E9 C4                SWAP    A
00EA 5401              ANL     A,#01H
00EC 2F                ADD     A,R7
00ED FF                MOV     R7,A
00EE AE00        E     MOV     R6,ex_scan+02H
00F0 EE                MOV     A,R6
00F1 C4                SWAP    A
00F2 13                RRC     A
00F3 13                RRC     A
00F4 5401              ANL     A,#01H
00F6 2F                ADD     A,R7
00F7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1123
00F8         ?C0141:
00F8 22                RET     
             ; FUNCTION ex_scan_keys (END)

             ; FUNCTION _ex_Write_Strobe (BEGIN)
                                           ; SOURCE LINE # 1128
;---- Variable 'scan_line' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9402              SUBB    A,#02H
0004 5016              JNC     ?C0142
                                           ; SOURCE LINE # 1131
                                           ; SOURCE LINE # 1132
0006 901D00            MOV     DPTR,#01D00H
0009 74FF              MOV     A,#0FFH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1133
000C A3                INC     DPTR
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 59  

000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1134
000E 7401              MOV     A,#01H
0010 A807              MOV     R0,AR7
0012 08                INC     R0
0013 8002              SJMP    ?C0211
0015         ?C0210:
0015 C3                CLR     C
0016 33                RLC     A
0017         ?C0211:
0017 D8FC              DJNZ    R0,?C0210
0019 F4                CPL     A
                                           ; SOURCE LINE # 1138
001A 8008              SJMP    ?C0226
001C         ?C0142:
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
001C 901D00            MOV     DPTR,#01D00H
001F 74FF              MOV     A,#0FFH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1142
0022 A3                INC     DPTR
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
0024         ?C0226:
0024 901D03            MOV     DPTR,#01D03H
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
                                           ; SOURCE LINE # 1148
0028         ?C0144:
0028 22                RET     
             ; FUNCTION _ex_Write_Strobe (END)

             ; FUNCTION _ex_check_scan (BEGIN)
                                           ; SOURCE LINE # 1153
0000 900000      R     MOV     DPTR,#KSI_bit_num
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1159
;---- Variable 'flag' assigned to Register 'R3' ----
0008 E4                CLR     A
0009 FB                MOV     R3,A
                                           ; SOURCE LINE # 1160
000A AF00        E     MOV     R7,ex_new_keyl
000C EF                MOV     A,R7
000D 13                RRC     A
000E 13                RRC     A
000F 13                RRC     A
0010 541F              ANL     A,#01FH
0012 30E003            JNB     ACC.0,?C0145
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
0015 0B                INC     R3
                                           ; SOURCE LINE # 1163
0016 801E              SJMP    ?C0146
0018         ?C0145:
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 60  

0018 900000      R     MOV     DPTR,#scan_address
001B E0                MOVX    A,@DPTR
001C FD                MOV     R5,A
001D 2400        E     ADD     A,#LOW bscan_matrix
001F F8                MOV     R0,A
0020 E6                MOV     A,@R0
0021 F4                CPL     A
0022 FF                MOV     R7,A
0023 900000      R     MOV     DPTR,#KSI_bit_num
0026 E0                MOVX    A,@DPTR
0027 5F                ANL     A,R7
0028 FF                MOV     R7,A
;---- Variable 'change_make_key' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1167
0029 7003              JNZ     ?C0147
                                           ; SOURCE LINE # 1168
                                           ; SOURCE LINE # 1169
002B FB                MOV     R3,A
                                           ; SOURCE LINE # 1170
002C 8008              SJMP    ?C0146
002E         ?C0147:
                                           ; SOURCE LINE # 1171
002E 120000      R     LCALL   _find_paths
0031 EF                MOV     A,R7
0032 6002              JZ      ?C0146
                                           ; SOURCE LINE # 1172
                                           ; SOURCE LINE # 1173
0034 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1174
                                           ; SOURCE LINE # 1175
0036         ?C0146:
                                           ; SOURCE LINE # 1177
0036 EB                MOV     A,R3
0037 601F              JZ      ?C0150
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
0039 AF00        E     MOV     R7,ex_new_keyl
003B EF                MOV     A,R7
003C 4408              ORL     A,#08H
003E F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1180
0040 900000      R     MOV     DPTR,#KSI_bit_num
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 2400        E     ADD     A,#LOW bscan_matrix
0049 F8                MOV     R0,A
004A E6                MOV     A,@R0
004B FE                MOV     R6,A
004C 900000      E     MOV     DPTR,#diode_key
004F E0                MOVX    A,@DPTR
0050 4E                ORL     A,R6
0051 FE                MOV     R6,A
0052 EF                MOV     A,R7
0053 5E                ANL     A,R6
0054 900000      R     MOV     DPTR,#KSI_bit_num
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1181
0058         ?C0150:
                                           ; SOURCE LINE # 1183
0058 E4                CLR     A
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 61  

0059 900000      R     MOV     DPTR,#SCAN_Cnt
005C F0                MOVX    @DPTR,A
005D         ?C0151:
                                           ; SOURCE LINE # 1184
005D 900000      R     MOV     DPTR,#KSI_bit_num
0060 E0                MOVX    A,@DPTR
0061 601F              JZ      ?C0154
                                           ; SOURCE LINE # 1185
                                           ; SOURCE LINE # 1186
0063 30E00D            JNB     ACC.0,?C0153
                                           ; SOURCE LINE # 1187
                                           ; SOURCE LINE # 1188
0066 900000      R     MOV     DPTR,#SCAN_Cnt
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B 900000      R     MOV     DPTR,#scan_address
006E E0                MOVX    A,@DPTR
006F FD                MOV     R5,A
0070 120000      R     LCALL   _ex_cscfnd
                                           ; SOURCE LINE # 1189
0073         ?C0153:
                                           ; SOURCE LINE # 1190
0073 900000      R     MOV     DPTR,#SCAN_Cnt
0076 E0                MOVX    A,@DPTR
0077 04                INC     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
0079 900000      R     MOV     DPTR,#KSI_bit_num
007C E0                MOVX    A,@DPTR
007D C3                CLR     C
007E 13                RRC     A
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1192
0080 80DB              SJMP    ?C0151
                                           ; SOURCE LINE # 1193
0082         ?C0154:
0082 22                RET     
             ; FUNCTION _ex_check_scan (END)

             ; FUNCTION _ex_cscfnd (BEGIN)
                                           ; SOURCE LINE # 1196
0000 900000      R     MOV     DPTR,#SCAN_Cnt
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
                                           ; SOURCE LINE # 1198
0008 E0                MOVX    A,@DPTR
0009 FD                MOV     R5,A
000A 2400        E     ADD     A,#LOW bscan_matrix
000C F8                MOV     R0,A
000D E6                MOV     A,@R0
000E FB                MOV     R3,A
000F 7A00              MOV     R2,#00H
0011 900000      R     MOV     DPTR,#SCAN_Cnt
0014 E0                MOVX    A,@DPTR
0015 FC                MOV     R4,A
0016 7401              MOV     A,#01H
0018 7E00              MOV     R6,#00H
001A A804              MOV     R0,AR4
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 62  

001C 08                INC     R0
001D 8005              SJMP    ?C0213
001F         ?C0212:
001F C3                CLR     C
0020 33                RLC     A
0021 CE                XCH     A,R6
0022 33                RLC     A
0023 CE                XCH     A,R6
0024         ?C0213:
0024 D8F9              DJNZ    R0,?C0212
0026 FF                MOV     R7,A
0027 EE                MOV     A,R6
0028 5A                ANL     A,R2
0029 FE                MOV     R6,A
002A EF                MOV     A,R7
002B 5B                ANL     A,R3
002C 4E                ORL     A,R6
002D 6015              JZ      ?C0155
                                           ; SOURCE LINE # 1199
                                           ; SOURCE LINE # 1200
002F AF00        E     MOV     R7,ex_scan+02H
0031 EF                MOV     A,R7
0032 C4                SWAP    A
0033 13                RRC     A
0034 5407              ANL     A,#07H
0036 20E026            JB      ACC.0,?C0159
                                           ; SOURCE LINE # 1201
                                           ; SOURCE LINE # 1202
0039 EF                MOV     A,R7
003A 4420              ORL     A,#020H
003C F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1203
003E AF04              MOV     R7,AR4
0040 7B01              MOV     R3,#01H
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
0042 8018              SJMP    ?C0227
0044         ?C0155:
                                           ; SOURCE LINE # 1207
                                           ; SOURCE LINE # 1208
0044 AF00        E     MOV     R7,ex_scan+02H
0046 EF                MOV     A,R7
0047 C4                SWAP    A
0048 540F              ANL     A,#0FH
004A 20E012            JB      ACC.0,?C0159
                                           ; SOURCE LINE # 1209
                                           ; SOURCE LINE # 1210
004D EF                MOV     A,R7
004E 4410              ORL     A,#010H
0050 F500        E     MOV     ex_scan+02H,A
                                           ; SOURCE LINE # 1211
0052 900000      R     MOV     DPTR,#SCAN_Cnt
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A E4                CLR     A
005B FB                MOV     R3,A
005C         ?C0227:
005C 120000      R     LCALL   _ex_setup_debounce
                                           ; SOURCE LINE # 1212
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 63  

                                           ; SOURCE LINE # 1213
                                           ; SOURCE LINE # 1214
005F         ?C0159:
005F 22                RET     
             ; FUNCTION _ex_cscfnd (END)

             ; FUNCTION _ex_setup_debounce (BEGIN)
                                           ; SOURCE LINE # 1219
;---- Variable 'KSI_bit_num' assigned to Register 'R7' ----
;---- Variable 'event' assigned to Register 'R3' ----
;---- Variable 'scan_address' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1220
                                           ; SOURCE LINE # 1221
0000 ED                MOV     A,R5
0001 24F0              ADD     A,#0F0H
0003 540F              ANL     A,#0FH
0005 C4                SWAP    A
0006 54F0              ANL     A,#0F0H
0008 FE                MOV     R6,A
0009 AD00        E     MOV     R5,ex_new_keyh
000B ED                MOV     A,R5
000C 540F              ANL     A,#0FH
000E 4E                ORL     A,R6
000F F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1222
0011 EF                MOV     A,R7
0012 5407              ANL     A,#07H
0014 FF                MOV     R7,A
0015 AE00        E     MOV     R6,ex_new_keyh
0017 EE                MOV     A,R6
0018 54F8              ANL     A,#0F8H
001A 4F                ORL     A,R7
001B F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1223
001D AF00        E     MOV     R7,ex_new_keyh
001F EF                MOV     A,R7
0020 4408              ORL     A,#08H
0022 F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1224
0024 AF00        E     MOV     R7,ex_new_keyl
0026 EF                MOV     A,R7
0027 54FE              ANL     A,#0FEH
0029 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1225
002B AF00        E     MOV     R7,ex_new_keyl
002D EF                MOV     A,R7
002E 54EF              ANL     A,#0EFH
0030 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1227
0032 EB                MOV     A,R3
0033 AF00        E     MOV     R7,ex_new_keyl
0035 7005              JNZ     ?C0160
                                           ; SOURCE LINE # 1228
                                           ; SOURCE LINE # 1229
0037 EF                MOV     A,R7
0038 54FD              ANL     A,#0FDH
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
003A 8003              SJMP    ?C0228
003C         ?C0160:
                                           ; SOURCE LINE # 1233
                                           ; SOURCE LINE # 1234
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 64  

003C EF                MOV     A,R7
003D 4402              ORL     A,#02H
003F         ?C0228:
003F F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1235
0041 AF00        E     MOV     R7,ex_new_keyl
0043 EF                MOV     A,R7
0044 541F              ANL     A,#01FH
0046 4420              ORL     A,#020H
0048 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1236
                                           ; SOURCE LINE # 1237
004A         ?C0162:
004A 22                RET     
             ; FUNCTION _ex_setup_debounce (END)

             ; FUNCTION ex_debounce_key (BEGIN)
                                           ; SOURCE LINE # 1240
                                           ; SOURCE LINE # 1241
                                           ; SOURCE LINE # 1244
0000 AF00        E     MOV     R7,ex_new_keyh
0002 EF                MOV     A,R7
0003 C4                SWAP    A
0004 540F              ANL     A,#0FH
0006 FF                MOV     R7,A
0007 120000      R     LCALL   _ex_Write_Strobe
                                           ; SOURCE LINE # 1246
000A 120000      R     LCALL   Read_Scan_Lines
000D EF                MOV     A,R7
000E F4                CPL     A
000F FF                MOV     R7,A
;---- Variable 'SCAN_Tmp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1247
0010 AE00        E     MOV     R6,ex_new_keyh
0012 EE                MOV     A,R6
0013 5407              ANL     A,#07H
0015 FE                MOV     R6,A
0016 7401              MOV     A,#01H
0018 A806              MOV     R0,AR6
001A 08                INC     R0
001B 8002              SJMP    ?C0215
001D         ?C0214:
001D C3                CLR     C
001E 33                RLC     A
001F         ?C0215:
001F D8FC              DJNZ    R0,?C0214
;---- Variable 'SCAN_Val' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 1248
0021 5F                ANL     A,R7
0022 FE                MOV     R6,A
                                           ; SOURCE LINE # 1250
0023 600C              JZ      ?C0163
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
0025 AF00        E     MOV     R7,ex_new_keyl
0027 EF                MOV     A,R7
0028 C3                CLR     C
0029 13                RRC     A
002A AF00        E     MOV     R7,ex_new_keyl
002C 20E00C            JB      ACC.0,?C0230
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1254
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 65  

                                           ; SOURCE LINE # 1255
002F 8011              SJMP    ?C0229
0031         ?C0163:
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
0031 AF00        E     MOV     R7,ex_new_keyl
0033 EF                MOV     A,R7
0034 C3                CLR     C
0035 13                RRC     A
0036 AF00        E     MOV     R7,ex_new_keyl
0038 20E007            JB      ACC.0,?C0167
                                           ; SOURCE LINE # 1264
                                           ; SOURCE LINE # 1265
003B         ?C0230:
003B EF                MOV     A,R7
003C 54EF              ANL     A,#0EFH
003E F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1266
0040 8005              SJMP    ?C0166
0042         ?C0167:
                                           ; SOURCE LINE # 1268
                                           ; SOURCE LINE # 1269
0042         ?C0229:
0042 EF                MOV     A,R7
0043 4410              ORL     A,#010H
0045 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
0047         ?C0166:
                                           ; SOURCE LINE # 1273
0047 AF00        E     MOV     R7,ex_new_keyl
0049 EF                MOV     A,R7
004A 20E034            JB      ACC.0,?C0169
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1275
004D AF00        E     MOV     R7,ex_new_keyl
004F EF                MOV     A,R7
0050 C4                SWAP    A
0051 13                RRC     A
0052 5407              ANL     A,#07H
0054 6018              JZ      ?C0170
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1277
0056 AF00        E     MOV     R7,ex_new_keyl
0058 EF                MOV     A,R7
0059 C4                SWAP    A
005A 13                RRC     A
005B 5407              ANL     A,#07H
005D FE                MOV     R6,A
005E EF                MOV     A,R7
005F 541F              ANL     A,#01FH
0061 FF                MOV     R7,A
0062 EE                MOV     A,R6
0063 14                DEC     A
0064 5407              ANL     A,#07H
0066 C4                SWAP    A
0067 33                RLC     A
0068 54E0              ANL     A,#0E0H
006A 4F                ORL     A,R7
006B F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1278
006D 22                RET     
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 66  

006E         ?C0170:
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
006E AF00        E     MOV     R7,ex_new_keyl
0070 EF                MOV     A,R7
0071 C4                SWAP    A
0072 540F              ANL     A,#0FH
0074 20E002            JB      ACC.0,?C0172
                                           ; SOURCE LINE # 1282
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
0077 8011              SJMP    ?C0231
0079         ?C0172:
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
0079 AF00        E     MOV     R7,ex_new_keyl
007B EF                MOV     A,R7
007C 4401              ORL     A,#01H
007E F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1290
                                           ; SOURCE LINE # 1291
0080 22                RET     
0081         ?C0169:
                                           ; SOURCE LINE # 1293
                                           ; SOURCE LINE # 1294
0081 AF00        E     MOV     R7,ex_new_keyl
0083 EF                MOV     A,R7
0084 C4                SWAP    A
0085 540F              ANL     A,#0FH
0087 20E006            JB      ACC.0,?C0175
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1296
008A         ?C0231:
008A E4                CLR     A
008B F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1297
008D F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1298
008F 22                RET     
0090         ?C0175:
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1301
0090 120000      R     LCALL   ex_change_valid
                                           ; SOURCE LINE # 1302
                                           ; SOURCE LINE # 1303
                                           ; SOURCE LINE # 1304
0093         ?C0177:
0093 22                RET     
             ; FUNCTION ex_debounce_key (END)

             ; FUNCTION ex_change_valid (BEGIN)
                                           ; SOURCE LINE # 1309
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1313
0000 AF00        E     MOV     R7,ex_new_keyh
0002 EF                MOV     A,R7
0003 5407              ANL     A,#07H
0005 FF                MOV     R7,A
0006 7401              MOV     A,#01H
0008 A807              MOV     R0,AR7
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 67  

000A 08                INC     R0
000B 8002              SJMP    ?C0217
000D         ?C0216:
000D C3                CLR     C
000E 33                RLC     A
000F         ?C0217:
000F D8FC              DJNZ    R0,?C0216
0011 FF                MOV     R7,A
;---- Variable 'mask' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1314
0012 AE00        E     MOV     R6,ex_new_keyh
0014 EE                MOV     A,R6
0015 C4                SWAP    A
0016 540F              ANL     A,#0FH
0018 2400        E     ADD     A,#LOW bscan_matrix+010H
001A F8                MOV     R0,A
001B E6                MOV     A,@R0
;---- Variable 'temp' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 1315
001C 6F                XRL     A,R7
001D FE                MOV     R6,A
                                           ; SOURCE LINE # 1316
001E AD00        E     MOV     R5,ex_new_keyh
0020 ED                MOV     A,R5
0021 C4                SWAP    A
0022 540F              ANL     A,#0FH
0024 2400        E     ADD     A,#LOW bscan_matrix+010H
0026 F8                MOV     R0,A
0027 A606              MOV     @R0,AR6
                                           ; SOURCE LINE # 1318
0029 900000      R     MOV     DPTR,#event
002C 7401              MOV     A,#01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1319
002F EF                MOV     A,R7
0030 5E                ANL     A,R6
0031 6018              JZ      ?C0178
                                           ; SOURCE LINE # 1320
                                           ; SOURCE LINE # 1321
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1322
0035 850000      E     MOV     ex_typematic,ex_new_keyh
                                           ; SOURCE LINE # 1323
0038 E500        E     MOV     A,ex_scan+01H
003A 540F              ANL     A,#0FH
003C 4440              ORL     A,#040H
003E F500        E     MOV     ex_scan+01H,A
                                           ; SOURCE LINE # 1324
0040 900000      E     MOV     DPTR,#bTMdelay
0043 E0                MOVX    A,@DPTR
0044 900000      E     MOV     DPTR,#bTMcount
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1326
0048 E4                CLR     A
0049 F500        E     MOV     typematic,A
                                           ; SOURCE LINE # 1327
004B         ?C0178:
                                           ; SOURCE LINE # 1329
004B 7800        R     MOV     R0,#LOW ?ex_Send_Scan2?BYTE
004D 7C00        R     MOV     R4,#HIGH ?ex_Send_Scan2?BYTE
004F 7D01              MOV     R5,#01H
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 68  

0051 7B00              MOV     R3,#00H
0053 7A00        E     MOV     R2,#HIGH ex_new_keyh
0055 7900        E     MOV     R1,#LOW ex_new_keyh
0057 7E00              MOV     R6,#00H
0059 7F01              MOV     R7,#01H
005B 120000      E     LCALL   ?C?COPY
005E 900000      R     MOV     DPTR,#event
0061 E0                MOVX    A,@DPTR
0062 900000      R     MOV     DPTR,#?ex_Send_Scan2?BYTE+01H
0065 F0                MOVX    @DPTR,A
0066 120000      R     LCALL   ex_Send_Scan2
                                           ; SOURCE LINE # 1330
0069 E4                CLR     A
006A F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1331
006C F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1332
006E 22                RET     
             ; FUNCTION ex_change_valid (END)

             ; FUNCTION ex_Send_Scan2 (BEGIN)
                                           ; SOURCE LINE # 1337
                                           ; SOURCE LINE # 1338
                                           ; SOURCE LINE # 1343
0000 900000      E     MOV     DPTR,#UtilityFlag
0003 E0                MOVX    A,@DPTR
0004 30E629            JNB     ACC.6,?C0180
                                           ; SOURCE LINE # 1344
                                           ; SOURCE LINE # 1345
0007 900000      E     MOV     DPTR,#KeyScanACK
000A E0                MOVX    A,@DPTR
000B F4                CPL     A
000C 704D              JNZ     ?C0183
                                           ; SOURCE LINE # 1346
                                           ; SOURCE LINE # 1347
000E 900000      R     MOV     DPTR,#event
0011 E0                MOVX    A,@DPTR
0012 7047              JNZ     ?C0183
                                           ; SOURCE LINE # 1348
                                           ; SOURCE LINE # 1349
0014 900000      R     MOV     DPTR,#key
0017 E0                MOVX    A,@DPTR
0018 5407              ANL     A,#07H
001A 900000      E     MOV     DPTR,#KeyScanKSI
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1350
001E 900000      R     MOV     DPTR,#key
0021 E0                MOVX    A,@DPTR
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 900000      E     MOV     DPTR,#KeyScanKSO
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1351
0029 900000      E     MOV     DPTR,#KeyScanACK
002C 7444              MOV     A,#044H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1352
                                           ; SOURCE LINE # 1353
002F 22                RET     
                                           ; SOURCE LINE # 1355
0030         ?C0180:
                                           ; SOURCE LINE # 1358
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 69  

0030 900000      R     MOV     DPTR,#key
0033 E0                MOVX    A,@DPTR
0034 5407              ANL     A,#07H
0036 75F003            MOV     B,#03H
0039 A4                MUL     AB
003A FF                MOV     R7,A
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D C4                SWAP    A
003E 540F              ANL     A,#0FH
0040 2F                ADD     A,R7
0041 FF                MOV     R7,A
;---- Variable 'temp' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1359
0042 900000      E     MOV     DPTR,#Extendkey_Table_Pntr
0045 E0                MOVX    A,@DPTR
0046 FC                MOV     R4,A
0047 A3                INC     DPTR
0048 E0                MOVX    A,@DPTR
0049 2F                ADD     A,R7
004A F582              MOV     DPL,A
004C E4                CLR     A
004D 3C                ADDC    A,R4
004E F583              MOV     DPH,A
0050 E4                CLR     A
0051 93                MOVC    A,@A+DPTR
0052 FF                MOV     R7,A
;---- Variable 'table_entry' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1360
0053 900000      R     MOV     DPTR,#event
0056 E0                MOVX    A,@DPTR
0057 FD                MOV     R5,A
0058 120000      E     LCALL   _Send_Key
                                           ; SOURCE LINE # 1361
005B         ?C0183:
005B 22                RET     
             ; FUNCTION ex_Send_Scan2 (END)

             ; FUNCTION ex_Clear_Key (BEGIN)
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1368
0000 E4                CLR     A
0001 F500        E     MOV     ex_new_keyh,A
                                           ; SOURCE LINE # 1369
0003 F500        E     MOV     ex_new_keyl,A
                                           ; SOURCE LINE # 1370
0005 F500        E     MOV     ex_typematic,A
                                           ; SOURCE LINE # 1371
0007 22                RET     
             ; FUNCTION ex_Clear_Key (END)

             ; FUNCTION ex_check_tm (BEGIN)
                                           ; SOURCE LINE # 1376
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1378
;---- Variable 'SCAN_flag' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
                                           ; SOURCE LINE # 1380
0002 900000      R     MOV     DPTR,#key
0005 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 70  

0006 5407              ANL     A,#07H
0008 FE                MOV     R6,A
0009 7401              MOV     A,#01H
000B A806              MOV     R0,AR6
000D 08                INC     R0
000E 8002              SJMP    ?C0219
0010         ?C0218:
0010 C3                CLR     C
0011 33                RLC     A
0012         ?C0219:
0012 D8FC              DJNZ    R0,?C0218
0014 FE                MOV     R6,A
;---- Variable 'SCAN_Val' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 1381
0015 900000      R     MOV     DPTR,#key
0018 E0                MOVX    A,@DPTR
0019 C4                SWAP    A
001A 540F              ANL     A,#0FH
001C 2400        E     ADD     A,#LOW bscan_matrix+010H
001E F8                MOV     R0,A
001F E6                MOV     A,@R0
0020 5E                ANL     A,R6
                                           ; SOURCE LINE # 1383
0021 7004              JNZ     ?C0185
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1385
0023 F500        E     MOV     ex_typematic,A
                                           ; SOURCE LINE # 1386
0025 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1387
0027         ?C0185:
                                           ; SOURCE LINE # 1389
0027 EF                MOV     A,R7
0028 701C              JNZ     ?C0186
                                           ; SOURCE LINE # 1390
                                           ; SOURCE LINE # 1391
002A AE00        E     MOV     R6,ex_scan+01H
002C EE                MOV     A,R6
002D C4                SWAP    A
002E 540F              ANL     A,#0FH
0030 FD                MOV     R5,A
0031 EE                MOV     A,R6
0032 540F              ANL     A,#0FH
0034 FE                MOV     R6,A
0035 ED                MOV     A,R5
0036 14                DEC     A
0037 540F              ANL     A,#0FH
0039 C4                SWAP    A
003A 54F0              ANL     A,#0F0H
003C 4E                ORL     A,R6
003D F500        E     MOV     ex_scan+01H,A
                                           ; SOURCE LINE # 1392
003F C4                SWAP    A
0040 540F              ANL     A,#0FH
0042 6002              JZ      ?C0186
                                           ; SOURCE LINE # 1393
                                           ; SOURCE LINE # 1394
0044 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1396
0046         ?C0186:
                                           ; SOURCE LINE # 1398
C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 71  

0046 EF                MOV     A,R7
0047 7013              JNZ     ?C0188
                                           ; SOURCE LINE # 1399
                                           ; SOURCE LINE # 1400
0049 E500        E     MOV     A,ex_scan+01H
004B 540F              ANL     A,#0FH
004D 4440              ORL     A,#040H
004F F500        E     MOV     ex_scan+01H,A
                                           ; SOURCE LINE # 1401
0051 900000      E     MOV     DPTR,#bTMcount
0054 E0                MOVX    A,@DPTR
0055 14                DEC     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1402
0057 E0                MOVX    A,@DPTR
0058 6002              JZ      ?C0188
                                           ; SOURCE LINE # 1403
                                           ; SOURCE LINE # 1404
005A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
005C         ?C0188:
                                           ; SOURCE LINE # 1408
005C EF                MOV     A,R7
005D 7024              JNZ     ?C0191
                                           ; SOURCE LINE # 1409
                                           ; SOURCE LINE # 1410
005F 900000      E     MOV     DPTR,#bTMrepeat
0062 E0                MOVX    A,@DPTR
0063 900000      E     MOV     DPTR,#bTMcount
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1411
0067 7800        R     MOV     R0,#LOW ?ex_Send_Scan2?BYTE
0069 7C00        R     MOV     R4,#HIGH ?ex_Send_Scan2?BYTE
006B 7D01              MOV     R5,#01H
006D 7B01              MOV     R3,#01H
006F 7A00        R     MOV     R2,#HIGH key
0071 7900        R     MOV     R1,#LOW key
0073 7E00              MOV     R6,#00H
0075 7F01              MOV     R7,#01H
0077 120000      E     LCALL   ?C?COPY
007A 900000      R     MOV     DPTR,#?ex_Send_Scan2?BYTE+01H
007D 7402              MOV     A,#02H
007F F0                MOVX    @DPTR,A
0080 120000      R     LCALL   ex_Send_Scan2
                                           ; SOURCE LINE # 1412
                                           ; SOURCE LINE # 1413
0083         ?C0191:
0083 22                RET     
             ; FUNCTION ex_check_tm (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3046    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =      2      39
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V7.06   CORE_SCAN                                                             07/06/2010 09:59:44 PAGE 72  


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
