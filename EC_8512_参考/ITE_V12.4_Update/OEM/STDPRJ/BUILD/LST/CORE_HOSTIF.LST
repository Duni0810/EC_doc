C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE CORE_HOSTIF
OBJECT MODULE PLACED IN SOURCE\CORE_HOSTIF.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe SOURCE\CORE_HOSTIF.C LA WL(1) CD OT(8,SIZE) OR

stmt level    source

   1          /*-----------------------------------------------------------------------------
   2           * TITLE: CORE_HOSTIF.C - Host Interface Handler
   3           *
   4           * Copyright (c) 1983-2009, Insyde Software Corporation. All Rights Reserved.
   5           *
   6           * You may not reproduce, distribute, publish, display, perform, modify, adapt,
   7           * transmit, broadcast, present, recite, release, license or otherwise exploit
   8           * any part of this publication in any form, by any means, without the prior
   9           * written permission of Insyde Software Corporation.
  10           *---------------------------------------------------------------------------*/
  11          #include "CORE_INCLUDE.H"
  12          #include "OEM_INCLUDE.H"
  13          
  14          /*-----------------------------------------------------------------------------
  15           * Local Parameter Definition
  16           *---------------------------------------------------------------------------*/
  17          #define T_InitSIO_LOOP          0x100
  18          
  19          /* ----------------------------------------------------------------------------
  20           * FUNCTION: Service_SEND
  21           *
  22           * Send data from the scanner keyboard or from multibyte command responses to
  23           * the Host.
  24           *
  25           * Send scan codes from scanner keyboard to the Host.  Also handle multiple
  26           * byte transmissions for standard commands and extended commands that return
  27           * more than one byte to the Host.
  28           *
  29           * When sending multiple bytes, the 1st byte is sent immediately, but the
  30           * remaining bytes are sent by generating another send request via the
  31           * function "handle_unlock" which will call "Start_Scan_Transmission".
  32           * If more bytes are to be sent, "Start_Scan_Transmission" will start Timer A,
  33           * and the Timer A interrupt handler will generate the send request when the
  34           * response timer has expired!
  35           * ------------------------------------------------------------------------- */
  36          void Service_SEND(void)
  37          {
  38   1          //-------------------------------------------------------------------------
  39   1          BYTE nKBData;
  40   1          FLAG bBreak;
  41   1          BYTE KBCmdAck;
  42   1          //-------------------------------------------------------------------------
  43   1          KeyboardSendTimer++;
  44   1      
  45   1          TH1 = (T_Timer_SEND)>>8;
  46   1          TL1 = (T_Timer_SEND);       // Reload timer
  47   1      
  48   1          TF1 = 0;
  49   1          TR1 = 1;
  50   1          ET1 = 1;
  51   1          Timer_B.fbit.SEND_ENABLE = 1;
  52   1          
  53   1          //-------------------------------------------------------------------------
  54   1          if( IsFlag1(KBHISR,OBF) || IsFlag1(KBHISR,IBF) )
  55   1          {
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 2   

  56   2              return;
  57   2          }
  58   1          if ( KBPendingRXCount > 0 )
  59   1          {
  60   2              KBCmdAck = GetKB_PendingData();
  61   2              KBC_DataToHost(KBCmdAck);
  62   2              return;
  63   2          }
  64   1      
  65   1          /* ------------------------------------------------------------------------
  66   1          * Keyboard Buffer Data Send to Host(System)
  67   1          * ---------------------------------------------------------------------- */
  68   1          //if( Int_Var.Scan_Lock )     return;
  69   1          if( Ccb42_DISAB_KEY )       return;
  70   1      
  71   1          nKBData = Get_Buffer();
  72   1          FORCE_NO_XLATE = 0;
  73   1      
  74   1          if ( nKBData == 0xFF )  //0xFF: No key data in buffer
  75   1          {
  76   2              Timer_B.fbit.SEND_ENABLE = 0;
  77   2              return;
  78   2          }
  79   1          else
  80   1          {
  81   2              bBreak = Gen_Info_BREAK_SCAN;
  82   2              Gen_Info_BREAK_SCAN = 0;
  83   2              #if ENABLE_S5_KEYBOARD_INTR
                      if( CORE_PMFLAG_S5 )        return;
                      #endif
  86   2              #if ENABLE_S3_KEYBOARD_INTR
  87   2              if( CORE_PMFLAG_S3 )        return;
  88   2              #endif
  89   2              if ( send_to_pc(nKBData, bBreak) )
  90   2              {
  91   3                  Gen_Info_BREAK_SCAN = 1;    // Break prefix code.
  92   3              }
  93   2          }
  94   1          //-------------------------------------------------------------------------
  95   1      }
  96          
  97          /* ----------------------------------------------------------------------------
  98           * FUNCTION: Service_Send_PS2
  99           *
 100           * ------------------------------------------------------------------------- */
 101          void Service_Send_PS2(void)
 102          {
 103   1          BYTE index;
 104   1              //if(IsFlag1(KBHISR,OBF)||IsFlag1(KBHISR,IBF)||(Ccb42_DISAB_AUX))               // Dino 0202
 105   1              if(IsFlag1(KBHISR,OBF)||IsFlag1(KBHISR,IBF))    
 106   1              {
 107   2              if(SKIP_AUX_SCAN_CUNT<SkipScanAUXTime)
 108   2              {
 109   3                  SKIP_AUX_SCAN_CUNT = 10;    // pr-set to Stop scaning ps2 interface 100ms 
 110   3              }
 111   2              SetPS2InhibitTime(InactiveTime);
 112   2                      return;
 113   2              }
 114   1      
 115   1              if(TPACKCounter!=0x00)
 116   1              {
 117   2                      TPACKCounter--;
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 3   

 118   2              }
 119   1              else
 120   1              {
 121   2                      if(Ccb42_DISAB_AUX)             
 122   2                      {
 123   3                  if(SKIP_AUX_SCAN_CUNT<SkipScanAUXTime)
 124   3                  {
 125   4                      SKIP_AUX_SCAN_CUNT = 10;    // pr-set to Stop scaning ps2 interface 100ms 
 126   4                  }
 127   3                  SetPS2InhibitTime(InactiveTime);
 128   3                              return;
 129   3                      }
 130   2              }
 131   1      
 132   1              SendFromAux(MousePendingBuf);
 133   1      
 134   1          if(AUXInterfaceBusy)
 135   1          {
 136   2              AUXInterfaceBusy = 0;
 137   2              Send2Port((Main_KB_CHN-1), PS2_KBCmd_BK);
 138   2              SetPS2InhibitTime(KBCmdBusyInactiveTime);
 139   2          }
 140   1          else
 141   1          {
 142   2                  if(MULPX_Multiplex)
 143   2                  {
 144   3                  PS2Deviceactive();          // Enable all ps2 interface
 145   3                  }
 146   2                  else
 147   2                  {
 148   3                  for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 149   3                  {
 150   4                      if(IsFlag1(AuxFlags[index], DEVICE_IS_KEYBOARD))
 151   4                      {
 152   5                          *asPS2Struct[index].ps2ctrl=PS2_ReceiveMode;
 153   5                          SET_BIT(*asPS2Struct[index].ps2ier, asPS2Struct[index].ctrlbit); 
 154   5                      }
 155   4                  }
 156   3                  for(index=0x00;index<3;index++)     // Check any keyboard is attached?
 157   3                  {
 158   4                      if(index == AUXPortNum)
 159   4                      {
 160   5                          *asPS2Struct[AUXPortNum].ps2ctrl=PS2_ReceiveMode;
 161   5                                  SET_BIT(*asPS2Struct[AUXPortNum].ps2ier, asPS2Struct[AUXPortNum].ctrlbit);
 162   5                      }
 163   4                  }
 164   3                          SetPS2InhibitTime(InactiveTime);  
 165   3                  }
 166   2              }
 167   1          ResetMSPendingData();
 168   1      }
 169          
 170          /* ----------------------------------------------------------------------------
 171           * FUNCTION: KB_DataToHost
 172           *
 173           * Clear error bits in the Host Interface status port and sends a command
 174           * response byte or a byte of keyboard data to the Host.  Generate Host IRQ1
 175           * if keyboard interrupts are enabled in controller command byte.
 176           *
 177           * Input:  data to send to Host.
 178           * ------------------------------------------------------------------------- */
 179          BYTE KBC_DataToHost( BYTE nKBData )
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 4   

 180          {
 181   1          WORD  iLOOP;
 182   1      
 183   1          iLOOP = WaitKBDataDelay;
 184   1          do
 185   1          {
 186   2              if ( IS_BIT_SET( KBHISR, 1 ) )
 187   2              {
 188   3                  KBC_DataPending( nKBData );
 189   3                  return 0x00;
 190   3              }
 191   2              if ( (IS_BIT_CLEAR(KBHISR,1)) && (IS_BIT_CLEAR(KBHISR,0)) )
 192   2              {
 193   3                  break;
 194   3              }
 195   2              iLOOP--;
 196   2          }
 197   1          while ( iLOOP != 0 );
 198   1      
 199   1          SET_BIT( KBHISR, 4 );      //Keyboard Enabled
 200   1          CLEAR_BIT( KBHISR,5 );    //Transmit timeout clear
 201   1      
 202   1          if ( Ccb42_INTR_KEY )
 203   1          {
 204   2              SET_BIT( KBHICR, 0 );
 205   2          }
 206   1          else
 207   1          {
 208   2              CLEAR_BIT( KBHICR, 0 );
 209   2          }
 210   1      
 211   1          if ( IS_BIT_SET( KBHISR, 1 ) )
 212   1          {
 213   2              KBC_DataPending( nKBData );
 214   2              return 0x00;
 215   2          }
 216   1          KBHIKDOR = nKBData;
 217   1          
 218   1          if(PS2_KBCMD)
 219   1          {
 220   2              RamDebug(nKBData);
 221   2          }
 222   1      
 223   1          #if  SUPPORTED_RECORDER
 224   1          if( En_RecordKB60 )     {   RamDebug(0x61);     RamDebug(nKBData);  }
 225   1          #endif
 226   1      
 227   1          return 0x01;
 228   1      
 229   1      }
 230          
 231          
 232          /* ----------------------------------------------------------------------------
 233           * FUNCTION: Data_To_Host
 234           *
 235           * Clear error bits in the Host Interface status port and sends a command
 236           * response byte or a byte of keyboard data to the Host.  Generate Host IRQ1
 237           * if keyboard interrupts are enabled in controller command byte.
 238           *
 239           * Input:  data to send to Host.
 240           * ------------------------------------------------------------------------- */
 241          void Data_To_Host(BYTE data_byte)
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 5   

 242          {
 243   1          #if OEM_HOOK_KB_DATA
                  if( OemHandle_Data_To_Host(data_byte) )
                  {
                      return;
                  }
                  #endif
 249   1      
 250   1          SET_BIT( KBHISR,4 );      //Keyboard Enabled
 251   1          CLEAR_BIT( KBHISR,5 );    //Transmit timeout
 252   1      
 253   1          if ( Ccb42_INTR_KEY )
 254   1          {
 255   2              SET_BIT( KBHICR, 0 );
 256   2          }
 257   1          else
 258   1          {
 259   2              CLEAR_BIT( KBHICR, 0 );
 260   2          }
 261   1      
 262   1          KBHIKDOR = data_byte;
 263   1          #if En_RecordKB60
                  RamDebug(data_byte);
                  #endif
 266   1      
 267   1      }
 268          
 269          //-----------------------------------------------------------------------------
 270          //
 271          //-----------------------------------------------------------------------------
 272          void KBC_DataPending(BYTE nPending)
 273          {
 274   1          if( KBPendingRXCount > 3 )  return;
 275   1      
 276   1          KBDataPending[(KBPendingRXCount&0x03)] = nPending;
 277   1          KBPendingRXCount++;
 278   1          EnableSendToHostTimer();
 279   1      }
 280          //-----------------------------------------------------------------------------
 281          BYTE GetKB_PendingData(void)
 282          {
 283   1          BYTE buffer_data;
 284   1          buffer_data=KBDataPending[(KBPendingTXCount&0x03)];
 285   1          KBPendingTXCount++;
 286   1          if( KBPendingTXCount >= KBPendingRXCount )
 287   1          {
 288   2              KBPendingTXCount = 0;
 289   2              KBPendingRXCount = 0;
 290   2          }
 291   1          return buffer_data;
 292   1      }
 293          //-----------------------------------------------------------------------------
 294          
 295          /* ----------------------------------------------------------------------------
 296           * FUNCTION: Aux_Data_To_Host - Send auxiliary device (mouse) data to the Host.
 297           *
 298           * Clear error bits in the Host Interface status port and sends a byte of
 299           * aux device (mouse) data to the Host.  Generates Host IRQ12 if aux device
 300           * (mouse) interrupts are enabled in controller command byte.
 301           *
 302           * Input: data to send to Host.
 303           * ------------------------------------------------------------------------- */
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 6   

 304          void Aux_Data_To_Host( BYTE data_byte )
 305          {
 306   1          if ( Ccb42_SYS_FLAG )       // Put system flag bit in Status Reg.
 307   1          {
 308   2              SET_BIT( KBHISR, 2 );
 309   2          }
 310   1          else
 311   1          {
 312   2              CLEAR_BIT( KBHISR, 2 );
 313   2          }
 314   1      
 315   1          CLEAR_BIT( KBHISR, 4 );      //Keyboard Disabled
 316   1          SET_BIT( KBHISR, 5 );
 317   1      
 318   1          if ( Ccb42_INTR_AUX )
 319   1          {
 320   2              SET_BIT( KBHICR, 1 );
 321   2          }
 322   1          else
 323   1          {
 324   2              CLEAR_BIT( KBHICR, 1 );
 325   2          }
 326   1      
 327   1          KBHIMDOR = data_byte;
 328   1      }
 329          
 330          //-----------------------------------------------------------------------------
 331          #if !(OEM_InitSIO_Table)     /*<------<< PROJECT.H */
 332          //-----------------------------------------------------------------------------
 333          const BYTE code initsio_table[]=
 334          {
 335              /* Configure and Enable Logical Device 06h(KBD) */
 336              0x07 ,0x06, // Select Logical Device 06h(KBD)
 337              0x70 ,0x01, // Set IRQ=01h for Logical Device 06h(KBD)
 338              0x30 ,0x01, // Enable Logical Device 06h(Mouse)
 339              /* Configure and Enable Logical Device 05h(Mouse) */
 340              0x07 ,0x05, // Select Logical Device 05h(Mouse)
 341              0x70 ,0x0C, // Set IRQ=0Ch for Logical Device 05h(Mouse)
 342              0x30 ,0x01, // Enable Logical Device 05h(Mouse)
 343              /* Enable Logical Device 11h(PM1) */
 344              0x07 ,0x11, // Select Logical Device 11h(PM1)
 345              0x70 ,0x00, // Clear IRQ=0 for  Logical Device 11h(PM1)
 346              0x30 ,0x01, // Enable Logical Device 11h(PM1)
 347              /* Enable Logical Device 12h(PM3) */
 348              0x07 ,0x12, // Select Logical Device 12h(PM3)
 349              0x70 ,0x00, // Clear IRQ=0 for  Logical Device 12h(PM3)
 350              0x30 ,0x01, // Enable Logical Device 12h(PM3)
 351              /* Enable Logical Device 04h(MSWC) */
 352              0x07 ,0x04, // Logical Device 04h(MSWC)
 353              0x30 ,0x00, // Disable MSWC
 354              /* Enable Logical Device 10h(RTC) */
 355              0x07 ,0x10, // Logical Device 10h(RTC)
 356              0x30 ,0x00, // Disable RTC
 357              /* Enable Logical Device 0Fh(Shared Memory) */
 358              0x07 ,0x0F, // Logical Device 0Fh(Shared Memory)
 359              0x30 ,0x01, // MSWC Shared Memory
 360              0xF4 ,0x09, // MSWC Shared Memory
 361          
 362          };
 363          
 364          
 365          /* ----------------------------------------------------------------------------
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 7   

 366           * FUNCTION: InitSio
 367           *           Init super IO function
 368           * ------------------------------------------------------------------------- */
 369          void InitSio(void)
 370          {
 371   1          BYTE code * data_pntr;
 372   1          BYTE cnt;
 373   1          WORD Timeout;
 374   1      
 375   1          SET_BIT( LSIOHA, 0 );
 376   1          SET_BIT( IBMAE,  0 );
 377   1          SET_BIT( IBCTL,  0 );
 378   1      
 379   1          cnt = 0;
 380   1          data_pntr = initsio_table;
 381   1          while( cnt < (sizeof(initsio_table)/2) )
 382   1          {
 383   2              IHIOA = 0;      // Set indirect Host I/O Address
 384   2              IHD = *data_pntr;
 385   2              Timeout = 0;
 386   2              while( IS_BIT_SET(IBCTL,2) )
 387   2              {
 388   3                  Timeout++;
 389   3                  if( Timeout > T_InitSIO_LOOP )   break;
 390   3              }
 391   2      
 392   2              data_pntr ++;
 393   2      
 394   2              IHIOA = 1;      // Set indirect Host I/O Address
 395   2              IHD = *data_pntr;
 396   2              Timeout = 0;
 397   2              while( IS_BIT_SET(IBCTL,2) )
 398   2              {
 399   3                  Timeout++;
 400   3                  if( Timeout > T_InitSIO_LOOP )   break;
 401   3              }
 402   2      
 403   2              data_pntr ++;
 404   2              cnt ++;
 405   2          }
 406   1      
 407   1          CLEAR_BIT( LSIOHA, 0 );
 408   1          CLEAR_BIT( IBMAE,  0 );
 409   1          CLEAR_BIT( IBCTL,  0 );
 410   1      }
 411          //-----------------------------------------------------------------------------
 412          #endif      /*<------<< PROJECT.H */
 413          //-----------------------------------------------------------------------------
 414          
 415          /* ----------------------------------------------------------------------------
 416           * FUNCTION: send_ext_to_pc, send_to_pc
 417           *
 418           * send_ext_to_pc is just a 'pre-entry' to the original send_to_pc
 419           * routine.  It's sole purpose is to check auxiliary keyboard entries
 420           * for external hotkey functions.  This allows it to set flags for
 421           * CTRL and ALT states, then if BOTH are set, hotkeys can be checked.
 422           *
 423           * Send data to Host.  If password is enabled, the data
 424           * will not be sent until the password is entered correctly.
 425           *
 426           * Input: data - Data to send to PC.
 427           *        break_prefix_flag - TRUE if last scan code was a break prefix.
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 8   

 428           *
 429           * Returns: TRUE if translation mode is enabled and
 430           *          scan code was a break prefix.
 431           * ----------------------------------------------------------------------------*/
 432          static BYTE send_to_pc( BYTE data_word, BYTE break_prefix_flag )
 433          {
 434   1          return( common_send_to_pc( data_word, break_prefix_flag ) );
 435   1      }
 436          
 437          static BYTE common_send_to_pc( BYTE data_word, BYTE break_prefix_flag )
 438          {
 439   1          BYTE send_it = FALSE;
 440   1      
 441   1          if ( Ccb42_XLATE_PC == 0 )          // Send data as is.
 442   1          {
 443   2              send_it = TRUE;
 444   2              break_prefix_flag = FALSE;
 445   2          }
 446   1          else    // Translation mode is enabled.
 447   1          {
 448   2              data_word = translate_to_pc( data_word, break_prefix_flag );
 449   2              if ( data_word == 0xFF )
 450   2              {
 451   3                  break_prefix_flag = TRUE;   // Don't send break code prefix.
 452   3              }
 453   2              else if( data_word == 0x00 )
 454   2              {
 455   3                  break_prefix_flag = TRUE;;  // Don't send break code prefix.
 456   3              }
 457   2              else
 458   2              {
 459   3                  break_prefix_flag = FALSE;
 460   3                  send_it = TRUE;
 461   3              }
 462   2          }
 463   1      
 464   1          if ( send_it ) {    Data_To_Host(data_word);   }
 465   1      
 466   1          return( break_prefix_flag );
 467   1      }
 468          
 469          /* ----------------------------------------------------------------------------
 470           * FUNCTION: translate_to_pc
 471           *
 472           * Translate scan code from "set 2 scan code" to "set 1 scan code".
 473           *
 474           * Input: data - scan code received from aux keyboard or local keyboard.
 475           *        break_prefix_flag - TRUE if last scan code was a break prefix.
 476           *
 477           * Return: a value with all bits set if data is break prefix (0xF0);
 478           *         otherwise, returns translated key.
 479           * ------------------------------------------------------------------------- */
 480          static BYTE translate_to_pc( BYTE data_word, BYTE break_prefix_flag )
 481          {
 482   1          /* Scan code set 2 to scan code set 1 translation table.  First byte is a
 483   1             dummy entry because scan code "0" is not translated. */
 484   1          static const BYTE code scan2_table[] =
 485   1          {
 486   1              0x00, 0x43, 0x41, 0x3F, 0x3D, 0x3B, 0x3C, 0x58,
 487   1              0x64, 0x44, 0x42, 0x40, 0x3E, 0x0F, 0x29, 0x59,
 488   1              0x65, 0x38, 0x2A, 0x70, 0x1D, 0x10, 0x02, 0x5A,
 489   1              0x66, 0x71, 0x2C, 0x1F, 0x1E, 0x11, 0x03, 0x5B,
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 9   

 490   1              0x67, 0x2E, 0x2D, 0x20, 0x12, 0x05, 0x04, 0x5C,
 491   1              0x68, 0x39, 0x2F, 0x21, 0x14, 0x13, 0x06, 0x5D,
 492   1              0x69, 0x31, 0x30, 0x23, 0x22, 0x15, 0x07, 0x5E,
 493   1              0x6A, 0x72, 0x32, 0x24, 0x16, 0x08, 0x09, 0x5F,
 494   1              0x6B, 0x33, 0x25, 0x17, 0x18, 0x0B, 0x0A, 0x60,
 495   1              0x6C, 0x34, 0x35, 0x26, 0x27, 0x19, 0x0C, 0x61,
 496   1              0x6D, 0x73, 0x28, 0x74, 0x1A, 0x0D, 0x62, 0x6E,
 497   1              0x3A, 0x36, 0x1C, 0x1B, 0x75, 0x2B, 0x63, 0x76,
 498   1              0x55, 0x56, 0x77, 0x78, 0x79, 0x7A, 0x0E, 0x7B,
 499   1              0x7C, 0x4F, 0x7D, 0x4B, 0x47, 0x7E, 0x7F, 0x6F,
 500   1              0x52, 0x53, 0x50, 0x4C, 0x4D, 0x48, 0x01, 0x45,
 501   1              0x57, 0x4E, 0x51, 0x4A, 0x37, 0x49, 0x46, 0x54
 502   1          };
 503   1      
 504   1          BYTE check_break_bit = FALSE;
 505   1      
 506   1          if ( data_word == 0xF0 )
 507   1          {   /* Signify that break code prefix was encountered. */
 508   2              data_word = 0xFF;
 509   2          }
 510   1          else if ( data_word == 0x00 )
 511   1          {
 512   2              data_word = 0x00;           /* Key detection error/overrun. */
 513   2          }
 514   1          else if ( (data_word & 0x80) == 0 )
 515   1          {   /* Translate codes 01 thru 7F. */
 516   2              /* The variable "data" has scan code (set 2) to translate.
 517   2                 Set "data" to the translated (to set 1) scan code. */
 518   2              data_word = scan2_table[data_word];
 519   2              check_break_bit = TRUE;
 520   2          }
 521   1          else if ( data_word == 0x83 )   /* ID code for 101/102 keys. */
 522   1          {
 523   2              data_word = 0x41;           /* Translate ID code. */
 524   2              check_break_bit = TRUE;
 525   2          }
 526   1          else if ( data_word == 0x84 )   /* ID code for 84 keys. */
 527   1          {
 528   2              data_word = 0x54;           /* Translate ID code. */
 529   2              check_break_bit = TRUE;
 530   2          }
 531   1      
 532   1          if ( check_break_bit && break_prefix_flag )
 533   1          {   /* Last code received by this routine was the break prefix.This must be
 534   2                 a break code. Set high bit to indicate that this is a break code. */
 535   2              data_word |= 0x80;
 536   2          }
 537   1      
 538   1          return(data_word);
 539   1      }
 540          
 541          
 542          /*-----------------------------------------------------------------------------
 543           * End
 544           *---------------------------------------------------------------------------*/
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Service_SEND (BEGIN)
                                           ; SOURCE LINE # 36
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 43
0000 900000      E     MOV     DPTR,#KeyboardSendTimer
0003 E0                MOVX    A,@DPTR
0004 04                INC     A
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 45
0006 758DFA            MOV     TH1,#0FAH
                                           ; SOURCE LINE # 46
0009 758B01            MOV     TL1,#01H
                                           ; SOURCE LINE # 48
000C C28F              CLR     TF1
                                           ; SOURCE LINE # 49
000E D28E              SETB    TR1
                                           ; SOURCE LINE # 50
0010 D2AB              SETB    ET1
                                           ; SOURCE LINE # 51
0012 AF00        E     MOV     R7,Timer_B
0014 EF                MOV     A,R7
0015 4410              ORL     A,#010H
0017 F500        E     MOV     Timer_B,A
                                           ; SOURCE LINE # 54
0019 901304            MOV     DPTR,#01304H
001C E0                MOVX    A,@DPTR
001D 20E049            JB      ACC.0,?C0003
0020 E0                MOVX    A,@DPTR
0021 20E145            JB      ACC.1,?C0003
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0024         ?C0001:
                                           ; SOURCE LINE # 58
0024 900000      E     MOV     DPTR,#KBPendingRXCount
0027 E0                MOVX    A,@DPTR
0028 D3                SETB    C
0029 9400              SUBB    A,#00H
002B 4006              JC      ?C0004
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 60
002D 120000      R     LCALL   GetKB_PendingData
;---- Variable 'KBCmdAck' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 61
0030 020000      R     LJMP    _KBC_DataToHost
                                           ; SOURCE LINE # 63
0033         ?C0004:
                                           ; SOURCE LINE # 69
0033 200033      E     JB      Ccb42_DISAB_KEY,?C0003
0036         ?C0005:
                                           ; SOURCE LINE # 71
0036 120000      E     LCALL   Get_Buffer
;---- Variable 'nKBData' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 72
0039 C200        E     CLR     FORCE_NO_XLATE
                                           ; SOURCE LINE # 74
003B EF                MOV     A,R7
003C B4FF08            CJNE    A,#0FFH,?C0006
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 76
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 11  

003F AF00        E     MOV     R7,Timer_B
0041 EF                MOV     A,R7
0042 54EF              ANL     A,#0EFH
0044 F500        E     MOV     Timer_B,A
0046 22                RET     
                                           ; SOURCE LINE # 78
0047         ?C0006:
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0047 A200        E     MOV     C,Gen_Info_BREAK_SCAN
0049 E4                CLR     A
004A 33                RLC     A
004B 900000      R     MOV     DPTR,#bBreak
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 82
004F C200        E     CLR     Gen_Info_BREAK_SCAN
                                           ; SOURCE LINE # 87
0051 7800        E     MOV     R0,#LOW CORE_PMFLAG
0053 E6                MOV     A,@R0
0054 FE                MOV     R6,A
0055 13                RRC     A
0056 13                RRC     A
0057 543F              ANL     A,#03FH
0059 20E00D            JB      ACC.0,?C0003
005C         ?C0008:
                                           ; SOURCE LINE # 89
005C 900000      R     MOV     DPTR,#bBreak
005F E0                MOVX    A,@DPTR
0060 FD                MOV     R5,A
0061 120000      R     LCALL   _send_to_pc
0064 EF                MOV     A,R7
0065 6002              JZ      ?C0003
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0067 D200        E     SETB    Gen_Info_BREAK_SCAN
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 95
0069         ?C0003:
0069 22                RET     
             ; FUNCTION Service_SEND (END)

             ; FUNCTION Service_Send_PS2 (BEGIN)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 105
0000 901304            MOV     DPTR,#01304H
0003 E0                MOVX    A,@DPTR
0004 20E004            JB      ACC.0,?C0011
0007 E0                MOVX    A,@DPTR
0008 30E10C            JNB     ACC.1,?C0010
000B         ?C0011:
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
000B 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
000D E6                MOV     A,@R0
000E C3                CLR     C
000F 9496              SUBB    A,#096H
0011 5019              JNC     ?C0089
                                           ; SOURCE LINE # 108
                                           ; SOURCE LINE # 109
0013 760A              MOV     @R0,#0AH
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 12  

                                           ; SOURCE LINE # 110
0015         ?C0012:
                                           ; SOURCE LINE # 111
0015 8015              SJMP    ?C0089
                                           ; SOURCE LINE # 113
0017         ?C0010:
                                           ; SOURCE LINE # 115
0017 7800        E     MOV     R0,#LOW TPACKCounter
0019 E6                MOV     A,@R0
001A 6003              JZ      ?C0014
                                           ; SOURCE LINE # 116
                                           ; SOURCE LINE # 117
001C 16                DEC     @R0
                                           ; SOURCE LINE # 118
001D 8012              SJMP    ?C0015
001F         ?C0014:
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
001F 30000F      E     JNB     Ccb42_DISAB_AUX,?C0015
                                           ; SOURCE LINE # 122
                                           ; SOURCE LINE # 123
0022 7800        E     MOV     R0,#LOW SKIP_AUX_SCAN_CUNT
0024 E6                MOV     A,@R0
0025 C3                CLR     C
0026 9496              SUBB    A,#096H
0028 5002              JNC     ?C0017
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 125
002A 760A              MOV     @R0,#0AH
                                           ; SOURCE LINE # 126
002C         ?C0017:
                                           ; SOURCE LINE # 127
002C         ?C0089:
002C 7F06              MOV     R7,#06H
002E 020000      E     LJMP    _SetPS2InhibitTime
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0031         ?C0015:
                                           ; SOURCE LINE # 132
0031 7800        E     MOV     R0,#LOW MousePendingBuf
0033 E6                MOV     A,@R0
0034 FF                MOV     R7,A
0035 120000      E     LCALL   _SendFromAux
                                           ; SOURCE LINE # 134
0038 300013      E     JNB     AUXInterfaceBusy,?C0018
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
003B C200        E     CLR     AUXInterfaceBusy
                                           ; SOURCE LINE # 137
003D 7800        E     MOV     R0,#LOW Main_KB_CHN
003F E6                MOV     A,@R0
0040 14                DEC     A
0041 FF                MOV     R7,A
0042 7800        E     MOV     R0,#LOW PS2_KBCmd_BK
0044 E6                MOV     A,@R0
0045 FD                MOV     R5,A
0046 120000      E     LCALL   _Send2Port
                                           ; SOURCE LINE # 138
0049 7F0A              MOV     R7,#0AH
                                           ; SOURCE LINE # 139
004B 020000      R     LJMP    ?C0090
004E         ?C0018:
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 13  

                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
004E 300006      E     JNB     MULPX_Multiplex,?C0020
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
0051 120000      E     LCALL   PS2Deviceactive
                                           ; SOURCE LINE # 145
0054 020000      R     LJMP    ?C0019
0057         ?C0020:
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
;---- Variable 'index' assigned to Register 'R7' ----
0057 E4                CLR     A
0058 FF                MOV     R7,A
0059         ?C0022:
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 150
0059 7400        E     MOV     A,#LOW AuxFlags
005B 2F                ADD     A,R7
005C F8                MOV     R0,A
005D E6                MOV     A,@R0
005E 30E64F            JNB     ACC.6,?C0024
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 152
0061 75F00D            MOV     B,#0DH
0064 EF                MOV     A,R7
0065 900000      E     MOV     DPTR,#asPS2Struct
0068 120000      E     LCALL   ?C?OFFXADD
006B E4                CLR     A
006C 93                MOVC    A,@A+DPTR
006D FC                MOV     R4,A
006E 7401              MOV     A,#01H
0070 93                MOVC    A,@A+DPTR
0071 F582              MOV     DPL,A
0073 8C83              MOV     DPH,R4
0075 7417              MOV     A,#017H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 153
0078 75F00D            MOV     B,#0DH
007B EF                MOV     A,R7
007C 900000      E     MOV     DPTR,#asPS2Struct+08H
007F 120000      E     LCALL   ?C?OFFXADD
0082 E4                CLR     A
0083 93                MOVC    A,@A+DPTR
0084 FC                MOV     R4,A
0085 7401              MOV     A,#01H
0087 93                MOVC    A,@A+DPTR
0088 F582              MOV     DPL,A
008A 8C83              MOV     DPH,R4
008C C083              PUSH    DPH
008E C082              PUSH    DPL
0090 E0                MOVX    A,@DPTR
0091 FE                MOV     R6,A
0092 75F00D            MOV     B,#0DH
0095 EF                MOV     A,R7
0096 900000      E     MOV     DPTR,#asPS2Struct+0CH
0099 120000      E     LCALL   ?C?OFFXADD
009C E4                CLR     A
009D 93                MOVC    A,@A+DPTR
009E FD                MOV     R5,A
009F 7401              MOV     A,#01H
00A1 A805              MOV     R0,AR5
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 14  

00A3 08                INC     R0
00A4 8002              SJMP    ?C0083
00A6         ?C0082:
00A6 C3                CLR     C
00A7 33                RLC     A
00A8         ?C0083:
00A8 D8FC              DJNZ    R0,?C0082
00AA 4E                ORL     A,R6
00AB D082              POP     DPL
00AD D083              POP     DPH
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
00B0         ?C0024:
00B0 0F                INC     R7
00B1 EF                MOV     A,R7
00B2 B403A4            CJNE    A,#03H,?C0022
00B5         ?C0023:
                                           ; SOURCE LINE # 156
00B5 E4                CLR     A
00B6 FF                MOV     R7,A
00B7         ?C0026:
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
00B7 7800        E     MOV     R0,#LOW AUXPortNum
00B9 E6                MOV     A,@R0
00BA 6F                XRL     A,R7
00BB 704F              JNZ     ?C0028
                                           ; SOURCE LINE # 159
                                           ; SOURCE LINE # 160
00BD E6                MOV     A,@R0
00BE 75F00D            MOV     B,#0DH
00C1 900000      E     MOV     DPTR,#asPS2Struct
00C4 120000      E     LCALL   ?C?OFFXADD
00C7 E4                CLR     A
00C8 93                MOVC    A,@A+DPTR
00C9 FC                MOV     R4,A
00CA 7401              MOV     A,#01H
00CC 93                MOVC    A,@A+DPTR
00CD F582              MOV     DPL,A
00CF 8C83              MOV     DPH,R4
00D1 7417              MOV     A,#017H
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00D4 E6                MOV     A,@R0
00D5 75F00D            MOV     B,#0DH
00D8 900000      E     MOV     DPTR,#asPS2Struct+08H
00DB 120000      E     LCALL   ?C?OFFXADD
00DE E4                CLR     A
00DF 93                MOVC    A,@A+DPTR
00E0 FC                MOV     R4,A
00E1 7401              MOV     A,#01H
00E3 93                MOVC    A,@A+DPTR
00E4 F582              MOV     DPL,A
00E6 8C83              MOV     DPH,R4
00E8 C083              PUSH    DPH
00EA C082              PUSH    DPL
00EC E0                MOVX    A,@DPTR
00ED FE                MOV     R6,A
00EE E6                MOV     A,@R0
00EF 75F00D            MOV     B,#0DH
00F2 900000      E     MOV     DPTR,#asPS2Struct+0CH
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 15  

00F5 120000      E     LCALL   ?C?OFFXADD
00F8 E4                CLR     A
00F9 93                MOVC    A,@A+DPTR
00FA FD                MOV     R5,A
00FB 7401              MOV     A,#01H
00FD A805              MOV     R0,AR5
00FF 08                INC     R0
0100 8002              SJMP    ?C0085
0102         ?C0084:
0102 C3                CLR     C
0103 33                RLC     A
0104         ?C0085:
0104 D8FC              DJNZ    R0,?C0084
0106 4E                ORL     A,R6
0107 D082              POP     DPL
0109 D083              POP     DPH
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
010C         ?C0028:
010C 0F                INC     R7
010D EF                MOV     A,R7
010E B403A6            CJNE    A,#03H,?C0026
0111         ?C0027:
                                           ; SOURCE LINE # 164
0111 7F06              MOV     R7,#06H
0113         ?C0090:
0113 120000      E     LCALL   _SetPS2InhibitTime
                                           ; SOURCE LINE # 165
                                           ; SOURCE LINE # 166
0116         ?C0019:
                                           ; SOURCE LINE # 167
0116 120000      E     LCALL   ResetMSPendingData
                                           ; SOURCE LINE # 168
0119         ?C0013:
0119 22                RET     
             ; FUNCTION Service_Send_PS2 (END)

             ; FUNCTION _KBC_DataToHost (BEGIN)
                                           ; SOURCE LINE # 179
0000 900000      R     MOV     DPTR,#nKBData
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 183
0005 A3                INC     DPTR
0006 7402              MOV     A,#02H
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A E4                CLR     A
000B F0                MOVX    @DPTR,A
000C         ?C0032:
                                           ; SOURCE LINE # 185
                                           ; SOURCE LINE # 186
000C 901304            MOV     DPTR,#01304H
000F E0                MOVX    A,@DPTR
0010 30E102            JNB     ACC.1,?C0033
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
                                           ; SOURCE LINE # 189
0013 8040              SJMP    ?C0091
                                           ; SOURCE LINE # 190
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 16  

0015         ?C0033:
                                           ; SOURCE LINE # 191
0015 901304            MOV     DPTR,#01304H
0018 E0                MOVX    A,@DPTR
0019 20E104            JB      ACC.1,?C0035
001C E0                MOVX    A,@DPTR
001D 30E014            JNB     ACC.0,?C0031
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
                                           ; SOURCE LINE # 194
0020         ?C0035:
                                           ; SOURCE LINE # 195
0020 900000      R     MOV     DPTR,#iLOOP
0023 74FF              MOV     A,#0FFH
0025 F5F0              MOV     B,A
0027 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
002A 900000      R     MOV     DPTR,#iLOOP
002D E0                MOVX    A,@DPTR
002E 7002              JNZ     ?C0086
0030 A3                INC     DPTR
0031 E0                MOVX    A,@DPTR
0032         ?C0086:
0032 70D8              JNZ     ?C0032
0034         ?C0031:
                                           ; SOURCE LINE # 199
0034 901304            MOV     DPTR,#01304H
0037 E0                MOVX    A,@DPTR
0038 4410              ORL     A,#010H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
003B E0                MOVX    A,@DPTR
003C 54DF              ANL     A,#0DFH
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
003F 901300            MOV     DPTR,#01300H
0042 E0                MOVX    A,@DPTR
0043 300005      E     JNB     Ccb42_INTR_KEY,?C0036
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0046 4401              ORL     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
0049 8003              SJMP    ?C0037
004B         ?C0036:
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 208
004B 54FE              ANL     A,#0FEH
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
004E         ?C0037:
                                           ; SOURCE LINE # 211
004E 901304            MOV     DPTR,#01304H
0051 E0                MOVX    A,@DPTR
0052 30E10B            JNB     ACC.1,?C0038
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
0055         ?C0091:
0055 900000      R     MOV     DPTR,#nKBData
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 17  

005A 120000      R     LCALL   _KBC_DataPending
                                           ; SOURCE LINE # 214
005D 7F00              MOV     R7,#00H
005F 22                RET     
                                           ; SOURCE LINE # 215
0060         ?C0038:
                                           ; SOURCE LINE # 216
0060 900000      R     MOV     DPTR,#nKBData
0063 E0                MOVX    A,@DPTR
0064 901306            MOV     DPTR,#01306H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 218
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 224
0068         ?C0040:
                                           ; SOURCE LINE # 227
0068 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 229
006A         ?C0034:
006A 22                RET     
             ; FUNCTION _KBC_DataToHost (END)

             ; FUNCTION _Data_To_Host (BEGIN)
                                           ; SOURCE LINE # 241
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 242
                                           ; SOURCE LINE # 250
0000 901304            MOV     DPTR,#01304H
0003 E0                MOVX    A,@DPTR
0004 4410              ORL     A,#010H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
0007 E0                MOVX    A,@DPTR
0008 54DF              ANL     A,#0DFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 253
000B 901300            MOV     DPTR,#01300H
000E E0                MOVX    A,@DPTR
000F 300005      E     JNB     Ccb42_INTR_KEY,?C0041
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
0012 4401              ORL     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 256
0015 8003              SJMP    ?C0042
0017         ?C0041:
                                           ; SOURCE LINE # 258
                                           ; SOURCE LINE # 259
0017 54FE              ANL     A,#0FEH
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
001A         ?C0042:
                                           ; SOURCE LINE # 262
001A 901306            MOV     DPTR,#01306H
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
001F 22                RET     
             ; FUNCTION _Data_To_Host (END)

C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 18  

             ; FUNCTION _KBC_DataPending (BEGIN)
                                           ; SOURCE LINE # 272
;---- Variable 'nPending' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
0000 900000      E     MOV     DPTR,#KBPendingRXCount
0003 E0                MOVX    A,@DPTR
0004 D3                SETB    C
0005 9403              SUBB    A,#03H
0007 501A              JNC     ?C0045
0009         ?C0044:
                                           ; SOURCE LINE # 276
0009 900000      E     MOV     DPTR,#KBPendingRXCount
000C E0                MOVX    A,@DPTR
000D 5403              ANL     A,#03H
000F 2400        E     ADD     A,#LOW KBDataPending
0011 F582              MOV     DPL,A
0013 E4                CLR     A
0014 3400        E     ADDC    A,#HIGH KBDataPending
0016 F583              MOV     DPH,A
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
001A 900000      E     MOV     DPTR,#KBPendingRXCount
001D E0                MOVX    A,@DPTR
001E 04                INC     A
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0020 120000      E     LCALL   EnableSendToHostTimer
                                           ; SOURCE LINE # 279
0023         ?C0045:
0023 22                RET     
             ; FUNCTION _KBC_DataPending (END)

             ; FUNCTION GetKB_PendingData (BEGIN)
                                           ; SOURCE LINE # 281
                                           ; SOURCE LINE # 282
                                           ; SOURCE LINE # 284
0000 900000      E     MOV     DPTR,#KBPendingTXCount
0003 E0                MOVX    A,@DPTR
0004 5403              ANL     A,#03H
0006 2400        E     ADD     A,#LOW KBDataPending
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        E     ADDC    A,#HIGH KBDataPending
000D F583              MOV     DPH,A
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
;---- Variable 'buffer_data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 285
0011 900000      E     MOV     DPTR,#KBPendingTXCount
0014 E0                MOVX    A,@DPTR
0015 04                INC     A
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
0017 900000      E     MOV     DPTR,#KBPendingRXCount
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C 900000      E     MOV     DPTR,#KBPendingTXCount
001F E0                MOVX    A,@DPTR
0020 C3                CLR     C
0021 9E                SUBB    A,R6
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 19  

0022 4006              JC      ?C0046
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0024 E4                CLR     A
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
0026 900000      E     MOV     DPTR,#KBPendingRXCount
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 290
002A         ?C0046:
                                           ; SOURCE LINE # 291
                                           ; SOURCE LINE # 292
002A         ?C0047:
002A 22                RET     
             ; FUNCTION GetKB_PendingData (END)

             ; FUNCTION _Aux_Data_To_Host (BEGIN)
                                           ; SOURCE LINE # 304
;---- Variable 'data_byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
0000 901304            MOV     DPTR,#01304H
0003 E0                MOVX    A,@DPTR
0004 300005      E     JNB     Ccb42_SYS_FLAG,?C0048
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0007 4404              ORL     A,#04H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 309
000A 8003              SJMP    ?C0049
000C         ?C0048:
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
000C 54FB              ANL     A,#0FBH
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
000F         ?C0049:
                                           ; SOURCE LINE # 315
000F 901304            MOV     DPTR,#01304H
0012 E0                MOVX    A,@DPTR
0013 54EF              ANL     A,#0EFH
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0016 E0                MOVX    A,@DPTR
0017 4420              ORL     A,#020H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
001A 901300            MOV     DPTR,#01300H
001D E0                MOVX    A,@DPTR
001E 300005      E     JNB     Ccb42_INTR_AUX,?C0050
                                           ; SOURCE LINE # 319
                                           ; SOURCE LINE # 320
0021 4402              ORL     A,#02H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0024 8003              SJMP    ?C0051
0026         ?C0050:
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0026 54FD              ANL     A,#0FDH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 20  

0029         ?C0051:
                                           ; SOURCE LINE # 327
0029 901308            MOV     DPTR,#01308H
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
002E 22                RET     
             ; FUNCTION _Aux_Data_To_Host (END)

             ; FUNCTION InitSio (BEGIN)
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 370
                                           ; SOURCE LINE # 375
0000 901202            MOV     DPTR,#01202H
0003 E0                MOVX    A,@DPTR
0004 4401              ORL     A,#01H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0007 901204            MOV     DPTR,#01204H
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 377
000E A3                INC     DPTR
000F E0                MOVX    A,@DPTR
0010 4401              ORL     A,#01H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
;---- Variable 'cnt' assigned to Register 'R7' ----
0013 E4                CLR     A
0014 FF                MOV     R7,A
                                           ; SOURCE LINE # 380
0015 7C00        R     MOV     R4,#HIGH initsio_table
0017 7D00        R     MOV     R5,#LOW initsio_table
;---- Variable 'data_pntr' assigned to Register 'R4/R5' ----
0019         ?C0053:
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 382
                                           ; SOURCE LINE # 383
0019 901200            MOV     DPTR,#01200H
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 384
001E 8D82              MOV     DPL,R5
0020 8C83              MOV     DPH,R4
0022 93                MOVC    A,@A+DPTR
0023 901201            MOV     DPTR,#01201H
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
0027 E4                CLR     A
0028 900000      R     MOV     DPTR,#Timeout
002B F0                MOVX    @DPTR,A
002C A3                INC     DPTR
002D F0                MOVX    @DPTR,A
002E         ?C0055:
                                           ; SOURCE LINE # 386
002E 901205            MOV     DPTR,#01205H
0031 E0                MOVX    A,@DPTR
0032 30E219            JNB     ACC.2,?C0056
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0035 900000      R     MOV     DPTR,#Timeout
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 21  

0038 E4                CLR     A
0039 75F001            MOV     B,#01H
003C 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 389
003F D3                SETB    C
0040 900000      R     MOV     DPTR,#Timeout+01H
0043 E0                MOVX    A,@DPTR
0044 9400              SUBB    A,#00H
0046 900000      R     MOV     DPTR,#Timeout
0049 E0                MOVX    A,@DPTR
004A 9401              SUBB    A,#01H
004C 40E0              JC      ?C0055
                                           ; SOURCE LINE # 390
004E         ?C0056:
                                           ; SOURCE LINE # 392
004E 0D                INC     R5
004F BD0001            CJNE    R5,#00H,?C0087
0052 0C                INC     R4
0053         ?C0087:
                                           ; SOURCE LINE # 394
0053 901200            MOV     DPTR,#01200H
0056 7401              MOV     A,#01H
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0059 8D82              MOV     DPL,R5
005B 8C83              MOV     DPH,R4
005D E4                CLR     A
005E 93                MOVC    A,@A+DPTR
005F 901201            MOV     DPTR,#01201H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 396
0063 E4                CLR     A
0064 900000      R     MOV     DPTR,#Timeout
0067 F0                MOVX    @DPTR,A
0068 A3                INC     DPTR
0069 F0                MOVX    @DPTR,A
006A         ?C0058:
                                           ; SOURCE LINE # 397
006A 901205            MOV     DPTR,#01205H
006D E0                MOVX    A,@DPTR
006E 30E219            JNB     ACC.2,?C0059
                                           ; SOURCE LINE # 398
                                           ; SOURCE LINE # 399
0071 900000      R     MOV     DPTR,#Timeout
0074 E4                CLR     A
0075 75F001            MOV     B,#01H
0078 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 400
007B D3                SETB    C
007C 900000      R     MOV     DPTR,#Timeout+01H
007F E0                MOVX    A,@DPTR
0080 9400              SUBB    A,#00H
0082 900000      R     MOV     DPTR,#Timeout
0085 E0                MOVX    A,@DPTR
0086 9401              SUBB    A,#01H
0088 40E0              JC      ?C0058
                                           ; SOURCE LINE # 401
008A         ?C0059:
                                           ; SOURCE LINE # 403
008A 0D                INC     R5
008B BD0001            CJNE    R5,#00H,?C0088
008E 0C                INC     R4
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 22  

008F         ?C0088:
                                           ; SOURCE LINE # 404
008F 0F                INC     R7
                                           ; SOURCE LINE # 405
0090 EF                MOV     A,R7
0091 6413              XRL     A,#013H
0093 7084              JNZ     ?C0053
0095         ?C0054:
                                           ; SOURCE LINE # 407
0095 901202            MOV     DPTR,#01202H
0098 E0                MOVX    A,@DPTR
0099 54FE              ANL     A,#0FEH
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
009C 901204            MOV     DPTR,#01204H
009F E0                MOVX    A,@DPTR
00A0 54FE              ANL     A,#0FEH
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
00A3 A3                INC     DPTR
00A4 E0                MOVX    A,@DPTR
00A5 54FE              ANL     A,#0FEH
00A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
00A8 22                RET     
             ; FUNCTION InitSio (END)

             ; FUNCTION _send_to_pc (BEGIN)
                                           ; SOURCE LINE # 432
;---- Variable 'break_prefix_flag' assigned to Register 'R5' ----
;---- Variable 'data_word' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 433
                                           ; SOURCE LINE # 434
0000 120000      R     LCALL   _common_send_to_pc
                                           ; SOURCE LINE # 435
0003         ?C0062:
0003 22                RET     
             ; FUNCTION _send_to_pc (END)

             ; FUNCTION _common_send_to_pc (BEGIN)
                                           ; SOURCE LINE # 437
0000 900000      R     MOV     DPTR,#break_prefix_flag
0003 ED                MOV     A,R5
0004 F0                MOVX    @DPTR,A
;---- Variable 'data_word' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
0005 E4                CLR     A
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
0008 200009      E     JB      Ccb42_XLATE_PC,?C0063
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
000B 04                INC     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
000D E4                CLR     A
000E 900000      R     MOV     DPTR,#break_prefix_flag
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 445
0012 8026              SJMP    ?C0064
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 23  

0014         ?C0063:
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0014 900000      R     MOV     DPTR,#break_prefix_flag
0017 E0                MOVX    A,@DPTR
0018 FD                MOV     R5,A
0019 120000      R     LCALL   _translate_to_pc
                                           ; SOURCE LINE # 449
001C EF                MOV     A,R7
001D B4FF08            CJNE    A,#0FFH,?C0065
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
0020 900000      R     MOV     DPTR,#break_prefix_flag
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0026 8012              SJMP    ?C0064
0028         ?C0065:
                                           ; SOURCE LINE # 453
0028 EF                MOV     A,R7
0029 7007              JNZ     ?C0067
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
002B 900000      R     MOV     DPTR,#break_prefix_flag
002E 04                INC     A
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0030 8008              SJMP    ?C0064
0032         ?C0067:
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
0032 E4                CLR     A
0033 900000      R     MOV     DPTR,#break_prefix_flag
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0037 A3                INC     DPTR
0038 04                INC     A
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
003A         ?C0064:
                                           ; SOURCE LINE # 464
003A 900000      R     MOV     DPTR,#send_it
003D E0                MOVX    A,@DPTR
003E 6003              JZ      ?C0069
0040 120000      R     LCALL   _Data_To_Host
0043         ?C0069:
                                           ; SOURCE LINE # 466
0043 900000      R     MOV     DPTR,#break_prefix_flag
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
                                           ; SOURCE LINE # 467
0048         ?C0070:
0048 22                RET     
             ; FUNCTION _common_send_to_pc (END)

             ; FUNCTION _translate_to_pc (BEGIN)
                                           ; SOURCE LINE # 480
;---- Variable 'data_word' assigned to Register 'R7' ----
;---- Variable 'break_prefix_flag' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 504
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 24  

;---- Variable 'check_break_bit' assigned to Register 'R6' ----
0000 E4                CLR     A
0001 FE                MOV     R6,A
                                           ; SOURCE LINE # 506
0002 EF                MOV     A,R7
0003 B4F004            CJNE    A,#0F0H,?C0071
                                           ; SOURCE LINE # 507
                                           ; SOURCE LINE # 508
0006 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 509
0008 8025              SJMP    ?C0072
000A         ?C0071:
                                           ; SOURCE LINE # 510
000A EF                MOV     A,R7
000B 7003              JNZ     ?C0073
                                           ; SOURCE LINE # 511
                                           ; SOURCE LINE # 512
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 513
000E 801F              SJMP    ?C0072
0010         ?C0073:
                                           ; SOURCE LINE # 514
0010 EF                MOV     A,R7
0011 20E709            JB      ACC.7,?C0075
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 518
0014 900000      R     MOV     DPTR,#scan2_table
0017 93                MOVC    A,@A+DPTR
0018 FF                MOV     R7,A
                                           ; SOURCE LINE # 519
0019 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 520
001B 8012              SJMP    ?C0072
001D         ?C0075:
                                           ; SOURCE LINE # 521
001D EF                MOV     A,R7
001E B48306            CJNE    A,#083H,?C0077
                                           ; SOURCE LINE # 522
                                           ; SOURCE LINE # 523
0021 7F41              MOV     R7,#041H
                                           ; SOURCE LINE # 524
0023 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 525
0025 8008              SJMP    ?C0072
0027         ?C0077:
                                           ; SOURCE LINE # 526
0027 EF                MOV     A,R7
0028 B48404            CJNE    A,#084H,?C0072
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
002B 7F54              MOV     R7,#054H
                                           ; SOURCE LINE # 529
002D 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 530
002F         ?C0072:
                                           ; SOURCE LINE # 532
002F EE                MOV     A,R6
0030 6007              JZ      ?C0080
0032 ED                MOV     A,R5
0033 6004              JZ      ?C0080
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 535
C51 COMPILER V7.06   CORE_HOSTIF                                                           07/06/2010 09:59:42 PAGE 25  

0035 EF                MOV     A,R7
0036 4480              ORL     A,#080H
0038 FF                MOV     R7,A
                                           ; SOURCE LINE # 536
0039         ?C0080:
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
0039         ?C0081:
0039 22                RET     
             ; FUNCTION _translate_to_pc (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    957    ----
   CONSTANT SIZE    =    166    ----
   XDATA SIZE       =   ----       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
